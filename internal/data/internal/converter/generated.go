// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	ent "github.com/tuihub/librarian/internal/data/internal/ent"
	app "github.com/tuihub/librarian/internal/data/internal/ent/app"
	appinfo "github.com/tuihub/librarian/internal/data/internal/ent/appinfo"
	device "github.com/tuihub/librarian/internal/data/internal/ent/device"
	feedconfig "github.com/tuihub/librarian/internal/data/internal/ent/feedconfig"
	image "github.com/tuihub/librarian/internal/data/internal/ent/image"
	notifyflow "github.com/tuihub/librarian/internal/data/internal/ent/notifyflow"
	notifytarget "github.com/tuihub/librarian/internal/data/internal/ent/notifytarget"
	portercontext "github.com/tuihub/librarian/internal/data/internal/ent/portercontext"
	porterinstance "github.com/tuihub/librarian/internal/data/internal/ent/porterinstance"
	systemnotification "github.com/tuihub/librarian/internal/data/internal/ent/systemnotification"
	user "github.com/tuihub/librarian/internal/data/internal/ent/user"
	model "github.com/tuihub/librarian/internal/model"
	modelchesed "github.com/tuihub/librarian/internal/model/modelchesed"
	modelfeed "github.com/tuihub/librarian/internal/model/modelfeed"
	modelgebura "github.com/tuihub/librarian/internal/model/modelgebura"
	modelnetzach "github.com/tuihub/librarian/internal/model/modelnetzach"
	modelsupervisor "github.com/tuihub/librarian/internal/model/modelsupervisor"
	modelyesod "github.com/tuihub/librarian/internal/model/modelyesod"
	"time"
)

func ToBizAccount(source *ent.Account) *model.Account {
	var pModelAccount *model.Account
	if source != nil {
		var modelAccount model.Account
		modelAccount.ID = model.InternalID((*source).ID)
		modelAccount.Platform = (*source).Platform
		modelAccount.PlatformAccountID = (*source).PlatformAccountID
		modelAccount.Name = (*source).Name
		modelAccount.ProfileURL = (*source).ProfileURL
		modelAccount.AvatarURL = (*source).AvatarURL
		modelAccount.LatestUpdateTime = TimeToTime((*source).UpdatedAt)
		pModelAccount = &modelAccount
	}
	return pModelAccount
}
func ToBizAccountList(source []*ent.Account) []*model.Account {
	var pModelAccountList []*model.Account
	if source != nil {
		pModelAccountList = make([]*model.Account, len(source))
		for i := 0; i < len(source); i++ {
			pModelAccountList[i] = ToBizAccount(source[i])
		}
	}
	return pModelAccountList
}
func ToBizApp(source *ent.App) *modelgebura.App {
	var pModelgeburaApp *modelgebura.App
	if source != nil {
		var modelgeburaApp modelgebura.App
		modelgeburaApp.ID = modelInternalIDToModelInternalID((*source).ID)
		modelgeburaApp.VersionNumber = (*source).VersionNumber
		modelgeburaApp.VersionDate = TimeToTime((*source).VersionDate)
		modelgeburaApp.CreatorDeviceID = modelInternalIDToModelInternalID((*source).CreatorDeviceID)
		if (*source).AppSources != nil {
			modelgeburaApp.AppSources = make(map[string]string, len((*source).AppSources))
			for key, value := range (*source).AppSources {
				modelgeburaApp.AppSources[key] = value
			}
		}
		modelgeburaApp.Public = (*source).Public
		modelgeburaApp.BoundStoreAppID = modelInternalIDToPModelInternalID((*source).BoundStoreAppID)
		pBool := (*source).StopStoreManage
		modelgeburaApp.StopStoreManage = &pBool
		modelgeburaApp.Name = (*source).Name
		modelgeburaApp.Type = ToBizAppType((*source).Type)
		modelgeburaApp.ShortDescription = (*source).ShortDescription
		modelgeburaApp.Description = (*source).Description
		modelgeburaApp.IconImageURL = (*source).IconImageURL
		modelgeburaApp.IconImageID = modelInternalIDToModelInternalID((*source).IconImageID)
		modelgeburaApp.BackgroundImageURL = (*source).BackgroundImageURL
		modelgeburaApp.BackgroundImageID = modelInternalIDToModelInternalID((*source).BackgroundImageID)
		modelgeburaApp.CoverImageURL = (*source).CoverImageURL
		modelgeburaApp.CoverImageID = modelInternalIDToModelInternalID((*source).CoverImageID)
		modelgeburaApp.ReleaseDate = (*source).ReleaseDate
		modelgeburaApp.Developer = (*source).Developer
		modelgeburaApp.Publisher = (*source).Publisher
		if (*source).Tags != nil {
			modelgeburaApp.Tags = make([]string, len((*source).Tags))
			for i := 0; i < len((*source).Tags); i++ {
				modelgeburaApp.Tags[i] = (*source).Tags[i]
			}
		}
		if (*source).AlternativeNames != nil {
			modelgeburaApp.AlternativeNames = make([]string, len((*source).AlternativeNames))
			for j := 0; j < len((*source).AlternativeNames); j++ {
				modelgeburaApp.AlternativeNames[j] = (*source).AlternativeNames[j]
			}
		}
		pModelgeburaApp = &modelgeburaApp
	}
	return pModelgeburaApp
}
func ToBizAppBinary(source ent.StoreAppBinary) modelgebura.AppBinary {
	var modelgeburaAppBinary modelgebura.AppBinary
	modelgeburaAppBinary.Name = source.Name
	modelgeburaAppBinary.SizeBytes = source.SizeBytes
	modelgeburaAppBinary.PublicURL = source.PublicURL
	if source.Sha256 != nil {
		modelgeburaAppBinary.Sha256 = make([]uint8, len(source.Sha256))
		for i := 0; i < len(source.Sha256); i++ {
			modelgeburaAppBinary.Sha256[i] = source.Sha256[i]
		}
	}
	return modelgeburaAppBinary
}
func ToBizAppCategory(source *ent.AppCategory) *modelgebura.AppCategory {
	var pModelgeburaAppCategory *modelgebura.AppCategory
	if source != nil {
		var modelgeburaAppCategory modelgebura.AppCategory
		modelgeburaAppCategory.ID = modelInternalIDToModelInternalID((*source).ID)
		modelgeburaAppCategory.VersionNumber = (*source).VersionNumber
		modelgeburaAppCategory.VersionDate = TimeToTime((*source).VersionDate)
		modelgeburaAppCategory.Name = (*source).Name
		pModelgeburaAppCategory = &modelgeburaAppCategory
	}
	return pModelgeburaAppCategory
}
func ToBizAppInfo(source *ent.AppInfo) *modelgebura.AppInfo {
	var pModelgeburaAppInfo *modelgebura.AppInfo
	if source != nil {
		var modelgeburaAppInfo modelgebura.AppInfo
		modelgeburaAppInfo.ID = modelInternalIDToModelInternalID((*source).ID)
		modelgeburaAppInfo.Source = (*source).Source
		modelgeburaAppInfo.SourceAppID = (*source).SourceAppID
		modelgeburaAppInfo.SourceURL = (*source).SourceURL
		modelgeburaAppInfo.Name = (*source).Name
		modelgeburaAppInfo.Type = ToBizAppInfoType((*source).Type)
		modelgeburaAppInfo.ShortDescription = (*source).ShortDescription
		modelgeburaAppInfo.Description = (*source).Description
		modelgeburaAppInfo.IconImageURL = (*source).IconImageURL
		modelgeburaAppInfo.IconImageID = modelInternalIDToModelInternalID((*source).IconImageID)
		modelgeburaAppInfo.BackgroundImageURL = (*source).BackgroundImageURL
		modelgeburaAppInfo.BackgroundImageID = modelInternalIDToModelInternalID((*source).BackgroundImageID)
		modelgeburaAppInfo.CoverImageURL = (*source).CoverImageURL
		modelgeburaAppInfo.CoverImageID = modelInternalIDToModelInternalID((*source).CoverImageID)
		modelgeburaAppInfo.ReleaseDate = (*source).ReleaseDate
		modelgeburaAppInfo.Developer = (*source).Developer
		modelgeburaAppInfo.Publisher = (*source).Publisher
		if (*source).Tags != nil {
			modelgeburaAppInfo.Tags = make([]string, len((*source).Tags))
			for i := 0; i < len((*source).Tags); i++ {
				modelgeburaAppInfo.Tags[i] = (*source).Tags[i]
			}
		}
		if (*source).AlternativeNames != nil {
			modelgeburaAppInfo.AlternativeNames = make([]string, len((*source).AlternativeNames))
			for j := 0; j < len((*source).AlternativeNames); j++ {
				modelgeburaAppInfo.AlternativeNames[j] = (*source).AlternativeNames[j]
			}
		}
		modelgeburaAppInfo.RawData = (*source).RawData
		modelgeburaAppInfo.UpdatedAt = TimeToTime((*source).UpdatedAt)
		pModelgeburaAppInfo = &modelgeburaAppInfo
	}
	return pModelgeburaAppInfo
}
func ToBizAppInfoList(source []*ent.AppInfo) []*modelgebura.AppInfo {
	var pModelgeburaAppInfoList []*modelgebura.AppInfo
	if source != nil {
		pModelgeburaAppInfoList = make([]*modelgebura.AppInfo, len(source))
		for i := 0; i < len(source); i++ {
			pModelgeburaAppInfoList[i] = ToBizAppInfo(source[i])
		}
	}
	return pModelgeburaAppInfoList
}
func ToBizAppInfoType(source appinfo.Type) modelgebura.AppType {
	var modelgeburaAppType modelgebura.AppType
	switch source {
	case appinfo.TypeGame:
		modelgeburaAppType = modelgebura.AppTypeGame
	case appinfo.TypeUnknown:
		modelgeburaAppType = modelgebura.AppTypeUnspecified
	default:
		modelgeburaAppType = modelgebura.AppTypeUnspecified
	}
	return modelgeburaAppType
}
func ToBizAppList(source []*ent.App) []*modelgebura.App {
	var pModelgeburaAppList []*modelgebura.App
	if source != nil {
		pModelgeburaAppList = make([]*modelgebura.App, len(source))
		for i := 0; i < len(source); i++ {
			pModelgeburaAppList[i] = ToBizApp(source[i])
		}
	}
	return pModelgeburaAppList
}
func ToBizAppRunTime(source *ent.AppRunTime) *modelgebura.AppRunTime {
	var pModelgeburaAppRunTime *modelgebura.AppRunTime
	if source != nil {
		var modelgeburaAppRunTime modelgebura.AppRunTime
		modelgeburaAppRunTime.ID = modelInternalIDToModelInternalID((*source).ID)
		modelgeburaAppRunTime.AppID = modelInternalIDToModelInternalID((*source).AppID)
		modelgeburaAppRunTime.DeviceID = modelInternalIDToModelInternalID((*source).DeviceID)
		modelgeburaAppRunTime.RunTime = entAppRunTimeToPModelTimeRange((*source))
		pModelgeburaAppRunTime = &modelgeburaAppRunTime
	}
	return pModelgeburaAppRunTime
}
func ToBizAppRunTimeList(source []*ent.AppRunTime) []*modelgebura.AppRunTime {
	var pModelgeburaAppRunTimeList []*modelgebura.AppRunTime
	if source != nil {
		pModelgeburaAppRunTimeList = make([]*modelgebura.AppRunTime, len(source))
		for i := 0; i < len(source); i++ {
			pModelgeburaAppRunTimeList[i] = ToBizAppRunTime(source[i])
		}
	}
	return pModelgeburaAppRunTimeList
}
func ToBizAppType(source app.Type) modelgebura.AppType {
	var modelgeburaAppType modelgebura.AppType
	switch source {
	case app.TypeGame:
		modelgeburaAppType = modelgebura.AppTypeGame
	case app.TypeUnknown:
		modelgeburaAppType = modelgebura.AppTypeUnspecified
	default:
		modelgeburaAppType = modelgebura.AppTypeUnspecified
	}
	return modelgeburaAppType
}
func ToBizDeviceInfo(source *ent.Device) *model.Device {
	var pModelDevice *model.Device
	if source != nil {
		var modelDevice model.Device
		modelDevice.ID = modelInternalIDToModelInternalID((*source).ID)
		modelDevice.DeviceName = (*source).DeviceName
		modelDevice.SystemType = ToBizSystemType((*source).SystemType)
		modelDevice.SystemVersion = (*source).SystemVersion
		modelDevice.ClientName = (*source).ClientName
		modelDevice.ClientSourceCodeAddress = (*source).ClientSourceCodeAddress
		modelDevice.ClientVersion = (*source).ClientVersion
		pModelDevice = &modelDevice
	}
	return pModelDevice
}
func ToBizDeviceInfoList(source []*ent.Device) []*model.Device {
	var pModelDeviceList []*model.Device
	if source != nil {
		pModelDeviceList = make([]*model.Device, len(source))
		for i := 0; i < len(source); i++ {
			pModelDeviceList[i] = ToBizDeviceInfo(source[i])
		}
	}
	return pModelDeviceList
}
func ToBizFeed(source *ent.Feed) *modelfeed.Feed {
	var pModelfeedFeed *modelfeed.Feed
	if source != nil {
		var modelfeedFeed modelfeed.Feed
		modelfeedFeed.ID = modelInternalIDToModelInternalID((*source).ID)
		modelfeedFeed.Title = (*source).Title
		modelfeedFeed.Description = (*source).Description
		modelfeedFeed.Link = (*source).Link
		if (*source).Authors != nil {
			modelfeedFeed.Authors = make([]*modelfeed.Person, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				modelfeedFeed.Authors[i] = pModelfeedPersonToPModelfeedPerson((*source).Authors[i])
			}
		}
		modelfeedFeed.Language = (*source).Language
		modelfeedFeed.Image = pModelfeedImageToPModelfeedImage((*source).Image)
		pModelfeedFeed = &modelfeedFeed
	}
	return pModelfeedFeed
}
func ToBizFeedActionSet(source *ent.FeedActionSet) *modelyesod.FeedActionSet {
	var pModelyesodFeedActionSet *modelyesod.FeedActionSet
	if source != nil {
		var modelyesodFeedActionSet modelyesod.FeedActionSet
		modelyesodFeedActionSet.ID = modelInternalIDToModelInternalID((*source).ID)
		modelyesodFeedActionSet.Name = (*source).Name
		modelyesodFeedActionSet.Description = (*source).Description
		if (*source).Actions != nil {
			modelyesodFeedActionSet.Actions = make([]*modelsupervisor.FeatureRequest, len((*source).Actions))
			for i := 0; i < len((*source).Actions); i++ {
				modelyesodFeedActionSet.Actions[i] = pModelsupervisorFeatureRequestToPModelsupervisorFeatureRequest((*source).Actions[i])
			}
		}
		pModelyesodFeedActionSet = &modelyesodFeedActionSet
	}
	return pModelyesodFeedActionSet
}
func ToBizFeedActionSetList(source []*ent.FeedActionSet) []*modelyesod.FeedActionSet {
	var pModelyesodFeedActionSetList []*modelyesod.FeedActionSet
	if source != nil {
		pModelyesodFeedActionSetList = make([]*modelyesod.FeedActionSet, len(source))
		for i := 0; i < len(source); i++ {
			pModelyesodFeedActionSetList[i] = ToBizFeedActionSet(source[i])
		}
	}
	return pModelyesodFeedActionSetList
}
func ToBizFeedConfig(source *ent.FeedConfig) *modelyesod.FeedConfig {
	var pModelyesodFeedConfig *modelyesod.FeedConfig
	if source != nil {
		var modelyesodFeedConfig modelyesod.FeedConfig
		modelyesodFeedConfig.ID = modelInternalIDToModelInternalID((*source).ID)
		modelyesodFeedConfig.Name = (*source).Name
		modelyesodFeedConfig.Description = (*source).Description
		modelyesodFeedConfig.Source = pModelsupervisorFeatureRequestToPModelsupervisorFeatureRequest((*source).Source)
		modelyesodFeedConfig.Category = (*source).Category
		modelyesodFeedConfig.Status = ToBizFeedConfigStatus((*source).Status)
		modelyesodFeedConfig.PullInterval = time.Duration((*source).PullInterval)
		modelyesodFeedConfig.LatestPullTime = TimeToTime((*source).LatestPullAt)
		modelyesodFeedConfig.LatestPullStatus = ToBizFeedConfigPullStatus((*source).LatestPullStatus)
		modelyesodFeedConfig.LatestPullMessage = (*source).LatestPullMessage
		modelyesodFeedConfig.HideItems = (*source).HideItems
		pModelyesodFeedConfig = &modelyesodFeedConfig
	}
	return pModelyesodFeedConfig
}
func ToBizFeedConfigList(source []*ent.FeedConfig) []*modelyesod.FeedConfig {
	var pModelyesodFeedConfigList []*modelyesod.FeedConfig
	if source != nil {
		pModelyesodFeedConfigList = make([]*modelyesod.FeedConfig, len(source))
		for i := 0; i < len(source); i++ {
			pModelyesodFeedConfigList[i] = ToBizFeedConfig(source[i])
		}
	}
	return pModelyesodFeedConfigList
}
func ToBizFeedConfigPullStatus(source feedconfig.LatestPullStatus) modelyesod.FeedConfigPullStatus {
	var modelyesodFeedConfigPullStatus modelyesod.FeedConfigPullStatus
	switch source {
	case feedconfig.LatestPullStatusFailed:
		modelyesodFeedConfigPullStatus = modelyesod.FeedConfigPullStatusFailed
	case feedconfig.LatestPullStatusProcessing:
		modelyesodFeedConfigPullStatus = modelyesod.FeedConfigPullStatusProcessing
	case feedconfig.LatestPullStatusSuccess:
		modelyesodFeedConfigPullStatus = modelyesod.FeedConfigPullStatusSuccess
	default:
		modelyesodFeedConfigPullStatus = modelyesod.FeedConfigPullStatusUnspecified
	}
	return modelyesodFeedConfigPullStatus
}
func ToBizFeedConfigStatus(source feedconfig.Status) modelyesod.FeedConfigStatus {
	var modelyesodFeedConfigStatus modelyesod.FeedConfigStatus
	switch source {
	case feedconfig.StatusActive:
		modelyesodFeedConfigStatus = modelyesod.FeedConfigStatusActive
	case feedconfig.StatusSuspend:
		modelyesodFeedConfigStatus = modelyesod.FeedConfigStatusSuspend
	default:
		modelyesodFeedConfigStatus = modelyesod.FeedConfigStatusUnspecified
	}
	return modelyesodFeedConfigStatus
}
func ToBizFeedItem(source *ent.FeedItem) *modelfeed.Item {
	var pModelfeedItem *modelfeed.Item
	if source != nil {
		var modelfeedItem modelfeed.Item
		modelfeedItem.ID = modelInternalIDToModelInternalID((*source).ID)
		modelfeedItem.Title = (*source).Title
		modelfeedItem.Description = (*source).Description
		modelfeedItem.Content = (*source).Content
		modelfeedItem.Link = (*source).Link
		modelfeedItem.Updated = (*source).Updated
		modelfeedItem.UpdatedParsed = TimeToTimePtr((*source).UpdatedParsed)
		modelfeedItem.Published = (*source).Published
		modelfeedItem.PublishedParsed = timeTimeToPTimeTime((*source).PublishedParsed)
		if (*source).Authors != nil {
			modelfeedItem.Authors = make([]*modelfeed.Person, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				modelfeedItem.Authors[i] = pModelfeedPersonToPModelfeedPerson((*source).Authors[i])
			}
		}
		modelfeedItem.GUID = (*source).GUID
		modelfeedItem.Image = pModelfeedImageToPModelfeedImage((*source).Image)
		if (*source).Enclosures != nil {
			modelfeedItem.Enclosures = make([]*modelfeed.Enclosure, len((*source).Enclosures))
			for j := 0; j < len((*source).Enclosures); j++ {
				modelfeedItem.Enclosures[j] = pModelfeedEnclosureToPModelfeedEnclosure((*source).Enclosures[j])
			}
		}
		modelfeedItem.PublishPlatform = (*source).PublishPlatform
		modelfeedItem.ReadCount = (*source).ReadCount
		modelfeedItem.DigestDescription = (*source).DigestDescription
		if (*source).DigestImages != nil {
			modelfeedItem.DigestImages = make([]*modelfeed.Image, len((*source).DigestImages))
			for k := 0; k < len((*source).DigestImages); k++ {
				modelfeedItem.DigestImages[k] = pModelfeedImageToPModelfeedImage((*source).DigestImages[k])
			}
		}
		pModelfeedItem = &modelfeedItem
	}
	return pModelfeedItem
}
func ToBizFeedItemCollection(source *ent.FeedItemCollection) *modelyesod.FeedItemCollection {
	var pModelyesodFeedItemCollection *modelyesod.FeedItemCollection
	if source != nil {
		var modelyesodFeedItemCollection modelyesod.FeedItemCollection
		modelyesodFeedItemCollection.ID = modelInternalIDToModelInternalID((*source).ID)
		modelyesodFeedItemCollection.Name = (*source).Name
		modelyesodFeedItemCollection.Description = (*source).Description
		modelyesodFeedItemCollection.Category = (*source).Category
		pModelyesodFeedItemCollection = &modelyesodFeedItemCollection
	}
	return pModelyesodFeedItemCollection
}
func ToBizFeedItemCollectionList(source []*ent.FeedItemCollection) []*modelyesod.FeedItemCollection {
	var pModelyesodFeedItemCollectionList []*modelyesod.FeedItemCollection
	if source != nil {
		pModelyesodFeedItemCollectionList = make([]*modelyesod.FeedItemCollection, len(source))
		for i := 0; i < len(source); i++ {
			pModelyesodFeedItemCollectionList[i] = ToBizFeedItemCollection(source[i])
		}
	}
	return pModelyesodFeedItemCollectionList
}
func ToBizFeedItemList(source []*ent.FeedItem) []*modelfeed.Item {
	var pModelfeedItemList []*modelfeed.Item
	if source != nil {
		pModelfeedItemList = make([]*modelfeed.Item, len(source))
		for i := 0; i < len(source); i++ {
			pModelfeedItemList[i] = ToBizFeedItem(source[i])
		}
	}
	return pModelfeedItemList
}
func ToBizImage(source *ent.Image) *modelchesed.Image {
	var pModelchesedImage *modelchesed.Image
	if source != nil {
		var modelchesedImage modelchesed.Image
		modelchesedImage.ID = modelInternalIDToModelInternalID((*source).ID)
		modelchesedImage.Name = (*source).Name
		modelchesedImage.Description = (*source).Description
		modelchesedImage.Status = ToBizImageStatus((*source).Status)
		pModelchesedImage = &modelchesedImage
	}
	return pModelchesedImage
}
func ToBizImageList(source []*ent.Image) []*modelchesed.Image {
	var pModelchesedImageList []*modelchesed.Image
	if source != nil {
		pModelchesedImageList = make([]*modelchesed.Image, len(source))
		for i := 0; i < len(source); i++ {
			pModelchesedImageList[i] = ToBizImage(source[i])
		}
	}
	return pModelchesedImageList
}
func ToBizImageStatus(source image.Status) modelchesed.ImageStatus {
	var modelchesedImageStatus modelchesed.ImageStatus
	switch source {
	case image.StatusScanned:
		modelchesedImageStatus = modelchesed.ImageStatusScanned
	case image.StatusUploaded:
		modelchesedImageStatus = modelchesed.ImageStatusUploaded
	default:
		modelchesedImageStatus = modelchesed.ImageStatusUnspecified
	}
	return modelchesedImageStatus
}
func ToBizNotifyFlow(source *ent.NotifyFlow) *modelnetzach.NotifyFlow {
	var pModelnetzachNotifyFlow *modelnetzach.NotifyFlow
	if source != nil {
		var modelnetzachNotifyFlow modelnetzach.NotifyFlow
		modelnetzachNotifyFlow.ID = modelInternalIDToModelInternalID((*source).ID)
		modelnetzachNotifyFlow.Name = (*source).Name
		modelnetzachNotifyFlow.Description = (*source).Description
		modelnetzachNotifyFlow.Status = ToBizNotifyFlowStatus((*source).Status)
		pModelnetzachNotifyFlow = &modelnetzachNotifyFlow
	}
	return pModelnetzachNotifyFlow
}
func ToBizNotifyFlowStatus(source notifyflow.Status) modelnetzach.NotifyFlowStatus {
	var modelnetzachNotifyFlowStatus modelnetzach.NotifyFlowStatus
	switch source {
	case notifyflow.StatusActive:
		modelnetzachNotifyFlowStatus = modelnetzach.NotifyFlowStatusActive
	case notifyflow.StatusSuspend:
		modelnetzachNotifyFlowStatus = modelnetzach.NotifyFlowStatusSuspend
	default:
		modelnetzachNotifyFlowStatus = modelnetzach.NotifyFlowStatusUnspecified
	}
	return modelnetzachNotifyFlowStatus
}
func ToBizNotifyTarget(source *ent.NotifyTarget) *modelnetzach.NotifyTarget {
	var pModelnetzachNotifyTarget *modelnetzach.NotifyTarget
	if source != nil {
		var modelnetzachNotifyTarget modelnetzach.NotifyTarget
		modelnetzachNotifyTarget.ID = modelInternalIDToModelInternalID((*source).ID)
		modelnetzachNotifyTarget.Name = (*source).Name
		modelnetzachNotifyTarget.Description = (*source).Description
		modelnetzachNotifyTarget.Destination = pModelsupervisorFeatureRequestToPModelsupervisorFeatureRequest((*source).Destination)
		modelnetzachNotifyTarget.Status = ToBizNotifyTargetStatus((*source).Status)
		pModelnetzachNotifyTarget = &modelnetzachNotifyTarget
	}
	return pModelnetzachNotifyTarget
}
func ToBizNotifyTargetList(source []*ent.NotifyTarget) []*modelnetzach.NotifyTarget {
	var pModelnetzachNotifyTargetList []*modelnetzach.NotifyTarget
	if source != nil {
		pModelnetzachNotifyTargetList = make([]*modelnetzach.NotifyTarget, len(source))
		for i := 0; i < len(source); i++ {
			pModelnetzachNotifyTargetList[i] = ToBizNotifyTarget(source[i])
		}
	}
	return pModelnetzachNotifyTargetList
}
func ToBizNotifyTargetStatus(source notifytarget.Status) modelnetzach.NotifyTargetStatus {
	var modelnetzachNotifyTargetStatus modelnetzach.NotifyTargetStatus
	switch source {
	case notifytarget.StatusActive:
		modelnetzachNotifyTargetStatus = modelnetzach.NotifyTargetStatusActive
	case notifytarget.StatusSuspend:
		modelnetzachNotifyTargetStatus = modelnetzach.NotifyTargetStatusSuspend
	default:
		modelnetzachNotifyTargetStatus = modelnetzach.NotifyTargetStatusUnspecified
	}
	return modelnetzachNotifyTargetStatus
}
func ToBizPorter(source *ent.PorterInstance) *modelsupervisor.PorterInstance {
	var pModelsupervisorPorterInstance *modelsupervisor.PorterInstance
	if source != nil {
		var modelsupervisorPorterInstance modelsupervisor.PorterInstance
		modelsupervisorPorterInstance.ID = modelInternalIDToModelInternalID((*source).ID)
		modelsupervisorPorterInstance.BinarySummary = entPorterInstanceToPModelsupervisorPorterBinarySummary((*source))
		modelsupervisorPorterInstance.GlobalName = (*source).GlobalName
		modelsupervisorPorterInstance.Address = (*source).Address
		modelsupervisorPorterInstance.Region = (*source).Region
		modelsupervisorPorterInstance.FeatureSummary = pModelsupervisorPorterFeatureSummaryToPModelsupervisorPorterFeatureSummary((*source).FeatureSummary)
		modelsupervisorPorterInstance.Status = ToBizPorterStatus((*source).Status)
		modelsupervisorPorterInstance.ContextJSONSchema = (*source).ContextJSONSchema
		pModelsupervisorPorterInstance = &modelsupervisorPorterInstance
	}
	return pModelsupervisorPorterInstance
}
func ToBizPorterContext(source *ent.PorterContext) *modelsupervisor.PorterContext {
	var pModelsupervisorPorterContext *modelsupervisor.PorterContext
	if source != nil {
		var modelsupervisorPorterContext modelsupervisor.PorterContext
		modelsupervisorPorterContext.ID = modelInternalIDToModelInternalID((*source).ID)
		modelsupervisorPorterContext.GlobalName = (*source).GlobalName
		modelsupervisorPorterContext.Region = (*source).Region
		modelsupervisorPorterContext.ContextJSON = (*source).ContextJSON
		modelsupervisorPorterContext.Name = (*source).Name
		modelsupervisorPorterContext.Description = (*source).Description
		modelsupervisorPorterContext.Status = ToBizPorterContextStatus((*source).Status)
		pModelsupervisorPorterContext = &modelsupervisorPorterContext
	}
	return pModelsupervisorPorterContext
}
func ToBizPorterContextList(source []*ent.PorterContext) []*modelsupervisor.PorterContext {
	var pModelsupervisorPorterContextList []*modelsupervisor.PorterContext
	if source != nil {
		pModelsupervisorPorterContextList = make([]*modelsupervisor.PorterContext, len(source))
		for i := 0; i < len(source); i++ {
			pModelsupervisorPorterContextList[i] = ToBizPorterContext(source[i])
		}
	}
	return pModelsupervisorPorterContextList
}
func ToBizPorterContextStatus(source portercontext.Status) modelsupervisor.PorterContextStatus {
	var modelsupervisorPorterContextStatus modelsupervisor.PorterContextStatus
	switch source {
	case portercontext.StatusActive:
		modelsupervisorPorterContextStatus = modelsupervisor.PorterContextStatusActive
	case portercontext.StatusDisabled:
		modelsupervisorPorterContextStatus = modelsupervisor.PorterContextStatusDisabled
	default:
		modelsupervisorPorterContextStatus = modelsupervisor.PorterContextStatusUnspecified
	}
	return modelsupervisorPorterContextStatus
}
func ToBizPorterList(source []*ent.PorterInstance) []*modelsupervisor.PorterInstance {
	var pModelsupervisorPorterInstanceList []*modelsupervisor.PorterInstance
	if source != nil {
		pModelsupervisorPorterInstanceList = make([]*modelsupervisor.PorterInstance, len(source))
		for i := 0; i < len(source); i++ {
			pModelsupervisorPorterInstanceList[i] = ToBizPorter(source[i])
		}
	}
	return pModelsupervisorPorterInstanceList
}
func ToBizPorterStatus(source porterinstance.Status) model.UserStatus {
	var modelUserStatus model.UserStatus
	switch source {
	case porterinstance.StatusActive:
		modelUserStatus = model.UserStatusActive
	case porterinstance.StatusBlocked:
		modelUserStatus = model.UserStatusBlocked
	default:
		modelUserStatus = model.UserStatusUnspecified
	}
	return modelUserStatus
}
func ToBizSystemNotification(source *ent.SystemNotification) *modelnetzach.SystemNotification {
	var pModelnetzachSystemNotification *modelnetzach.SystemNotification
	if source != nil {
		var modelnetzachSystemNotification modelnetzach.SystemNotification
		modelnetzachSystemNotification.ID = modelInternalIDToModelInternalID((*source).ID)
		modelnetzachSystemNotification.Type = ToBizSystemNotificationType((*source).Type)
		modelnetzachSystemNotification.Level = ToBizSystemNotificationLevel((*source).Level)
		modelnetzachSystemNotification.Status = ToBizSystemNotificationStatus((*source).Status)
		modelnetzachSystemNotification.Title = (*source).Title
		modelnetzachSystemNotification.Content = (*source).Content
		modelnetzachSystemNotification.CreateTime = TimeToTime((*source).CreatedAt)
		modelnetzachSystemNotification.UpdateTime = TimeToTime((*source).UpdatedAt)
		pModelnetzachSystemNotification = &modelnetzachSystemNotification
	}
	return pModelnetzachSystemNotification
}
func ToBizSystemNotificationLevel(source systemnotification.Level) modelnetzach.SystemNotificationLevel {
	var modelnetzachSystemNotificationLevel modelnetzach.SystemNotificationLevel
	switch source {
	case systemnotification.LevelError:
		modelnetzachSystemNotificationLevel = modelnetzach.SystemNotificationLevelError
	case systemnotification.LevelInfo:
		modelnetzachSystemNotificationLevel = modelnetzach.SystemNotificationLevelInfo
	case systemnotification.LevelOngoing:
		modelnetzachSystemNotificationLevel = modelnetzach.SystemNotificationLevelOngoing
	case systemnotification.LevelWarn:
		modelnetzachSystemNotificationLevel = modelnetzach.SystemNotificationLevelWarning
	default:
		modelnetzachSystemNotificationLevel = modelnetzach.SystemNotificationLevelUnspecified
	}
	return modelnetzachSystemNotificationLevel
}
func ToBizSystemNotificationList(source []*ent.SystemNotification) []*modelnetzach.SystemNotification {
	var pModelnetzachSystemNotificationList []*modelnetzach.SystemNotification
	if source != nil {
		pModelnetzachSystemNotificationList = make([]*modelnetzach.SystemNotification, len(source))
		for i := 0; i < len(source); i++ {
			pModelnetzachSystemNotificationList[i] = ToBizSystemNotification(source[i])
		}
	}
	return pModelnetzachSystemNotificationList
}
func ToBizSystemNotificationStatus(source systemnotification.Status) modelnetzach.SystemNotificationStatus {
	var modelnetzachSystemNotificationStatus modelnetzach.SystemNotificationStatus
	switch source {
	case systemnotification.StatusDismissed:
		modelnetzachSystemNotificationStatus = modelnetzach.SystemNotificationStatusDismissed
	case systemnotification.StatusRead:
		modelnetzachSystemNotificationStatus = modelnetzach.SystemNotificationStatusRead
	case systemnotification.StatusUnread:
		modelnetzachSystemNotificationStatus = modelnetzach.SystemNotificationStatusUnread
	default:
		modelnetzachSystemNotificationStatus = modelnetzach.SystemNotificationStatusUnspecified
	}
	return modelnetzachSystemNotificationStatus
}
func ToBizSystemNotificationType(source systemnotification.Type) modelnetzach.SystemNotificationType {
	var modelnetzachSystemNotificationType modelnetzach.SystemNotificationType
	switch source {
	case systemnotification.TypeSystem:
		modelnetzachSystemNotificationType = modelnetzach.SystemNotificationTypeSystem
	case systemnotification.TypeUser:
		modelnetzachSystemNotificationType = modelnetzach.SystemNotificationTypeUser
	default:
		modelnetzachSystemNotificationType = modelnetzach.SystemNotificationTypeUnspecified
	}
	return modelnetzachSystemNotificationType
}
func ToBizSystemType(source device.SystemType) model.SystemType {
	var modelSystemType model.SystemType
	switch source {
	case device.SystemTypeAndroid:
		modelSystemType = model.SystemTypeAndroid
	case device.SystemTypeIos:
		modelSystemType = model.SystemTypeIOS
	case device.SystemTypeLinux:
		modelSystemType = model.SystemTypeLinux
	case device.SystemTypeMacos:
		modelSystemType = model.SystemTypeMacOS
	case device.SystemTypeUnknown:
		modelSystemType = model.SystemTypeUnspecified
	case device.SystemTypeWeb:
		modelSystemType = model.SystemTypeWeb
	case device.SystemTypeWindows:
		modelSystemType = model.SystemTypeWindows
	default:
		modelSystemType = model.SystemTypeUnspecified
	}
	return modelSystemType
}
func ToBizUser(source *ent.User) *model.User {
	var pModelUser *model.User
	if source != nil {
		var modelUser model.User
		modelUser.ID = modelInternalIDToModelInternalID((*source).ID)
		modelUser.Username = (*source).Username
		modelUser.Type = ToLibAuthUserType((*source).Type)
		modelUser.Status = ToBizUserStatus((*source).Status)
		pModelUser = &modelUser
	}
	return pModelUser
}
func ToBizUserList(source []*ent.User) []*model.User {
	var pModelUserList []*model.User
	if source != nil {
		pModelUserList = make([]*model.User, len(source))
		for i := 0; i < len(source); i++ {
			pModelUserList[i] = ToBizUser(source[i])
		}
	}
	return pModelUserList
}
func ToBizUserSession(source *ent.Session) *model.Session {
	var pModelSession *model.Session
	if source != nil {
		var modelSession model.Session
		modelSession.ID = modelInternalIDToModelInternalID((*source).ID)
		modelSession.UserID = modelInternalIDToModelInternalID((*source).UserID)
		modelSession.RefreshToken = (*source).RefreshToken
		modelSession.CreateAt = TimeToTime((*source).CreatedAt)
		modelSession.ExpireAt = TimeToTime((*source).ExpireAt)
		pModelSession = &modelSession
	}
	return pModelSession
}
func ToBizUserSessionList(source []*ent.Session) []*model.Session {
	var pModelSessionList []*model.Session
	if source != nil {
		pModelSessionList = make([]*model.Session, len(source))
		for i := 0; i < len(source); i++ {
			pModelSessionList[i] = ToBizUserSession(source[i])
		}
	}
	return pModelSessionList
}
func ToBizUserStatus(source user.Status) model.UserStatus {
	var modelUserStatus model.UserStatus
	switch source {
	case user.StatusActive:
		modelUserStatus = model.UserStatusActive
	case user.StatusBlocked:
		modelUserStatus = model.UserStatusBlocked
	default:
		modelUserStatus = model.UserStatusUnspecified
	}
	return modelUserStatus
}
func ToLibAuthUserType(source user.Type) model.UserType {
	var modelUserType model.UserType
	switch source {
	case user.TypeAdmin:
		modelUserType = model.UserTypeAdmin
	case user.TypeNormal:
		modelUserType = model.UserTypeNormal
	default:
		modelUserType = model.UserTypeUnspecified
	}
	return modelUserType
}
func entAppRunTimeToPModelTimeRange(source ent.AppRunTime) *model.TimeRange {
	var modelTimeRange model.TimeRange
	modelTimeRange.StartTime = TimeToTime(source.StartTime)
	modelTimeRange.Duration = time.Duration(source.Duration)
	return &modelTimeRange
}
func entPorterInstanceToPModelsupervisorPorterBinarySummary(source ent.PorterInstance) *modelsupervisor.PorterBinarySummary {
	var modelsupervisorPorterBinarySummary modelsupervisor.PorterBinarySummary
	modelsupervisorPorterBinarySummary.Name = source.Name
	modelsupervisorPorterBinarySummary.Version = source.Version
	modelsupervisorPorterBinarySummary.Description = source.Description
	modelsupervisorPorterBinarySummary.SourceCodeAddress = source.SourceCodeAddress
	modelsupervisorPorterBinarySummary.BuildVersion = source.BuildVersion
	modelsupervisorPorterBinarySummary.BuildDate = source.BuildDate
	return &modelsupervisorPorterBinarySummary
}
func modelInternalIDToModelInternalID(source model.InternalID) model.InternalID {
	return model.InternalID(source)
}
func modelInternalIDToPModelInternalID(source model.InternalID) *model.InternalID {
	pModelInternalID := modelInternalIDToModelInternalID(source)
	return &pModelInternalID
}
func pModelfeedEnclosureToPModelfeedEnclosure(source *modelfeed.Enclosure) *modelfeed.Enclosure {
	var pModelfeedEnclosure *modelfeed.Enclosure
	if source != nil {
		var modelfeedEnclosure modelfeed.Enclosure
		modelfeedEnclosure.URL = (*source).URL
		modelfeedEnclosure.Length = (*source).Length
		modelfeedEnclosure.Type = (*source).Type
		pModelfeedEnclosure = &modelfeedEnclosure
	}
	return pModelfeedEnclosure
}
func pModelfeedImageToPModelfeedImage(source *modelfeed.Image) *modelfeed.Image {
	var pModelfeedImage *modelfeed.Image
	if source != nil {
		var modelfeedImage modelfeed.Image
		modelfeedImage.URL = (*source).URL
		modelfeedImage.Title = (*source).Title
		pModelfeedImage = &modelfeedImage
	}
	return pModelfeedImage
}
func pModelfeedPersonToPModelfeedPerson(source *modelfeed.Person) *modelfeed.Person {
	var pModelfeedPerson *modelfeed.Person
	if source != nil {
		var modelfeedPerson modelfeed.Person
		modelfeedPerson.Name = (*source).Name
		modelfeedPerson.Email = (*source).Email
		pModelfeedPerson = &modelfeedPerson
	}
	return pModelfeedPerson
}
func pModelsupervisorFeatureFlagToPModelsupervisorFeatureFlag(source *modelsupervisor.FeatureFlag) *modelsupervisor.FeatureFlag {
	var pModelsupervisorFeatureFlag *modelsupervisor.FeatureFlag
	if source != nil {
		var modelsupervisorFeatureFlag modelsupervisor.FeatureFlag
		modelsupervisorFeatureFlag.ID = (*source).ID
		modelsupervisorFeatureFlag.Name = (*source).Name
		modelsupervisorFeatureFlag.Description = (*source).Description
		modelsupervisorFeatureFlag.ConfigJSONSchema = (*source).ConfigJSONSchema
		modelsupervisorFeatureFlag.RequireContext = (*source).RequireContext
		if (*source).Extra != nil {
			modelsupervisorFeatureFlag.Extra = make(map[string]string, len((*source).Extra))
			for key, value := range (*source).Extra {
				modelsupervisorFeatureFlag.Extra[key] = value
			}
		}
		pModelsupervisorFeatureFlag = &modelsupervisorFeatureFlag
	}
	return pModelsupervisorFeatureFlag
}
func pModelsupervisorFeatureRequestToPModelsupervisorFeatureRequest(source *modelsupervisor.FeatureRequest) *modelsupervisor.FeatureRequest {
	var pModelsupervisorFeatureRequest *modelsupervisor.FeatureRequest
	if source != nil {
		var modelsupervisorFeatureRequest modelsupervisor.FeatureRequest
		modelsupervisorFeatureRequest.ID = (*source).ID
		modelsupervisorFeatureRequest.Region = (*source).Region
		modelsupervisorFeatureRequest.ConfigJSON = (*source).ConfigJSON
		modelsupervisorFeatureRequest.ContextID = modelInternalIDToModelInternalID((*source).ContextID)
		pModelsupervisorFeatureRequest = &modelsupervisorFeatureRequest
	}
	return pModelsupervisorFeatureRequest
}
func pModelsupervisorPorterFeatureSummaryToPModelsupervisorPorterFeatureSummary(source *modelsupervisor.PorterFeatureSummary) *modelsupervisor.PorterFeatureSummary {
	var pModelsupervisorPorterFeatureSummary *modelsupervisor.PorterFeatureSummary
	if source != nil {
		var modelsupervisorPorterFeatureSummary modelsupervisor.PorterFeatureSummary
		if (*source).AccountPlatforms != nil {
			modelsupervisorPorterFeatureSummary.AccountPlatforms = make([]*modelsupervisor.FeatureFlag, len((*source).AccountPlatforms))
			for i := 0; i < len((*source).AccountPlatforms); i++ {
				modelsupervisorPorterFeatureSummary.AccountPlatforms[i] = pModelsupervisorFeatureFlagToPModelsupervisorFeatureFlag((*source).AccountPlatforms[i])
			}
		}
		if (*source).AppInfoSources != nil {
			modelsupervisorPorterFeatureSummary.AppInfoSources = make([]*modelsupervisor.FeatureFlag, len((*source).AppInfoSources))
			for j := 0; j < len((*source).AppInfoSources); j++ {
				modelsupervisorPorterFeatureSummary.AppInfoSources[j] = pModelsupervisorFeatureFlagToPModelsupervisorFeatureFlag((*source).AppInfoSources[j])
			}
		}
		if (*source).FeedSources != nil {
			modelsupervisorPorterFeatureSummary.FeedSources = make([]*modelsupervisor.FeatureFlag, len((*source).FeedSources))
			for k := 0; k < len((*source).FeedSources); k++ {
				modelsupervisorPorterFeatureSummary.FeedSources[k] = pModelsupervisorFeatureFlagToPModelsupervisorFeatureFlag((*source).FeedSources[k])
			}
		}
		if (*source).NotifyDestinations != nil {
			modelsupervisorPorterFeatureSummary.NotifyDestinations = make([]*modelsupervisor.FeatureFlag, len((*source).NotifyDestinations))
			for l := 0; l < len((*source).NotifyDestinations); l++ {
				modelsupervisorPorterFeatureSummary.NotifyDestinations[l] = pModelsupervisorFeatureFlagToPModelsupervisorFeatureFlag((*source).NotifyDestinations[l])
			}
		}
		if (*source).FeedItemActions != nil {
			modelsupervisorPorterFeatureSummary.FeedItemActions = make([]*modelsupervisor.FeatureFlag, len((*source).FeedItemActions))
			for m := 0; m < len((*source).FeedItemActions); m++ {
				modelsupervisorPorterFeatureSummary.FeedItemActions[m] = pModelsupervisorFeatureFlagToPModelsupervisorFeatureFlag((*source).FeedItemActions[m])
			}
		}
		if (*source).FeedGetters != nil {
			modelsupervisorPorterFeatureSummary.FeedGetters = make([]*modelsupervisor.FeatureFlag, len((*source).FeedGetters))
			for n := 0; n < len((*source).FeedGetters); n++ {
				modelsupervisorPorterFeatureSummary.FeedGetters[n] = pModelsupervisorFeatureFlagToPModelsupervisorFeatureFlag((*source).FeedGetters[n])
			}
		}
		if (*source).FeedSetters != nil {
			modelsupervisorPorterFeatureSummary.FeedSetters = make([]*modelsupervisor.FeatureFlag, len((*source).FeedSetters))
			for o := 0; o < len((*source).FeedSetters); o++ {
				modelsupervisorPorterFeatureSummary.FeedSetters[o] = pModelsupervisorFeatureFlagToPModelsupervisorFeatureFlag((*source).FeedSetters[o])
			}
		}
		pModelsupervisorPorterFeatureSummary = &modelsupervisorPorterFeatureSummary
	}
	return pModelsupervisorPorterFeatureSummary
}
func timeTimeToPTimeTime(source time.Time) *time.Time {
	timeTime := TimeToTime(source)
	return &timeTime
}
func ToEntAppInfo(source modelgebura.AppInfo) ent.AppInfo {
	var entAppInfo ent.AppInfo
	entAppInfo.ID = modelInternalIDToModelInternalID2(source.ID)
	entAppInfo.Source = source.Source
	entAppInfo.SourceAppID = source.SourceAppID
	entAppInfo.SourceURL = source.SourceURL
	entAppInfo.Name = source.Name
	entAppInfo.Type = ToEntAppInfoType(source.Type)
	entAppInfo.ShortDescription = source.ShortDescription
	entAppInfo.Description = source.Description
	entAppInfo.IconImageURL = source.IconImageURL
	entAppInfo.IconImageID = modelInternalIDToModelInternalID2(source.IconImageID)
	entAppInfo.BackgroundImageURL = source.BackgroundImageURL
	entAppInfo.BackgroundImageID = modelInternalIDToModelInternalID2(source.BackgroundImageID)
	entAppInfo.CoverImageURL = source.CoverImageURL
	entAppInfo.CoverImageID = modelInternalIDToModelInternalID2(source.CoverImageID)
	entAppInfo.ReleaseDate = source.ReleaseDate
	entAppInfo.Developer = source.Developer
	entAppInfo.Publisher = source.Publisher
	if source.Tags != nil {
		entAppInfo.Tags = make([]string, len(source.Tags))
		for i := 0; i < len(source.Tags); i++ {
			entAppInfo.Tags[i] = source.Tags[i]
		}
	}
	if source.AlternativeNames != nil {
		entAppInfo.AlternativeNames = make([]string, len(source.AlternativeNames))
		for j := 0; j < len(source.AlternativeNames); j++ {
			entAppInfo.AlternativeNames[j] = source.AlternativeNames[j]
		}
	}
	entAppInfo.RawData = source.RawData
	return entAppInfo
}
func ToEntAppInfoType(source modelgebura.AppType) appinfo.Type {
	var appinfoType appinfo.Type
	switch source {
	case modelgebura.AppTypeGame:
		appinfoType = appinfo.TypeGame
	case modelgebura.AppTypeUnspecified: // ignored
	default: // ignored
	}
	return appinfoType
}
func ToEntAppType(source modelgebura.AppType) app.Type {
	var appType app.Type
	switch source {
	case modelgebura.AppTypeGame:
		appType = app.TypeGame
	case modelgebura.AppTypeUnspecified: // ignored
	default: // ignored
	}
	return appType
}
func ToEntFeedConfigLatestPullStatus(source modelyesod.FeedConfigPullStatus) feedconfig.LatestPullStatus {
	var feedconfigLatestPullStatus feedconfig.LatestPullStatus
	switch source {
	case modelyesod.FeedConfigPullStatusFailed:
		feedconfigLatestPullStatus = feedconfig.LatestPullStatusFailed
	case modelyesod.FeedConfigPullStatusProcessing:
		feedconfigLatestPullStatus = feedconfig.LatestPullStatusProcessing
	case modelyesod.FeedConfigPullStatusSuccess:
		feedconfigLatestPullStatus = feedconfig.LatestPullStatusSuccess
	case modelyesod.FeedConfigPullStatusUnspecified: // ignored
	default: // ignored
	}
	return feedconfigLatestPullStatus
}
func ToEntFeedConfigStatus(source modelyesod.FeedConfigStatus) feedconfig.Status {
	var feedconfigStatus feedconfig.Status
	switch source {
	case modelyesod.FeedConfigStatusActive:
		feedconfigStatus = feedconfig.StatusActive
	case modelyesod.FeedConfigStatusSuspend:
		feedconfigStatus = feedconfig.StatusSuspend
	case modelyesod.FeedConfigStatusUnspecified: // ignored
	default: // ignored
	}
	return feedconfigStatus
}
func ToEntFeedConfigStatusList(source []modelyesod.FeedConfigStatus) []feedconfig.Status {
	var feedconfigStatusList []feedconfig.Status
	if source != nil {
		feedconfigStatusList = make([]feedconfig.Status, len(source))
		for i := 0; i < len(source); i++ {
			feedconfigStatusList[i] = ToEntFeedConfigStatus(source[i])
		}
	}
	return feedconfigStatusList
}
func ToEntImageStatus(source modelchesed.ImageStatus) image.Status {
	var imageStatus image.Status
	switch source {
	case modelchesed.ImageStatusScanned:
		imageStatus = image.StatusScanned
	case modelchesed.ImageStatusUnspecified: // ignored
	case modelchesed.ImageStatusUploaded:
		imageStatus = image.StatusUploaded
	default: // ignored
	}
	return imageStatus
}
func ToEntNotifySourceStatus(source modelnetzach.NotifyFlowStatus) notifyflow.Status {
	var notifyflowStatus notifyflow.Status
	switch source {
	case modelnetzach.NotifyFlowStatusActive:
		notifyflowStatus = notifyflow.StatusActive
	case modelnetzach.NotifyFlowStatusSuspend:
		notifyflowStatus = notifyflow.StatusSuspend
	case modelnetzach.NotifyFlowStatusUnspecified: // ignored
	default: // ignored
	}
	return notifyflowStatus
}
func ToEntNotifyTargetStatus(source modelnetzach.NotifyTargetStatus) notifytarget.Status {
	var notifytargetStatus notifytarget.Status
	switch source {
	case modelnetzach.NotifyTargetStatusActive:
		notifytargetStatus = notifytarget.StatusActive
	case modelnetzach.NotifyTargetStatusSuspend:
		notifytargetStatus = notifytarget.StatusSuspend
	case modelnetzach.NotifyTargetStatusUnspecified: // ignored
	default: // ignored
	}
	return notifytargetStatus
}
func ToEntNotifyTargetStatusList(source []modelnetzach.NotifyTargetStatus) []notifytarget.Status {
	var notifytargetStatusList []notifytarget.Status
	if source != nil {
		notifytargetStatusList = make([]notifytarget.Status, len(source))
		for i := 0; i < len(source); i++ {
			notifytargetStatusList[i] = ToEntNotifyTargetStatus(source[i])
		}
	}
	return notifytargetStatusList
}
func ToEntPorterContextStatus(source modelsupervisor.PorterContextStatus) portercontext.Status {
	var portercontextStatus portercontext.Status
	switch source {
	case modelsupervisor.PorterContextStatusActive:
		portercontextStatus = portercontext.StatusActive
	case modelsupervisor.PorterContextStatusDisabled:
		portercontextStatus = portercontext.StatusDisabled
	case modelsupervisor.PorterContextStatusUnspecified: // ignored
	default: // ignored
	}
	return portercontextStatus
}
func ToEntPorterInstanceStatus(source model.UserStatus) porterinstance.Status {
	var porterinstanceStatus porterinstance.Status
	switch source {
	case model.UserStatusActive:
		porterinstanceStatus = porterinstance.StatusActive
	case model.UserStatusBlocked:
		porterinstanceStatus = porterinstance.StatusBlocked
	case model.UserStatusUnspecified: // ignored
	default: // ignored
	}
	return porterinstanceStatus
}
func ToEntPorterInstanceStatusList(source []model.UserStatus) []porterinstance.Status {
	var porterinstanceStatusList []porterinstance.Status
	if source != nil {
		porterinstanceStatusList = make([]porterinstance.Status, len(source))
		for i := 0; i < len(source); i++ {
			porterinstanceStatusList[i] = ToEntPorterInstanceStatus(source[i])
		}
	}
	return porterinstanceStatusList
}
func ToEntSystemNotificationLevel(source modelnetzach.SystemNotificationLevel) systemnotification.Level {
	var systemnotificationLevel systemnotification.Level
	switch source {
	case modelnetzach.SystemNotificationLevelError:
		systemnotificationLevel = systemnotification.LevelError
	case modelnetzach.SystemNotificationLevelInfo:
		systemnotificationLevel = systemnotification.LevelInfo
	case modelnetzach.SystemNotificationLevelOngoing:
		systemnotificationLevel = systemnotification.LevelOngoing
	case modelnetzach.SystemNotificationLevelUnspecified: // ignored
	case modelnetzach.SystemNotificationLevelWarning:
		systemnotificationLevel = systemnotification.LevelWarn
	default: // ignored
	}
	return systemnotificationLevel
}
func ToEntSystemNotificationLevelList(source []modelnetzach.SystemNotificationLevel) []systemnotification.Level {
	var systemnotificationLevelList []systemnotification.Level
	if source != nil {
		systemnotificationLevelList = make([]systemnotification.Level, len(source))
		for i := 0; i < len(source); i++ {
			systemnotificationLevelList[i] = ToEntSystemNotificationLevel(source[i])
		}
	}
	return systemnotificationLevelList
}
func ToEntSystemNotificationStatus(source modelnetzach.SystemNotificationStatus) systemnotification.Status {
	var systemnotificationStatus systemnotification.Status
	switch source {
	case modelnetzach.SystemNotificationStatusDismissed:
		systemnotificationStatus = systemnotification.StatusDismissed
	case modelnetzach.SystemNotificationStatusRead:
		systemnotificationStatus = systemnotification.StatusRead
	case modelnetzach.SystemNotificationStatusUnread:
		systemnotificationStatus = systemnotification.StatusUnread
	case modelnetzach.SystemNotificationStatusUnspecified: // ignored
	default: // ignored
	}
	return systemnotificationStatus
}
func ToEntSystemNotificationStatusList(source []modelnetzach.SystemNotificationStatus) []systemnotification.Status {
	var systemnotificationStatusList []systemnotification.Status
	if source != nil {
		systemnotificationStatusList = make([]systemnotification.Status, len(source))
		for i := 0; i < len(source); i++ {
			systemnotificationStatusList[i] = ToEntSystemNotificationStatus(source[i])
		}
	}
	return systemnotificationStatusList
}
func ToEntSystemNotificationType(source modelnetzach.SystemNotificationType) systemnotification.Type {
	var systemnotificationType systemnotification.Type
	switch source {
	case modelnetzach.SystemNotificationTypeSystem:
		systemnotificationType = systemnotification.TypeSystem
	case modelnetzach.SystemNotificationTypeUnspecified: // ignored
	case modelnetzach.SystemNotificationTypeUser:
		systemnotificationType = systemnotification.TypeUser
	default: // ignored
	}
	return systemnotificationType
}
func ToEntSystemNotificationTypeList(source []modelnetzach.SystemNotificationType) []systemnotification.Type {
	var systemnotificationTypeList []systemnotification.Type
	if source != nil {
		systemnotificationTypeList = make([]systemnotification.Type, len(source))
		for i := 0; i < len(source); i++ {
			systemnotificationTypeList[i] = ToEntSystemNotificationType(source[i])
		}
	}
	return systemnotificationTypeList
}
func ToEntSystemType(source model.SystemType) device.SystemType {
	var deviceSystemType device.SystemType
	switch source {
	case model.SystemTypeAndroid:
		deviceSystemType = device.SystemTypeAndroid
	case model.SystemTypeIOS:
		deviceSystemType = device.SystemTypeIos
	case model.SystemTypeLinux:
		deviceSystemType = device.SystemTypeLinux
	case model.SystemTypeMacOS:
		deviceSystemType = device.SystemTypeMacos
	case model.SystemTypeUnspecified: // ignored
	case model.SystemTypeWeb:
		deviceSystemType = device.SystemTypeWeb
	case model.SystemTypeWindows:
		deviceSystemType = device.SystemTypeWindows
	default: // ignored
	}
	return deviceSystemType
}
func ToEntUserStatus(source model.UserStatus) user.Status {
	var userStatus user.Status
	switch source {
	case model.UserStatusActive:
		userStatus = user.StatusActive
	case model.UserStatusBlocked:
		userStatus = user.StatusBlocked
	case model.UserStatusUnspecified: // ignored
	default: // ignored
	}
	return userStatus
}
func ToEntUserStatusList(source []model.UserStatus) []user.Status {
	var userStatusList []user.Status
	if source != nil {
		userStatusList = make([]user.Status, len(source))
		for i := 0; i < len(source); i++ {
			userStatusList[i] = ToEntUserStatus(source[i])
		}
	}
	return userStatusList
}
func ToEntUserType(source model.UserType) user.Type {
	var userType user.Type
	switch source {
	case model.UserTypeAdmin:
		userType = user.TypeAdmin
	case model.UserTypeNormal:
		userType = user.TypeNormal
	case model.UserTypePorter: // ignored
	case model.UserTypeSentinel: // ignored
	case model.UserTypeUnspecified: // ignored
	default: // ignored
	}
	return userType
}
func ToEntUserTypeList(source []model.UserType) []user.Type {
	var userTypeList []user.Type
	if source != nil {
		userTypeList = make([]user.Type, len(source))
		for i := 0; i < len(source); i++ {
			userTypeList[i] = ToEntUserType(source[i])
		}
	}
	return userTypeList
}
func modelInternalIDToModelInternalID2(source model.InternalID) model.InternalID {
	return model.InternalID(source)
}
