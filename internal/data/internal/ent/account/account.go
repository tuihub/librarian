// Code generated by ent, DO NOT EDIT.

package account

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the account type in the database.
	Label = "account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldPlatformAccountID holds the string denoting the platform_account_id field in the database.
	FieldPlatformAccountID = "platform_account_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldProfileURL holds the string denoting the profile_url field in the database.
	FieldProfileURL = "profile_url"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgePurchasedApp holds the string denoting the purchased_app edge name in mutations.
	EdgePurchasedApp = "purchased_app"
	// EdgeBindUser holds the string denoting the bind_user edge name in mutations.
	EdgeBindUser = "bind_user"
	// Table holds the table name of the account in the database.
	Table = "accounts"
	// PurchasedAppTable is the table that holds the purchased_app relation/edge. The primary key declared below.
	PurchasedAppTable = "account_purchased_app"
	// PurchasedAppInverseTable is the table name for the AppInfo entity.
	// It exists in this package in order to avoid circular dependency with the "appinfo" package.
	PurchasedAppInverseTable = "app_infos"
	// BindUserTable is the table that holds the bind_user relation/edge.
	BindUserTable = "accounts"
	// BindUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BindUserInverseTable = "users"
	// BindUserColumn is the table column denoting the bind_user relation/edge.
	BindUserColumn = "user_bind_account"
)

// Columns holds all SQL columns for account fields.
var Columns = []string{
	FieldID,
	FieldPlatform,
	FieldPlatformAccountID,
	FieldName,
	FieldProfileURL,
	FieldAvatarURL,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "accounts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_bind_account",
}

var (
	// PurchasedAppPrimaryKey and PurchasedAppColumn2 are the table columns denoting the
	// primary key for the purchased_app relation (M2M).
	PurchasedAppPrimaryKey = []string{"account_id", "app_info_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Account queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByPlatformAccountID orders the results by the platform_account_id field.
func ByPlatformAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatformAccountID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByProfileURL orders the results by the profile_url field.
func ByProfileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileURL, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByPurchasedAppCount orders the results by purchased_app count.
func ByPurchasedAppCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPurchasedAppStep(), opts...)
	}
}

// ByPurchasedApp orders the results by purchased_app terms.
func ByPurchasedApp(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPurchasedAppStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBindUserField orders the results by bind_user field.
func ByBindUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBindUserStep(), sql.OrderByField(field, opts...))
	}
}
func newPurchasedAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PurchasedAppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PurchasedAppTable, PurchasedAppPrimaryKey...),
	)
}
func newBindUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BindUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BindUserTable, BindUserColumn),
	)
}
