// Code generated by ent, DO NOT EDIT.

package account

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// ID filters vertices based on their ID field.
func ID(id model.InternalID) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id model.InternalID) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id model.InternalID) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...model.InternalID) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...model.InternalID) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id model.InternalID) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id model.InternalID) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id model.InternalID) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id model.InternalID) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldID, id))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPlatform, v))
}

// PlatformAccountID applies equality check predicate on the "platform_account_id" field. It's identical to PlatformAccountIDEQ.
func PlatformAccountID(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPlatformAccountID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldName, v))
}

// ProfileURL applies equality check predicate on the "profile_url" field. It's identical to ProfileURLEQ.
func ProfileURL(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldProfileURL, v))
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAvatarURL, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldPlatform, v))
}

// PlatformAccountIDEQ applies the EQ predicate on the "platform_account_id" field.
func PlatformAccountIDEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPlatformAccountID, v))
}

// PlatformAccountIDNEQ applies the NEQ predicate on the "platform_account_id" field.
func PlatformAccountIDNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldPlatformAccountID, v))
}

// PlatformAccountIDIn applies the In predicate on the "platform_account_id" field.
func PlatformAccountIDIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldPlatformAccountID, vs...))
}

// PlatformAccountIDNotIn applies the NotIn predicate on the "platform_account_id" field.
func PlatformAccountIDNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldPlatformAccountID, vs...))
}

// PlatformAccountIDGT applies the GT predicate on the "platform_account_id" field.
func PlatformAccountIDGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldPlatformAccountID, v))
}

// PlatformAccountIDGTE applies the GTE predicate on the "platform_account_id" field.
func PlatformAccountIDGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldPlatformAccountID, v))
}

// PlatformAccountIDLT applies the LT predicate on the "platform_account_id" field.
func PlatformAccountIDLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldPlatformAccountID, v))
}

// PlatformAccountIDLTE applies the LTE predicate on the "platform_account_id" field.
func PlatformAccountIDLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldPlatformAccountID, v))
}

// PlatformAccountIDContains applies the Contains predicate on the "platform_account_id" field.
func PlatformAccountIDContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldPlatformAccountID, v))
}

// PlatformAccountIDHasPrefix applies the HasPrefix predicate on the "platform_account_id" field.
func PlatformAccountIDHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldPlatformAccountID, v))
}

// PlatformAccountIDHasSuffix applies the HasSuffix predicate on the "platform_account_id" field.
func PlatformAccountIDHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldPlatformAccountID, v))
}

// PlatformAccountIDEqualFold applies the EqualFold predicate on the "platform_account_id" field.
func PlatformAccountIDEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldPlatformAccountID, v))
}

// PlatformAccountIDContainsFold applies the ContainsFold predicate on the "platform_account_id" field.
func PlatformAccountIDContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldPlatformAccountID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldName, v))
}

// ProfileURLEQ applies the EQ predicate on the "profile_url" field.
func ProfileURLEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldProfileURL, v))
}

// ProfileURLNEQ applies the NEQ predicate on the "profile_url" field.
func ProfileURLNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldProfileURL, v))
}

// ProfileURLIn applies the In predicate on the "profile_url" field.
func ProfileURLIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldProfileURL, vs...))
}

// ProfileURLNotIn applies the NotIn predicate on the "profile_url" field.
func ProfileURLNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldProfileURL, vs...))
}

// ProfileURLGT applies the GT predicate on the "profile_url" field.
func ProfileURLGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldProfileURL, v))
}

// ProfileURLGTE applies the GTE predicate on the "profile_url" field.
func ProfileURLGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldProfileURL, v))
}

// ProfileURLLT applies the LT predicate on the "profile_url" field.
func ProfileURLLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldProfileURL, v))
}

// ProfileURLLTE applies the LTE predicate on the "profile_url" field.
func ProfileURLLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldProfileURL, v))
}

// ProfileURLContains applies the Contains predicate on the "profile_url" field.
func ProfileURLContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldProfileURL, v))
}

// ProfileURLHasPrefix applies the HasPrefix predicate on the "profile_url" field.
func ProfileURLHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldProfileURL, v))
}

// ProfileURLHasSuffix applies the HasSuffix predicate on the "profile_url" field.
func ProfileURLHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldProfileURL, v))
}

// ProfileURLEqualFold applies the EqualFold predicate on the "profile_url" field.
func ProfileURLEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldProfileURL, v))
}

// ProfileURLContainsFold applies the ContainsFold predicate on the "profile_url" field.
func ProfileURLContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldProfileURL, v))
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAvatarURL, v))
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldAvatarURL, v))
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldAvatarURL, vs...))
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldAvatarURL, vs...))
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldAvatarURL, v))
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldAvatarURL, v))
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldAvatarURL, v))
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldAvatarURL, v))
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldAvatarURL, v))
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldAvatarURL, v))
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldAvatarURL, v))
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldAvatarURL, v))
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldAvatarURL, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldCreatedAt, v))
}

// HasPurchasedApp applies the HasEdge predicate on the "purchased_app" edge.
func HasPurchasedApp() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PurchasedAppTable, PurchasedAppPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPurchasedAppWith applies the HasEdge predicate on the "purchased_app" edge with a given conditions (other predicates).
func HasPurchasedAppWith(preds ...predicate.AppInfo) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newPurchasedAppStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBindUser applies the HasEdge predicate on the "bind_user" edge.
func HasBindUser() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BindUserTable, BindUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBindUserWith applies the HasEdge predicate on the "bind_user" edge with a given conditions (other predicates).
func HasBindUserWith(preds ...predicate.User) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newBindUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(sql.NotPredicates(p))
}
