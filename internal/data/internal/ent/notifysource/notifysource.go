// Code generated by ent, DO NOT EDIT.

package notifysource

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notifysource type in the database.
	Label = "notify_source"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFeedConfigID holds the string denoting the feed_config_id field in the database.
	FieldFeedConfigID = "feed_config_id"
	// FieldFeedItemCollectionID holds the string denoting the feed_item_collection_id field in the database.
	FieldFeedItemCollectionID = "feed_item_collection_id"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeNotifyFlow holds the string denoting the notify_flow edge name in mutations.
	EdgeNotifyFlow = "notify_flow"
	// EdgeFeedConfig holds the string denoting the feed_config edge name in mutations.
	EdgeFeedConfig = "feed_config"
	// EdgeFeedItemCollection holds the string denoting the feed_item_collection edge name in mutations.
	EdgeFeedItemCollection = "feed_item_collection"
	// EdgeNotifyFlowSource holds the string denoting the notify_flow_source edge name in mutations.
	EdgeNotifyFlowSource = "notify_flow_source"
	// Table holds the table name of the notifysource in the database.
	Table = "notify_sources"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "notify_sources"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_notify_source"
	// NotifyFlowTable is the table that holds the notify_flow relation/edge. The primary key declared below.
	NotifyFlowTable = "notify_flow_sources"
	// NotifyFlowInverseTable is the table name for the NotifyFlow entity.
	// It exists in this package in order to avoid circular dependency with the "notifyflow" package.
	NotifyFlowInverseTable = "notify_flows"
	// FeedConfigTable is the table that holds the feed_config relation/edge.
	FeedConfigTable = "notify_sources"
	// FeedConfigInverseTable is the table name for the FeedConfig entity.
	// It exists in this package in order to avoid circular dependency with the "feedconfig" package.
	FeedConfigInverseTable = "feed_configs"
	// FeedConfigColumn is the table column denoting the feed_config relation/edge.
	FeedConfigColumn = "feed_config_id"
	// FeedItemCollectionTable is the table that holds the feed_item_collection relation/edge.
	FeedItemCollectionTable = "notify_sources"
	// FeedItemCollectionInverseTable is the table name for the FeedItemCollection entity.
	// It exists in this package in order to avoid circular dependency with the "feeditemcollection" package.
	FeedItemCollectionInverseTable = "feed_item_collections"
	// FeedItemCollectionColumn is the table column denoting the feed_item_collection relation/edge.
	FeedItemCollectionColumn = "feed_item_collection_id"
	// NotifyFlowSourceTable is the table that holds the notify_flow_source relation/edge.
	NotifyFlowSourceTable = "notify_flow_sources"
	// NotifyFlowSourceInverseTable is the table name for the NotifyFlowSource entity.
	// It exists in this package in order to avoid circular dependency with the "notifyflowsource" package.
	NotifyFlowSourceInverseTable = "notify_flow_sources"
	// NotifyFlowSourceColumn is the table column denoting the notify_flow_source relation/edge.
	NotifyFlowSourceColumn = "notify_source_id"
)

// Columns holds all SQL columns for notifysource fields.
var Columns = []string{
	FieldID,
	FieldFeedConfigID,
	FieldFeedItemCollectionID,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "notify_sources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_notify_source",
}

var (
	// NotifyFlowPrimaryKey and NotifyFlowColumn2 are the table columns denoting the
	// primary key for the notify_flow relation (M2M).
	NotifyFlowPrimaryKey = []string{"notify_flow_id", "notify_source_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the NotifySource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFeedConfigID orders the results by the feed_config_id field.
func ByFeedConfigID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeedConfigID, opts...).ToFunc()
}

// ByFeedItemCollectionID orders the results by the feed_item_collection_id field.
func ByFeedItemCollectionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeedItemCollectionID, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotifyFlowCount orders the results by notify_flow count.
func ByNotifyFlowCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotifyFlowStep(), opts...)
	}
}

// ByNotifyFlow orders the results by notify_flow terms.
func ByNotifyFlow(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifyFlowStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeedConfigField orders the results by feed_config field.
func ByFeedConfigField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedConfigStep(), sql.OrderByField(field, opts...))
	}
}

// ByFeedItemCollectionField orders the results by feed_item_collection field.
func ByFeedItemCollectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedItemCollectionStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotifyFlowSourceCount orders the results by notify_flow_source count.
func ByNotifyFlowSourceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotifyFlowSourceStep(), opts...)
	}
}

// ByNotifyFlowSource orders the results by notify_flow_source terms.
func ByNotifyFlowSource(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifyFlowSourceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newNotifyFlowStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotifyFlowInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NotifyFlowTable, NotifyFlowPrimaryKey...),
	)
}
func newFeedConfigStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedConfigInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FeedConfigTable, FeedConfigColumn),
	)
}
func newFeedItemCollectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedItemCollectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FeedItemCollectionTable, FeedItemCollectionColumn),
	)
}
func newNotifyFlowSourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotifyFlowSourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, NotifyFlowSourceTable, NotifyFlowSourceColumn),
	)
}
