// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedactionset"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfigaction"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// FeedConfigActionQuery is the builder for querying FeedConfigAction entities.
type FeedConfigActionQuery struct {
	config
	ctx               *QueryContext
	order             []feedconfigaction.OrderOption
	inters            []Interceptor
	predicates        []predicate.FeedConfigAction
	withFeedConfig    *FeedConfigQuery
	withFeedActionSet *FeedActionSetQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FeedConfigActionQuery builder.
func (fcaq *FeedConfigActionQuery) Where(ps ...predicate.FeedConfigAction) *FeedConfigActionQuery {
	fcaq.predicates = append(fcaq.predicates, ps...)
	return fcaq
}

// Limit the number of records to be returned by this query.
func (fcaq *FeedConfigActionQuery) Limit(limit int) *FeedConfigActionQuery {
	fcaq.ctx.Limit = &limit
	return fcaq
}

// Offset to start from.
func (fcaq *FeedConfigActionQuery) Offset(offset int) *FeedConfigActionQuery {
	fcaq.ctx.Offset = &offset
	return fcaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fcaq *FeedConfigActionQuery) Unique(unique bool) *FeedConfigActionQuery {
	fcaq.ctx.Unique = &unique
	return fcaq
}

// Order specifies how the records should be ordered.
func (fcaq *FeedConfigActionQuery) Order(o ...feedconfigaction.OrderOption) *FeedConfigActionQuery {
	fcaq.order = append(fcaq.order, o...)
	return fcaq
}

// QueryFeedConfig chains the current query on the "feed_config" edge.
func (fcaq *FeedConfigActionQuery) QueryFeedConfig() *FeedConfigQuery {
	query := (&FeedConfigClient{config: fcaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fcaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fcaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfigaction.Table, feedconfigaction.FieldID, selector),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedconfigaction.FeedConfigTable, feedconfigaction.FeedConfigColumn),
		)
		fromU = sqlgraph.SetNeighbors(fcaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeedActionSet chains the current query on the "feed_action_set" edge.
func (fcaq *FeedConfigActionQuery) QueryFeedActionSet() *FeedActionSetQuery {
	query := (&FeedActionSetClient{config: fcaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fcaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fcaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfigaction.Table, feedconfigaction.FieldID, selector),
			sqlgraph.To(feedactionset.Table, feedactionset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedconfigaction.FeedActionSetTable, feedconfigaction.FeedActionSetColumn),
		)
		fromU = sqlgraph.SetNeighbors(fcaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FeedConfigAction entity from the query.
// Returns a *NotFoundError when no FeedConfigAction was found.
func (fcaq *FeedConfigActionQuery) First(ctx context.Context) (*FeedConfigAction, error) {
	nodes, err := fcaq.Limit(1).All(setContextOp(ctx, fcaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{feedconfigaction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fcaq *FeedConfigActionQuery) FirstX(ctx context.Context) *FeedConfigAction {
	node, err := fcaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FeedConfigAction ID from the query.
// Returns a *NotFoundError when no FeedConfigAction ID was found.
func (fcaq *FeedConfigActionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fcaq.Limit(1).IDs(setContextOp(ctx, fcaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{feedconfigaction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fcaq *FeedConfigActionQuery) FirstIDX(ctx context.Context) int {
	id, err := fcaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FeedConfigAction entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FeedConfigAction entity is found.
// Returns a *NotFoundError when no FeedConfigAction entities are found.
func (fcaq *FeedConfigActionQuery) Only(ctx context.Context) (*FeedConfigAction, error) {
	nodes, err := fcaq.Limit(2).All(setContextOp(ctx, fcaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{feedconfigaction.Label}
	default:
		return nil, &NotSingularError{feedconfigaction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fcaq *FeedConfigActionQuery) OnlyX(ctx context.Context) *FeedConfigAction {
	node, err := fcaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FeedConfigAction ID in the query.
// Returns a *NotSingularError when more than one FeedConfigAction ID is found.
// Returns a *NotFoundError when no entities are found.
func (fcaq *FeedConfigActionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fcaq.Limit(2).IDs(setContextOp(ctx, fcaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{feedconfigaction.Label}
	default:
		err = &NotSingularError{feedconfigaction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fcaq *FeedConfigActionQuery) OnlyIDX(ctx context.Context) int {
	id, err := fcaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FeedConfigActions.
func (fcaq *FeedConfigActionQuery) All(ctx context.Context) ([]*FeedConfigAction, error) {
	ctx = setContextOp(ctx, fcaq.ctx, ent.OpQueryAll)
	if err := fcaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FeedConfigAction, *FeedConfigActionQuery]()
	return withInterceptors[[]*FeedConfigAction](ctx, fcaq, qr, fcaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fcaq *FeedConfigActionQuery) AllX(ctx context.Context) []*FeedConfigAction {
	nodes, err := fcaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FeedConfigAction IDs.
func (fcaq *FeedConfigActionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if fcaq.ctx.Unique == nil && fcaq.path != nil {
		fcaq.Unique(true)
	}
	ctx = setContextOp(ctx, fcaq.ctx, ent.OpQueryIDs)
	if err = fcaq.Select(feedconfigaction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fcaq *FeedConfigActionQuery) IDsX(ctx context.Context) []int {
	ids, err := fcaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fcaq *FeedConfigActionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fcaq.ctx, ent.OpQueryCount)
	if err := fcaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fcaq, querierCount[*FeedConfigActionQuery](), fcaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fcaq *FeedConfigActionQuery) CountX(ctx context.Context) int {
	count, err := fcaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fcaq *FeedConfigActionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fcaq.ctx, ent.OpQueryExist)
	switch _, err := fcaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fcaq *FeedConfigActionQuery) ExistX(ctx context.Context) bool {
	exist, err := fcaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FeedConfigActionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fcaq *FeedConfigActionQuery) Clone() *FeedConfigActionQuery {
	if fcaq == nil {
		return nil
	}
	return &FeedConfigActionQuery{
		config:            fcaq.config,
		ctx:               fcaq.ctx.Clone(),
		order:             append([]feedconfigaction.OrderOption{}, fcaq.order...),
		inters:            append([]Interceptor{}, fcaq.inters...),
		predicates:        append([]predicate.FeedConfigAction{}, fcaq.predicates...),
		withFeedConfig:    fcaq.withFeedConfig.Clone(),
		withFeedActionSet: fcaq.withFeedActionSet.Clone(),
		// clone intermediate query.
		sql:  fcaq.sql.Clone(),
		path: fcaq.path,
	}
}

// WithFeedConfig tells the query-builder to eager-load the nodes that are connected to
// the "feed_config" edge. The optional arguments are used to configure the query builder of the edge.
func (fcaq *FeedConfigActionQuery) WithFeedConfig(opts ...func(*FeedConfigQuery)) *FeedConfigActionQuery {
	query := (&FeedConfigClient{config: fcaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fcaq.withFeedConfig = query
	return fcaq
}

// WithFeedActionSet tells the query-builder to eager-load the nodes that are connected to
// the "feed_action_set" edge. The optional arguments are used to configure the query builder of the edge.
func (fcaq *FeedConfigActionQuery) WithFeedActionSet(opts ...func(*FeedActionSetQuery)) *FeedConfigActionQuery {
	query := (&FeedActionSetClient{config: fcaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fcaq.withFeedActionSet = query
	return fcaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FeedConfigID model.InternalID `json:"feed_config_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FeedConfigAction.Query().
//		GroupBy(feedconfigaction.FieldFeedConfigID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fcaq *FeedConfigActionQuery) GroupBy(field string, fields ...string) *FeedConfigActionGroupBy {
	fcaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FeedConfigActionGroupBy{build: fcaq}
	grbuild.flds = &fcaq.ctx.Fields
	grbuild.label = feedconfigaction.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		FeedConfigID model.InternalID `json:"feed_config_id,omitempty"`
//	}
//
//	client.FeedConfigAction.Query().
//		Select(feedconfigaction.FieldFeedConfigID).
//		Scan(ctx, &v)
func (fcaq *FeedConfigActionQuery) Select(fields ...string) *FeedConfigActionSelect {
	fcaq.ctx.Fields = append(fcaq.ctx.Fields, fields...)
	sbuild := &FeedConfigActionSelect{FeedConfigActionQuery: fcaq}
	sbuild.label = feedconfigaction.Label
	sbuild.flds, sbuild.scan = &fcaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FeedConfigActionSelect configured with the given aggregations.
func (fcaq *FeedConfigActionQuery) Aggregate(fns ...AggregateFunc) *FeedConfigActionSelect {
	return fcaq.Select().Aggregate(fns...)
}

func (fcaq *FeedConfigActionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fcaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fcaq); err != nil {
				return err
			}
		}
	}
	for _, f := range fcaq.ctx.Fields {
		if !feedconfigaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fcaq.path != nil {
		prev, err := fcaq.path(ctx)
		if err != nil {
			return err
		}
		fcaq.sql = prev
	}
	return nil
}

func (fcaq *FeedConfigActionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FeedConfigAction, error) {
	var (
		nodes       = []*FeedConfigAction{}
		_spec       = fcaq.querySpec()
		loadedTypes = [2]bool{
			fcaq.withFeedConfig != nil,
			fcaq.withFeedActionSet != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FeedConfigAction).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FeedConfigAction{config: fcaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fcaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fcaq.withFeedConfig; query != nil {
		if err := fcaq.loadFeedConfig(ctx, query, nodes, nil,
			func(n *FeedConfigAction, e *FeedConfig) { n.Edges.FeedConfig = e }); err != nil {
			return nil, err
		}
	}
	if query := fcaq.withFeedActionSet; query != nil {
		if err := fcaq.loadFeedActionSet(ctx, query, nodes, nil,
			func(n *FeedConfigAction, e *FeedActionSet) { n.Edges.FeedActionSet = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fcaq *FeedConfigActionQuery) loadFeedConfig(ctx context.Context, query *FeedConfigQuery, nodes []*FeedConfigAction, init func(*FeedConfigAction), assign func(*FeedConfigAction, *FeedConfig)) error {
	ids := make([]model.InternalID, 0, len(nodes))
	nodeids := make(map[model.InternalID][]*FeedConfigAction)
	for i := range nodes {
		fk := nodes[i].FeedConfigID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(feedconfig.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "feed_config_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fcaq *FeedConfigActionQuery) loadFeedActionSet(ctx context.Context, query *FeedActionSetQuery, nodes []*FeedConfigAction, init func(*FeedConfigAction), assign func(*FeedConfigAction, *FeedActionSet)) error {
	ids := make([]model.InternalID, 0, len(nodes))
	nodeids := make(map[model.InternalID][]*FeedConfigAction)
	for i := range nodes {
		fk := nodes[i].FeedActionSetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(feedactionset.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "feed_action_set_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (fcaq *FeedConfigActionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fcaq.querySpec()
	_spec.Node.Columns = fcaq.ctx.Fields
	if len(fcaq.ctx.Fields) > 0 {
		_spec.Unique = fcaq.ctx.Unique != nil && *fcaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fcaq.driver, _spec)
}

func (fcaq *FeedConfigActionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(feedconfigaction.Table, feedconfigaction.Columns, sqlgraph.NewFieldSpec(feedconfigaction.FieldID, field.TypeInt))
	_spec.From = fcaq.sql
	if unique := fcaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fcaq.path != nil {
		_spec.Unique = true
	}
	if fields := fcaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedconfigaction.FieldID)
		for i := range fields {
			if fields[i] != feedconfigaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if fcaq.withFeedConfig != nil {
			_spec.Node.AddColumnOnce(feedconfigaction.FieldFeedConfigID)
		}
		if fcaq.withFeedActionSet != nil {
			_spec.Node.AddColumnOnce(feedconfigaction.FieldFeedActionSetID)
		}
	}
	if ps := fcaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fcaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fcaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fcaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fcaq *FeedConfigActionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fcaq.driver.Dialect())
	t1 := builder.Table(feedconfigaction.Table)
	columns := fcaq.ctx.Fields
	if len(columns) == 0 {
		columns = feedconfigaction.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fcaq.sql != nil {
		selector = fcaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fcaq.ctx.Unique != nil && *fcaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fcaq.predicates {
		p(selector)
	}
	for _, p := range fcaq.order {
		p(selector)
	}
	if offset := fcaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fcaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FeedConfigActionGroupBy is the group-by builder for FeedConfigAction entities.
type FeedConfigActionGroupBy struct {
	selector
	build *FeedConfigActionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fcagb *FeedConfigActionGroupBy) Aggregate(fns ...AggregateFunc) *FeedConfigActionGroupBy {
	fcagb.fns = append(fcagb.fns, fns...)
	return fcagb
}

// Scan applies the selector query and scans the result into the given value.
func (fcagb *FeedConfigActionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fcagb.build.ctx, ent.OpQueryGroupBy)
	if err := fcagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeedConfigActionQuery, *FeedConfigActionGroupBy](ctx, fcagb.build, fcagb, fcagb.build.inters, v)
}

func (fcagb *FeedConfigActionGroupBy) sqlScan(ctx context.Context, root *FeedConfigActionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fcagb.fns))
	for _, fn := range fcagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fcagb.flds)+len(fcagb.fns))
		for _, f := range *fcagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fcagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fcagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FeedConfigActionSelect is the builder for selecting fields of FeedConfigAction entities.
type FeedConfigActionSelect struct {
	*FeedConfigActionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fcas *FeedConfigActionSelect) Aggregate(fns ...AggregateFunc) *FeedConfigActionSelect {
	fcas.fns = append(fcas.fns, fns...)
	return fcas
}

// Scan applies the selector query and scans the result into the given value.
func (fcas *FeedConfigActionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fcas.ctx, ent.OpQuerySelect)
	if err := fcas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeedConfigActionQuery, *FeedConfigActionSelect](ctx, fcas.FeedConfigActionQuery, fcas, fcas.inters, v)
}

func (fcas *FeedConfigActionSelect) sqlScan(ctx context.Context, root *FeedConfigActionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fcas.fns))
	for _, fn := range fcas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fcas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fcas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
