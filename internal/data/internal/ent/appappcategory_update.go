// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/internal/data/internal/ent/appappcategory"
	"github.com/tuihub/librarian/internal/data/internal/ent/appcategory"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// AppAppCategoryUpdate is the builder for updating AppAppCategory entities.
type AppAppCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *AppAppCategoryMutation
}

// Where appends a list predicates to the AppAppCategoryUpdate builder.
func (aacu *AppAppCategoryUpdate) Where(ps ...predicate.AppAppCategory) *AppAppCategoryUpdate {
	aacu.mutation.Where(ps...)
	return aacu
}

// SetAppCategoryID sets the "app_category_id" field.
func (aacu *AppAppCategoryUpdate) SetAppCategoryID(mi model.InternalID) *AppAppCategoryUpdate {
	aacu.mutation.SetAppCategoryID(mi)
	return aacu
}

// SetNillableAppCategoryID sets the "app_category_id" field if the given value is not nil.
func (aacu *AppAppCategoryUpdate) SetNillableAppCategoryID(mi *model.InternalID) *AppAppCategoryUpdate {
	if mi != nil {
		aacu.SetAppCategoryID(*mi)
	}
	return aacu
}

// SetAppID sets the "app_id" field.
func (aacu *AppAppCategoryUpdate) SetAppID(mi model.InternalID) *AppAppCategoryUpdate {
	aacu.mutation.SetAppID(mi)
	return aacu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aacu *AppAppCategoryUpdate) SetNillableAppID(mi *model.InternalID) *AppAppCategoryUpdate {
	if mi != nil {
		aacu.SetAppID(*mi)
	}
	return aacu
}

// SetAppCategory sets the "app_category" edge to the AppCategory entity.
func (aacu *AppAppCategoryUpdate) SetAppCategory(a *AppCategory) *AppAppCategoryUpdate {
	return aacu.SetAppCategoryID(a.ID)
}

// SetApp sets the "app" edge to the App entity.
func (aacu *AppAppCategoryUpdate) SetApp(a *App) *AppAppCategoryUpdate {
	return aacu.SetAppID(a.ID)
}

// Mutation returns the AppAppCategoryMutation object of the builder.
func (aacu *AppAppCategoryUpdate) Mutation() *AppAppCategoryMutation {
	return aacu.mutation
}

// ClearAppCategory clears the "app_category" edge to the AppCategory entity.
func (aacu *AppAppCategoryUpdate) ClearAppCategory() *AppAppCategoryUpdate {
	aacu.mutation.ClearAppCategory()
	return aacu
}

// ClearApp clears the "app" edge to the App entity.
func (aacu *AppAppCategoryUpdate) ClearApp() *AppAppCategoryUpdate {
	aacu.mutation.ClearApp()
	return aacu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aacu *AppAppCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aacu.sqlSave, aacu.mutation, aacu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aacu *AppAppCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := aacu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aacu *AppAppCategoryUpdate) Exec(ctx context.Context) error {
	_, err := aacu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacu *AppAppCategoryUpdate) ExecX(ctx context.Context) {
	if err := aacu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aacu *AppAppCategoryUpdate) check() error {
	if aacu.mutation.AppCategoryCleared() && len(aacu.mutation.AppCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppAppCategory.app_category"`)
	}
	if aacu.mutation.AppCleared() && len(aacu.mutation.AppIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppAppCategory.app"`)
	}
	return nil
}

func (aacu *AppAppCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aacu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appappcategory.Table, appappcategory.Columns, sqlgraph.NewFieldSpec(appappcategory.FieldID, field.TypeInt))
	if ps := aacu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aacu.mutation.AppCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appappcategory.AppCategoryTable,
			Columns: []string{appappcategory.AppCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcategory.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aacu.mutation.AppCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appappcategory.AppCategoryTable,
			Columns: []string{appappcategory.AppCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcategory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aacu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appappcategory.AppTable,
			Columns: []string{appappcategory.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aacu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appappcategory.AppTable,
			Columns: []string{appappcategory.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aacu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appappcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aacu.mutation.done = true
	return n, nil
}

// AppAppCategoryUpdateOne is the builder for updating a single AppAppCategory entity.
type AppAppCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppAppCategoryMutation
}

// SetAppCategoryID sets the "app_category_id" field.
func (aacuo *AppAppCategoryUpdateOne) SetAppCategoryID(mi model.InternalID) *AppAppCategoryUpdateOne {
	aacuo.mutation.SetAppCategoryID(mi)
	return aacuo
}

// SetNillableAppCategoryID sets the "app_category_id" field if the given value is not nil.
func (aacuo *AppAppCategoryUpdateOne) SetNillableAppCategoryID(mi *model.InternalID) *AppAppCategoryUpdateOne {
	if mi != nil {
		aacuo.SetAppCategoryID(*mi)
	}
	return aacuo
}

// SetAppID sets the "app_id" field.
func (aacuo *AppAppCategoryUpdateOne) SetAppID(mi model.InternalID) *AppAppCategoryUpdateOne {
	aacuo.mutation.SetAppID(mi)
	return aacuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aacuo *AppAppCategoryUpdateOne) SetNillableAppID(mi *model.InternalID) *AppAppCategoryUpdateOne {
	if mi != nil {
		aacuo.SetAppID(*mi)
	}
	return aacuo
}

// SetAppCategory sets the "app_category" edge to the AppCategory entity.
func (aacuo *AppAppCategoryUpdateOne) SetAppCategory(a *AppCategory) *AppAppCategoryUpdateOne {
	return aacuo.SetAppCategoryID(a.ID)
}

// SetApp sets the "app" edge to the App entity.
func (aacuo *AppAppCategoryUpdateOne) SetApp(a *App) *AppAppCategoryUpdateOne {
	return aacuo.SetAppID(a.ID)
}

// Mutation returns the AppAppCategoryMutation object of the builder.
func (aacuo *AppAppCategoryUpdateOne) Mutation() *AppAppCategoryMutation {
	return aacuo.mutation
}

// ClearAppCategory clears the "app_category" edge to the AppCategory entity.
func (aacuo *AppAppCategoryUpdateOne) ClearAppCategory() *AppAppCategoryUpdateOne {
	aacuo.mutation.ClearAppCategory()
	return aacuo
}

// ClearApp clears the "app" edge to the App entity.
func (aacuo *AppAppCategoryUpdateOne) ClearApp() *AppAppCategoryUpdateOne {
	aacuo.mutation.ClearApp()
	return aacuo
}

// Where appends a list predicates to the AppAppCategoryUpdate builder.
func (aacuo *AppAppCategoryUpdateOne) Where(ps ...predicate.AppAppCategory) *AppAppCategoryUpdateOne {
	aacuo.mutation.Where(ps...)
	return aacuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aacuo *AppAppCategoryUpdateOne) Select(field string, fields ...string) *AppAppCategoryUpdateOne {
	aacuo.fields = append([]string{field}, fields...)
	return aacuo
}

// Save executes the query and returns the updated AppAppCategory entity.
func (aacuo *AppAppCategoryUpdateOne) Save(ctx context.Context) (*AppAppCategory, error) {
	return withHooks(ctx, aacuo.sqlSave, aacuo.mutation, aacuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aacuo *AppAppCategoryUpdateOne) SaveX(ctx context.Context) *AppAppCategory {
	node, err := aacuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aacuo *AppAppCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := aacuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacuo *AppAppCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := aacuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aacuo *AppAppCategoryUpdateOne) check() error {
	if aacuo.mutation.AppCategoryCleared() && len(aacuo.mutation.AppCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppAppCategory.app_category"`)
	}
	if aacuo.mutation.AppCleared() && len(aacuo.mutation.AppIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppAppCategory.app"`)
	}
	return nil
}

func (aacuo *AppAppCategoryUpdateOne) sqlSave(ctx context.Context) (_node *AppAppCategory, err error) {
	if err := aacuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appappcategory.Table, appappcategory.Columns, sqlgraph.NewFieldSpec(appappcategory.FieldID, field.TypeInt))
	id, ok := aacuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppAppCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aacuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appappcategory.FieldID)
		for _, f := range fields {
			if !appappcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appappcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aacuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aacuo.mutation.AppCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appappcategory.AppCategoryTable,
			Columns: []string{appappcategory.AppCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcategory.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aacuo.mutation.AppCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appappcategory.AppCategoryTable,
			Columns: []string{appappcategory.AppCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcategory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aacuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appappcategory.AppTable,
			Columns: []string{appappcategory.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aacuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appappcategory.AppTable,
			Columns: []string{appappcategory.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppAppCategory{config: aacuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aacuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appappcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aacuo.mutation.done = true
	return _node, nil
}
