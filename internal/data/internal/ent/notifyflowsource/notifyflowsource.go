// Code generated by ent, DO NOT EDIT.

package notifyflowsource

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notifyflowsource type in the database.
	Label = "notify_flow_source"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNotifyFlowID holds the string denoting the notify_flow_id field in the database.
	FieldNotifyFlowID = "notify_flow_id"
	// FieldNotifySourceID holds the string denoting the notify_source_id field in the database.
	FieldNotifySourceID = "notify_source_id"
	// FieldFilterIncludeKeywords holds the string denoting the filter_include_keywords field in the database.
	FieldFilterIncludeKeywords = "filter_include_keywords"
	// FieldFilterExcludeKeywords holds the string denoting the filter_exclude_keywords field in the database.
	FieldFilterExcludeKeywords = "filter_exclude_keywords"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeNotifyFlow holds the string denoting the notify_flow edge name in mutations.
	EdgeNotifyFlow = "notify_flow"
	// EdgeNotifySource holds the string denoting the notify_source edge name in mutations.
	EdgeNotifySource = "notify_source"
	// Table holds the table name of the notifyflowsource in the database.
	Table = "notify_flow_sources"
	// NotifyFlowTable is the table that holds the notify_flow relation/edge.
	NotifyFlowTable = "notify_flow_sources"
	// NotifyFlowInverseTable is the table name for the NotifyFlow entity.
	// It exists in this package in order to avoid circular dependency with the "notifyflow" package.
	NotifyFlowInverseTable = "notify_flows"
	// NotifyFlowColumn is the table column denoting the notify_flow relation/edge.
	NotifyFlowColumn = "notify_flow_id"
	// NotifySourceTable is the table that holds the notify_source relation/edge.
	NotifySourceTable = "notify_flow_sources"
	// NotifySourceInverseTable is the table name for the NotifySource entity.
	// It exists in this package in order to avoid circular dependency with the "notifysource" package.
	NotifySourceInverseTable = "notify_sources"
	// NotifySourceColumn is the table column denoting the notify_source relation/edge.
	NotifySourceColumn = "notify_source_id"
)

// Columns holds all SQL columns for notifyflowsource fields.
var Columns = []string{
	FieldID,
	FieldNotifyFlowID,
	FieldNotifySourceID,
	FieldFilterIncludeKeywords,
	FieldFilterExcludeKeywords,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the NotifyFlowSource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNotifyFlowID orders the results by the notify_flow_id field.
func ByNotifyFlowID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyFlowID, opts...).ToFunc()
}

// ByNotifySourceID orders the results by the notify_source_id field.
func ByNotifySourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifySourceID, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByNotifyFlowField orders the results by notify_flow field.
func ByNotifyFlowField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifyFlowStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotifySourceField orders the results by notify_source field.
func ByNotifySourceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifySourceStep(), sql.OrderByField(field, opts...))
	}
}
func newNotifyFlowStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotifyFlowInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NotifyFlowTable, NotifyFlowColumn),
	)
}
func newNotifySourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotifySourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NotifySourceTable, NotifySourceColumn),
	)
}
