// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/tuihub/librarian/internal/data/internal/ent/migrate"
	"github.com/tuihub/librarian/internal/model"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tuihub/librarian/internal/data/internal/ent/account"
	"github.com/tuihub/librarian/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/internal/data/internal/ent/appbinary"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinfo"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinst"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinstruntime"
	"github.com/tuihub/librarian/internal/data/internal/ent/deviceinfo"
	"github.com/tuihub/librarian/internal/data/internal/ent/feed"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedactionset"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfigaction"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditem"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditemcollection"
	"github.com/tuihub/librarian/internal/data/internal/ent/file"
	"github.com/tuihub/librarian/internal/data/internal/ent/image"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflow"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflowsource"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflowtarget"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifysource"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifytarget"
	"github.com/tuihub/librarian/internal/data/internal/ent/portercontext"
	"github.com/tuihub/librarian/internal/data/internal/ent/porterinstance"
	"github.com/tuihub/librarian/internal/data/internal/ent/systemnotification"
	"github.com/tuihub/librarian/internal/data/internal/ent/tag"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/data/internal/ent/userdevice"
	"github.com/tuihub/librarian/internal/data/internal/ent/usersession"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// App is the client for interacting with the App builders.
	App *AppClient
	// AppBinary is the client for interacting with the AppBinary builders.
	AppBinary *AppBinaryClient
	// AppInfo is the client for interacting with the AppInfo builders.
	AppInfo *AppInfoClient
	// AppInst is the client for interacting with the AppInst builders.
	AppInst *AppInstClient
	// AppInstRunTime is the client for interacting with the AppInstRunTime builders.
	AppInstRunTime *AppInstRunTimeClient
	// DeviceInfo is the client for interacting with the DeviceInfo builders.
	DeviceInfo *DeviceInfoClient
	// Feed is the client for interacting with the Feed builders.
	Feed *FeedClient
	// FeedActionSet is the client for interacting with the FeedActionSet builders.
	FeedActionSet *FeedActionSetClient
	// FeedConfig is the client for interacting with the FeedConfig builders.
	FeedConfig *FeedConfigClient
	// FeedConfigAction is the client for interacting with the FeedConfigAction builders.
	FeedConfigAction *FeedConfigActionClient
	// FeedItem is the client for interacting with the FeedItem builders.
	FeedItem *FeedItemClient
	// FeedItemCollection is the client for interacting with the FeedItemCollection builders.
	FeedItemCollection *FeedItemCollectionClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// Image is the client for interacting with the Image builders.
	Image *ImageClient
	// NotifyFlow is the client for interacting with the NotifyFlow builders.
	NotifyFlow *NotifyFlowClient
	// NotifyFlowSource is the client for interacting with the NotifyFlowSource builders.
	NotifyFlowSource *NotifyFlowSourceClient
	// NotifyFlowTarget is the client for interacting with the NotifyFlowTarget builders.
	NotifyFlowTarget *NotifyFlowTargetClient
	// NotifySource is the client for interacting with the NotifySource builders.
	NotifySource *NotifySourceClient
	// NotifyTarget is the client for interacting with the NotifyTarget builders.
	NotifyTarget *NotifyTargetClient
	// PorterContext is the client for interacting with the PorterContext builders.
	PorterContext *PorterContextClient
	// PorterInstance is the client for interacting with the PorterInstance builders.
	PorterInstance *PorterInstanceClient
	// SystemNotification is the client for interacting with the SystemNotification builders.
	SystemNotification *SystemNotificationClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserDevice is the client for interacting with the UserDevice builders.
	UserDevice *UserDeviceClient
	// UserSession is the client for interacting with the UserSession builders.
	UserSession *UserSessionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Account = NewAccountClient(c.config)
	c.App = NewAppClient(c.config)
	c.AppBinary = NewAppBinaryClient(c.config)
	c.AppInfo = NewAppInfoClient(c.config)
	c.AppInst = NewAppInstClient(c.config)
	c.AppInstRunTime = NewAppInstRunTimeClient(c.config)
	c.DeviceInfo = NewDeviceInfoClient(c.config)
	c.Feed = NewFeedClient(c.config)
	c.FeedActionSet = NewFeedActionSetClient(c.config)
	c.FeedConfig = NewFeedConfigClient(c.config)
	c.FeedConfigAction = NewFeedConfigActionClient(c.config)
	c.FeedItem = NewFeedItemClient(c.config)
	c.FeedItemCollection = NewFeedItemCollectionClient(c.config)
	c.File = NewFileClient(c.config)
	c.Image = NewImageClient(c.config)
	c.NotifyFlow = NewNotifyFlowClient(c.config)
	c.NotifyFlowSource = NewNotifyFlowSourceClient(c.config)
	c.NotifyFlowTarget = NewNotifyFlowTargetClient(c.config)
	c.NotifySource = NewNotifySourceClient(c.config)
	c.NotifyTarget = NewNotifyTargetClient(c.config)
	c.PorterContext = NewPorterContextClient(c.config)
	c.PorterInstance = NewPorterInstanceClient(c.config)
	c.SystemNotification = NewSystemNotificationClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserDevice = NewUserDeviceClient(c.config)
	c.UserSession = NewUserSessionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Account:            NewAccountClient(cfg),
		App:                NewAppClient(cfg),
		AppBinary:          NewAppBinaryClient(cfg),
		AppInfo:            NewAppInfoClient(cfg),
		AppInst:            NewAppInstClient(cfg),
		AppInstRunTime:     NewAppInstRunTimeClient(cfg),
		DeviceInfo:         NewDeviceInfoClient(cfg),
		Feed:               NewFeedClient(cfg),
		FeedActionSet:      NewFeedActionSetClient(cfg),
		FeedConfig:         NewFeedConfigClient(cfg),
		FeedConfigAction:   NewFeedConfigActionClient(cfg),
		FeedItem:           NewFeedItemClient(cfg),
		FeedItemCollection: NewFeedItemCollectionClient(cfg),
		File:               NewFileClient(cfg),
		Image:              NewImageClient(cfg),
		NotifyFlow:         NewNotifyFlowClient(cfg),
		NotifyFlowSource:   NewNotifyFlowSourceClient(cfg),
		NotifyFlowTarget:   NewNotifyFlowTargetClient(cfg),
		NotifySource:       NewNotifySourceClient(cfg),
		NotifyTarget:       NewNotifyTargetClient(cfg),
		PorterContext:      NewPorterContextClient(cfg),
		PorterInstance:     NewPorterInstanceClient(cfg),
		SystemNotification: NewSystemNotificationClient(cfg),
		Tag:                NewTagClient(cfg),
		User:               NewUserClient(cfg),
		UserDevice:         NewUserDeviceClient(cfg),
		UserSession:        NewUserSessionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Account:            NewAccountClient(cfg),
		App:                NewAppClient(cfg),
		AppBinary:          NewAppBinaryClient(cfg),
		AppInfo:            NewAppInfoClient(cfg),
		AppInst:            NewAppInstClient(cfg),
		AppInstRunTime:     NewAppInstRunTimeClient(cfg),
		DeviceInfo:         NewDeviceInfoClient(cfg),
		Feed:               NewFeedClient(cfg),
		FeedActionSet:      NewFeedActionSetClient(cfg),
		FeedConfig:         NewFeedConfigClient(cfg),
		FeedConfigAction:   NewFeedConfigActionClient(cfg),
		FeedItem:           NewFeedItemClient(cfg),
		FeedItemCollection: NewFeedItemCollectionClient(cfg),
		File:               NewFileClient(cfg),
		Image:              NewImageClient(cfg),
		NotifyFlow:         NewNotifyFlowClient(cfg),
		NotifyFlowSource:   NewNotifyFlowSourceClient(cfg),
		NotifyFlowTarget:   NewNotifyFlowTargetClient(cfg),
		NotifySource:       NewNotifySourceClient(cfg),
		NotifyTarget:       NewNotifyTargetClient(cfg),
		PorterContext:      NewPorterContextClient(cfg),
		PorterInstance:     NewPorterInstanceClient(cfg),
		SystemNotification: NewSystemNotificationClient(cfg),
		Tag:                NewTagClient(cfg),
		User:               NewUserClient(cfg),
		UserDevice:         NewUserDeviceClient(cfg),
		UserSession:        NewUserSessionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Account.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Account, c.App, c.AppBinary, c.AppInfo, c.AppInst, c.AppInstRunTime,
		c.DeviceInfo, c.Feed, c.FeedActionSet, c.FeedConfig, c.FeedConfigAction,
		c.FeedItem, c.FeedItemCollection, c.File, c.Image, c.NotifyFlow,
		c.NotifyFlowSource, c.NotifyFlowTarget, c.NotifySource, c.NotifyTarget,
		c.PorterContext, c.PorterInstance, c.SystemNotification, c.Tag, c.User,
		c.UserDevice, c.UserSession,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Account, c.App, c.AppBinary, c.AppInfo, c.AppInst, c.AppInstRunTime,
		c.DeviceInfo, c.Feed, c.FeedActionSet, c.FeedConfig, c.FeedConfigAction,
		c.FeedItem, c.FeedItemCollection, c.File, c.Image, c.NotifyFlow,
		c.NotifyFlowSource, c.NotifyFlowTarget, c.NotifySource, c.NotifyTarget,
		c.PorterContext, c.PorterInstance, c.SystemNotification, c.Tag, c.User,
		c.UserDevice, c.UserSession,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccountMutation:
		return c.Account.mutate(ctx, m)
	case *AppMutation:
		return c.App.mutate(ctx, m)
	case *AppBinaryMutation:
		return c.AppBinary.mutate(ctx, m)
	case *AppInfoMutation:
		return c.AppInfo.mutate(ctx, m)
	case *AppInstMutation:
		return c.AppInst.mutate(ctx, m)
	case *AppInstRunTimeMutation:
		return c.AppInstRunTime.mutate(ctx, m)
	case *DeviceInfoMutation:
		return c.DeviceInfo.mutate(ctx, m)
	case *FeedMutation:
		return c.Feed.mutate(ctx, m)
	case *FeedActionSetMutation:
		return c.FeedActionSet.mutate(ctx, m)
	case *FeedConfigMutation:
		return c.FeedConfig.mutate(ctx, m)
	case *FeedConfigActionMutation:
		return c.FeedConfigAction.mutate(ctx, m)
	case *FeedItemMutation:
		return c.FeedItem.mutate(ctx, m)
	case *FeedItemCollectionMutation:
		return c.FeedItemCollection.mutate(ctx, m)
	case *FileMutation:
		return c.File.mutate(ctx, m)
	case *ImageMutation:
		return c.Image.mutate(ctx, m)
	case *NotifyFlowMutation:
		return c.NotifyFlow.mutate(ctx, m)
	case *NotifyFlowSourceMutation:
		return c.NotifyFlowSource.mutate(ctx, m)
	case *NotifyFlowTargetMutation:
		return c.NotifyFlowTarget.mutate(ctx, m)
	case *NotifySourceMutation:
		return c.NotifySource.mutate(ctx, m)
	case *NotifyTargetMutation:
		return c.NotifyTarget.mutate(ctx, m)
	case *PorterContextMutation:
		return c.PorterContext.mutate(ctx, m)
	case *PorterInstanceMutation:
		return c.PorterInstance.mutate(ctx, m)
	case *SystemNotificationMutation:
		return c.SystemNotification.mutate(ctx, m)
	case *TagMutation:
		return c.Tag.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserDeviceMutation:
		return c.UserDevice.mutate(ctx, m)
	case *UserSessionMutation:
		return c.UserSession.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccountClient is a client for the Account schema.
type AccountClient struct {
	config
}

// NewAccountClient returns a client for the Account from the given config.
func NewAccountClient(c config) *AccountClient {
	return &AccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `account.Hooks(f(g(h())))`.
func (c *AccountClient) Use(hooks ...Hook) {
	c.hooks.Account = append(c.hooks.Account, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `account.Intercept(f(g(h())))`.
func (c *AccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.Account = append(c.inters.Account, interceptors...)
}

// Create returns a builder for creating a Account entity.
func (c *AccountClient) Create() *AccountCreate {
	mutation := newAccountMutation(c.config, OpCreate)
	return &AccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Account entities.
func (c *AccountClient) CreateBulk(builders ...*AccountCreate) *AccountCreateBulk {
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccountClient) MapCreateBulk(slice any, setFunc func(*AccountCreate, int)) *AccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccountCreateBulk{err: fmt.Errorf("calling to AccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Account.
func (c *AccountClient) Update() *AccountUpdate {
	mutation := newAccountMutation(c.config, OpUpdate)
	return &AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountClient) UpdateOne(a *Account) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccount(a))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountClient) UpdateOneID(id model.InternalID) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccountID(id))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Account.
func (c *AccountClient) Delete() *AccountDelete {
	mutation := newAccountMutation(c.config, OpDelete)
	return &AccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountClient) DeleteOne(a *Account) *AccountDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountClient) DeleteOneID(id model.InternalID) *AccountDeleteOne {
	builder := c.Delete().Where(account.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDeleteOne{builder}
}

// Query returns a query builder for Account.
func (c *AccountClient) Query() *AccountQuery {
	return &AccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a Account entity by its id.
func (c *AccountClient) Get(ctx context.Context, id model.InternalID) (*Account, error) {
	return c.Query().Where(account.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountClient) GetX(ctx context.Context, id model.InternalID) *Account {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPurchasedApp queries the purchased_app edge of a Account.
func (c *AccountClient) QueryPurchasedApp(a *Account) *AppInfoQuery {
	query := (&AppInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(appinfo.Table, appinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, account.PurchasedAppTable, account.PurchasedAppPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBindUser queries the bind_user edge of a Account.
func (c *AccountClient) QueryBindUser(a *Account) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, account.BindUserTable, account.BindUserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountClient) Hooks() []Hook {
	return c.hooks.Account
}

// Interceptors returns the client interceptors.
func (c *AccountClient) Interceptors() []Interceptor {
	return c.inters.Account
}

func (c *AccountClient) mutate(ctx context.Context, m *AccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Account mutation op: %q", m.Op())
	}
}

// AppClient is a client for the App schema.
type AppClient struct {
	config
}

// NewAppClient returns a client for the App from the given config.
func NewAppClient(c config) *AppClient {
	return &AppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `app.Hooks(f(g(h())))`.
func (c *AppClient) Use(hooks ...Hook) {
	c.hooks.App = append(c.hooks.App, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `app.Intercept(f(g(h())))`.
func (c *AppClient) Intercept(interceptors ...Interceptor) {
	c.inters.App = append(c.inters.App, interceptors...)
}

// Create returns a builder for creating a App entity.
func (c *AppClient) Create() *AppCreate {
	mutation := newAppMutation(c.config, OpCreate)
	return &AppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of App entities.
func (c *AppClient) CreateBulk(builders ...*AppCreate) *AppCreateBulk {
	return &AppCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppClient) MapCreateBulk(slice any, setFunc func(*AppCreate, int)) *AppCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppCreateBulk{err: fmt.Errorf("calling to AppClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for App.
func (c *AppClient) Update() *AppUpdate {
	mutation := newAppMutation(c.config, OpUpdate)
	return &AppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppClient) UpdateOne(a *App) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withApp(a))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppClient) UpdateOneID(id model.InternalID) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withAppID(id))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for App.
func (c *AppClient) Delete() *AppDelete {
	mutation := newAppMutation(c.config, OpDelete)
	return &AppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppClient) DeleteOne(a *App) *AppDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppClient) DeleteOneID(id model.InternalID) *AppDeleteOne {
	builder := c.Delete().Where(app.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDeleteOne{builder}
}

// Query returns a query builder for App.
func (c *AppClient) Query() *AppQuery {
	return &AppQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApp},
		inters: c.Interceptors(),
	}
}

// Get returns a App entity by its id.
func (c *AppClient) Get(ctx context.Context, id model.InternalID) (*App, error) {
	return c.Query().Where(app.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppClient) GetX(ctx context.Context, id model.InternalID) *App {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a App.
func (c *AppClient) QueryOwner(a *App) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, app.OwnerTable, app.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppInfo queries the app_info edge of a App.
func (c *AppClient) QueryAppInfo(a *App) *AppInfoQuery {
	query := (&AppInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(appinfo.Table, appinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, app.AppInfoTable, app.AppInfoColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppClient) Hooks() []Hook {
	return c.hooks.App
}

// Interceptors returns the client interceptors.
func (c *AppClient) Interceptors() []Interceptor {
	return c.inters.App
}

func (c *AppClient) mutate(ctx context.Context, m *AppMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown App mutation op: %q", m.Op())
	}
}

// AppBinaryClient is a client for the AppBinary schema.
type AppBinaryClient struct {
	config
}

// NewAppBinaryClient returns a client for the AppBinary from the given config.
func NewAppBinaryClient(c config) *AppBinaryClient {
	return &AppBinaryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appbinary.Hooks(f(g(h())))`.
func (c *AppBinaryClient) Use(hooks ...Hook) {
	c.hooks.AppBinary = append(c.hooks.AppBinary, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appbinary.Intercept(f(g(h())))`.
func (c *AppBinaryClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppBinary = append(c.inters.AppBinary, interceptors...)
}

// Create returns a builder for creating a AppBinary entity.
func (c *AppBinaryClient) Create() *AppBinaryCreate {
	mutation := newAppBinaryMutation(c.config, OpCreate)
	return &AppBinaryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppBinary entities.
func (c *AppBinaryClient) CreateBulk(builders ...*AppBinaryCreate) *AppBinaryCreateBulk {
	return &AppBinaryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppBinaryClient) MapCreateBulk(slice any, setFunc func(*AppBinaryCreate, int)) *AppBinaryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppBinaryCreateBulk{err: fmt.Errorf("calling to AppBinaryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppBinaryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppBinaryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppBinary.
func (c *AppBinaryClient) Update() *AppBinaryUpdate {
	mutation := newAppBinaryMutation(c.config, OpUpdate)
	return &AppBinaryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppBinaryClient) UpdateOne(ab *AppBinary) *AppBinaryUpdateOne {
	mutation := newAppBinaryMutation(c.config, OpUpdateOne, withAppBinary(ab))
	return &AppBinaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppBinaryClient) UpdateOneID(id model.InternalID) *AppBinaryUpdateOne {
	mutation := newAppBinaryMutation(c.config, OpUpdateOne, withAppBinaryID(id))
	return &AppBinaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppBinary.
func (c *AppBinaryClient) Delete() *AppBinaryDelete {
	mutation := newAppBinaryMutation(c.config, OpDelete)
	return &AppBinaryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppBinaryClient) DeleteOne(ab *AppBinary) *AppBinaryDeleteOne {
	return c.DeleteOneID(ab.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppBinaryClient) DeleteOneID(id model.InternalID) *AppBinaryDeleteOne {
	builder := c.Delete().Where(appbinary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppBinaryDeleteOne{builder}
}

// Query returns a query builder for AppBinary.
func (c *AppBinaryClient) Query() *AppBinaryQuery {
	return &AppBinaryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppBinary},
		inters: c.Interceptors(),
	}
}

// Get returns a AppBinary entity by its id.
func (c *AppBinaryClient) Get(ctx context.Context, id model.InternalID) (*AppBinary, error) {
	return c.Query().Where(appbinary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppBinaryClient) GetX(ctx context.Context, id model.InternalID) *AppBinary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppInfo queries the app_info edge of a AppBinary.
func (c *AppBinaryClient) QueryAppInfo(ab *AppBinary) *AppInfoQuery {
	query := (&AppInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appbinary.Table, appbinary.FieldID, id),
			sqlgraph.To(appinfo.Table, appinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appbinary.AppInfoTable, appbinary.AppInfoColumn),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppBinaryClient) Hooks() []Hook {
	return c.hooks.AppBinary
}

// Interceptors returns the client interceptors.
func (c *AppBinaryClient) Interceptors() []Interceptor {
	return c.inters.AppBinary
}

func (c *AppBinaryClient) mutate(ctx context.Context, m *AppBinaryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppBinaryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppBinaryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppBinaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppBinaryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppBinary mutation op: %q", m.Op())
	}
}

// AppInfoClient is a client for the AppInfo schema.
type AppInfoClient struct {
	config
}

// NewAppInfoClient returns a client for the AppInfo from the given config.
func NewAppInfoClient(c config) *AppInfoClient {
	return &AppInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appinfo.Hooks(f(g(h())))`.
func (c *AppInfoClient) Use(hooks ...Hook) {
	c.hooks.AppInfo = append(c.hooks.AppInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appinfo.Intercept(f(g(h())))`.
func (c *AppInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppInfo = append(c.inters.AppInfo, interceptors...)
}

// Create returns a builder for creating a AppInfo entity.
func (c *AppInfoClient) Create() *AppInfoCreate {
	mutation := newAppInfoMutation(c.config, OpCreate)
	return &AppInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppInfo entities.
func (c *AppInfoClient) CreateBulk(builders ...*AppInfoCreate) *AppInfoCreateBulk {
	return &AppInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppInfoClient) MapCreateBulk(slice any, setFunc func(*AppInfoCreate, int)) *AppInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppInfoCreateBulk{err: fmt.Errorf("calling to AppInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppInfo.
func (c *AppInfoClient) Update() *AppInfoUpdate {
	mutation := newAppInfoMutation(c.config, OpUpdate)
	return &AppInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppInfoClient) UpdateOne(ai *AppInfo) *AppInfoUpdateOne {
	mutation := newAppInfoMutation(c.config, OpUpdateOne, withAppInfo(ai))
	return &AppInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppInfoClient) UpdateOneID(id model.InternalID) *AppInfoUpdateOne {
	mutation := newAppInfoMutation(c.config, OpUpdateOne, withAppInfoID(id))
	return &AppInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppInfo.
func (c *AppInfoClient) Delete() *AppInfoDelete {
	mutation := newAppInfoMutation(c.config, OpDelete)
	return &AppInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppInfoClient) DeleteOne(ai *AppInfo) *AppInfoDeleteOne {
	return c.DeleteOneID(ai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppInfoClient) DeleteOneID(id model.InternalID) *AppInfoDeleteOne {
	builder := c.Delete().Where(appinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppInfoDeleteOne{builder}
}

// Query returns a query builder for AppInfo.
func (c *AppInfoClient) Query() *AppInfoQuery {
	return &AppInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a AppInfo entity by its id.
func (c *AppInfoClient) Get(ctx context.Context, id model.InternalID) (*AppInfo, error) {
	return c.Query().Where(appinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppInfoClient) GetX(ctx context.Context, id model.InternalID) *AppInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPurchasedByAccount queries the purchased_by_account edge of a AppInfo.
func (c *AppInfoClient) QueryPurchasedByAccount(ai *AppInfo) *AccountQuery {
	query := (&AccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appinfo.Table, appinfo.FieldID, id),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, appinfo.PurchasedByAccountTable, appinfo.PurchasedByAccountPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPurchasedByUser queries the purchased_by_user edge of a AppInfo.
func (c *AppInfoClient) QueryPurchasedByUser(ai *AppInfo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appinfo.Table, appinfo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, appinfo.PurchasedByUserTable, appinfo.PurchasedByUserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApp queries the app edge of a AppInfo.
func (c *AppInfoClient) QueryApp(ai *AppInfo) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appinfo.Table, appinfo.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appinfo.AppTable, appinfo.AppColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppBinary queries the app_binary edge of a AppInfo.
func (c *AppInfoClient) QueryAppBinary(ai *AppInfo) *AppBinaryQuery {
	query := (&AppBinaryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appinfo.Table, appinfo.FieldID, id),
			sqlgraph.To(appbinary.Table, appbinary.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appinfo.AppBinaryTable, appinfo.AppBinaryColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBindInternal queries the bind_internal edge of a AppInfo.
func (c *AppInfoClient) QueryBindInternal(ai *AppInfo) *AppInfoQuery {
	query := (&AppInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appinfo.Table, appinfo.FieldID, id),
			sqlgraph.To(appinfo.Table, appinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appinfo.BindInternalTable, appinfo.BindInternalColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBindExternal queries the bind_external edge of a AppInfo.
func (c *AppInfoClient) QueryBindExternal(ai *AppInfo) *AppInfoQuery {
	query := (&AppInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appinfo.Table, appinfo.FieldID, id),
			sqlgraph.To(appinfo.Table, appinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appinfo.BindExternalTable, appinfo.BindExternalColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppInfoClient) Hooks() []Hook {
	return c.hooks.AppInfo
}

// Interceptors returns the client interceptors.
func (c *AppInfoClient) Interceptors() []Interceptor {
	return c.inters.AppInfo
}

func (c *AppInfoClient) mutate(ctx context.Context, m *AppInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppInfo mutation op: %q", m.Op())
	}
}

// AppInstClient is a client for the AppInst schema.
type AppInstClient struct {
	config
}

// NewAppInstClient returns a client for the AppInst from the given config.
func NewAppInstClient(c config) *AppInstClient {
	return &AppInstClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appinst.Hooks(f(g(h())))`.
func (c *AppInstClient) Use(hooks ...Hook) {
	c.hooks.AppInst = append(c.hooks.AppInst, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appinst.Intercept(f(g(h())))`.
func (c *AppInstClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppInst = append(c.inters.AppInst, interceptors...)
}

// Create returns a builder for creating a AppInst entity.
func (c *AppInstClient) Create() *AppInstCreate {
	mutation := newAppInstMutation(c.config, OpCreate)
	return &AppInstCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppInst entities.
func (c *AppInstClient) CreateBulk(builders ...*AppInstCreate) *AppInstCreateBulk {
	return &AppInstCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppInstClient) MapCreateBulk(slice any, setFunc func(*AppInstCreate, int)) *AppInstCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppInstCreateBulk{err: fmt.Errorf("calling to AppInstClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppInstCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppInstCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppInst.
func (c *AppInstClient) Update() *AppInstUpdate {
	mutation := newAppInstMutation(c.config, OpUpdate)
	return &AppInstUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppInstClient) UpdateOne(ai *AppInst) *AppInstUpdateOne {
	mutation := newAppInstMutation(c.config, OpUpdateOne, withAppInst(ai))
	return &AppInstUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppInstClient) UpdateOneID(id model.InternalID) *AppInstUpdateOne {
	mutation := newAppInstMutation(c.config, OpUpdateOne, withAppInstID(id))
	return &AppInstUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppInst.
func (c *AppInstClient) Delete() *AppInstDelete {
	mutation := newAppInstMutation(c.config, OpDelete)
	return &AppInstDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppInstClient) DeleteOne(ai *AppInst) *AppInstDeleteOne {
	return c.DeleteOneID(ai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppInstClient) DeleteOneID(id model.InternalID) *AppInstDeleteOne {
	builder := c.Delete().Where(appinst.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppInstDeleteOne{builder}
}

// Query returns a query builder for AppInst.
func (c *AppInstClient) Query() *AppInstQuery {
	return &AppInstQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppInst},
		inters: c.Interceptors(),
	}
}

// Get returns a AppInst entity by its id.
func (c *AppInstClient) Get(ctx context.Context, id model.InternalID) (*AppInst, error) {
	return c.Query().Where(appinst.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppInstClient) GetX(ctx context.Context, id model.InternalID) *AppInst {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a AppInst.
func (c *AppInstClient) QueryOwner(ai *AppInst) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appinst.Table, appinst.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appinst.OwnerTable, appinst.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppInstClient) Hooks() []Hook {
	return c.hooks.AppInst
}

// Interceptors returns the client interceptors.
func (c *AppInstClient) Interceptors() []Interceptor {
	return c.inters.AppInst
}

func (c *AppInstClient) mutate(ctx context.Context, m *AppInstMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppInstCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppInstUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppInstUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppInstDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppInst mutation op: %q", m.Op())
	}
}

// AppInstRunTimeClient is a client for the AppInstRunTime schema.
type AppInstRunTimeClient struct {
	config
}

// NewAppInstRunTimeClient returns a client for the AppInstRunTime from the given config.
func NewAppInstRunTimeClient(c config) *AppInstRunTimeClient {
	return &AppInstRunTimeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appinstruntime.Hooks(f(g(h())))`.
func (c *AppInstRunTimeClient) Use(hooks ...Hook) {
	c.hooks.AppInstRunTime = append(c.hooks.AppInstRunTime, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appinstruntime.Intercept(f(g(h())))`.
func (c *AppInstRunTimeClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppInstRunTime = append(c.inters.AppInstRunTime, interceptors...)
}

// Create returns a builder for creating a AppInstRunTime entity.
func (c *AppInstRunTimeClient) Create() *AppInstRunTimeCreate {
	mutation := newAppInstRunTimeMutation(c.config, OpCreate)
	return &AppInstRunTimeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppInstRunTime entities.
func (c *AppInstRunTimeClient) CreateBulk(builders ...*AppInstRunTimeCreate) *AppInstRunTimeCreateBulk {
	return &AppInstRunTimeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppInstRunTimeClient) MapCreateBulk(slice any, setFunc func(*AppInstRunTimeCreate, int)) *AppInstRunTimeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppInstRunTimeCreateBulk{err: fmt.Errorf("calling to AppInstRunTimeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppInstRunTimeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppInstRunTimeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppInstRunTime.
func (c *AppInstRunTimeClient) Update() *AppInstRunTimeUpdate {
	mutation := newAppInstRunTimeMutation(c.config, OpUpdate)
	return &AppInstRunTimeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppInstRunTimeClient) UpdateOne(airt *AppInstRunTime) *AppInstRunTimeUpdateOne {
	mutation := newAppInstRunTimeMutation(c.config, OpUpdateOne, withAppInstRunTime(airt))
	return &AppInstRunTimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppInstRunTimeClient) UpdateOneID(id int) *AppInstRunTimeUpdateOne {
	mutation := newAppInstRunTimeMutation(c.config, OpUpdateOne, withAppInstRunTimeID(id))
	return &AppInstRunTimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppInstRunTime.
func (c *AppInstRunTimeClient) Delete() *AppInstRunTimeDelete {
	mutation := newAppInstRunTimeMutation(c.config, OpDelete)
	return &AppInstRunTimeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppInstRunTimeClient) DeleteOne(airt *AppInstRunTime) *AppInstRunTimeDeleteOne {
	return c.DeleteOneID(airt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppInstRunTimeClient) DeleteOneID(id int) *AppInstRunTimeDeleteOne {
	builder := c.Delete().Where(appinstruntime.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppInstRunTimeDeleteOne{builder}
}

// Query returns a query builder for AppInstRunTime.
func (c *AppInstRunTimeClient) Query() *AppInstRunTimeQuery {
	return &AppInstRunTimeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppInstRunTime},
		inters: c.Interceptors(),
	}
}

// Get returns a AppInstRunTime entity by its id.
func (c *AppInstRunTimeClient) Get(ctx context.Context, id int) (*AppInstRunTime, error) {
	return c.Query().Where(appinstruntime.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppInstRunTimeClient) GetX(ctx context.Context, id int) *AppInstRunTime {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppInstRunTimeClient) Hooks() []Hook {
	return c.hooks.AppInstRunTime
}

// Interceptors returns the client interceptors.
func (c *AppInstRunTimeClient) Interceptors() []Interceptor {
	return c.inters.AppInstRunTime
}

func (c *AppInstRunTimeClient) mutate(ctx context.Context, m *AppInstRunTimeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppInstRunTimeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppInstRunTimeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppInstRunTimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppInstRunTimeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppInstRunTime mutation op: %q", m.Op())
	}
}

// DeviceInfoClient is a client for the DeviceInfo schema.
type DeviceInfoClient struct {
	config
}

// NewDeviceInfoClient returns a client for the DeviceInfo from the given config.
func NewDeviceInfoClient(c config) *DeviceInfoClient {
	return &DeviceInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deviceinfo.Hooks(f(g(h())))`.
func (c *DeviceInfoClient) Use(hooks ...Hook) {
	c.hooks.DeviceInfo = append(c.hooks.DeviceInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deviceinfo.Intercept(f(g(h())))`.
func (c *DeviceInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeviceInfo = append(c.inters.DeviceInfo, interceptors...)
}

// Create returns a builder for creating a DeviceInfo entity.
func (c *DeviceInfoClient) Create() *DeviceInfoCreate {
	mutation := newDeviceInfoMutation(c.config, OpCreate)
	return &DeviceInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeviceInfo entities.
func (c *DeviceInfoClient) CreateBulk(builders ...*DeviceInfoCreate) *DeviceInfoCreateBulk {
	return &DeviceInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeviceInfoClient) MapCreateBulk(slice any, setFunc func(*DeviceInfoCreate, int)) *DeviceInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeviceInfoCreateBulk{err: fmt.Errorf("calling to DeviceInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeviceInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeviceInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeviceInfo.
func (c *DeviceInfoClient) Update() *DeviceInfoUpdate {
	mutation := newDeviceInfoMutation(c.config, OpUpdate)
	return &DeviceInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceInfoClient) UpdateOne(di *DeviceInfo) *DeviceInfoUpdateOne {
	mutation := newDeviceInfoMutation(c.config, OpUpdateOne, withDeviceInfo(di))
	return &DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceInfoClient) UpdateOneID(id model.InternalID) *DeviceInfoUpdateOne {
	mutation := newDeviceInfoMutation(c.config, OpUpdateOne, withDeviceInfoID(id))
	return &DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeviceInfo.
func (c *DeviceInfoClient) Delete() *DeviceInfoDelete {
	mutation := newDeviceInfoMutation(c.config, OpDelete)
	return &DeviceInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceInfoClient) DeleteOne(di *DeviceInfo) *DeviceInfoDeleteOne {
	return c.DeleteOneID(di.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeviceInfoClient) DeleteOneID(id model.InternalID) *DeviceInfoDeleteOne {
	builder := c.Delete().Where(deviceinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceInfoDeleteOne{builder}
}

// Query returns a query builder for DeviceInfo.
func (c *DeviceInfoClient) Query() *DeviceInfoQuery {
	return &DeviceInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeviceInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a DeviceInfo entity by its id.
func (c *DeviceInfoClient) Get(ctx context.Context, id model.InternalID) (*DeviceInfo, error) {
	return c.Query().Where(deviceinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceInfoClient) GetX(ctx context.Context, id model.InternalID) *DeviceInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a DeviceInfo.
func (c *DeviceInfoClient) QueryUser(di *DeviceInfo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinfo.Table, deviceinfo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, deviceinfo.UserTable, deviceinfo.UserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserSession queries the user_session edge of a DeviceInfo.
func (c *DeviceInfoClient) QueryUserSession(di *DeviceInfo) *UserSessionQuery {
	query := (&UserSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinfo.Table, deviceinfo.FieldID, id),
			sqlgraph.To(usersession.Table, usersession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deviceinfo.UserSessionTable, deviceinfo.UserSessionColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserDevice queries the user_device edge of a DeviceInfo.
func (c *DeviceInfoClient) QueryUserDevice(di *DeviceInfo) *UserDeviceQuery {
	query := (&UserDeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceinfo.Table, deviceinfo.FieldID, id),
			sqlgraph.To(userdevice.Table, userdevice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, deviceinfo.UserDeviceTable, deviceinfo.UserDeviceColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceInfoClient) Hooks() []Hook {
	return c.hooks.DeviceInfo
}

// Interceptors returns the client interceptors.
func (c *DeviceInfoClient) Interceptors() []Interceptor {
	return c.inters.DeviceInfo
}

func (c *DeviceInfoClient) mutate(ctx context.Context, m *DeviceInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeviceInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeviceInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeviceInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeviceInfo mutation op: %q", m.Op())
	}
}

// FeedClient is a client for the Feed schema.
type FeedClient struct {
	config
}

// NewFeedClient returns a client for the Feed from the given config.
func NewFeedClient(c config) *FeedClient {
	return &FeedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feed.Hooks(f(g(h())))`.
func (c *FeedClient) Use(hooks ...Hook) {
	c.hooks.Feed = append(c.hooks.Feed, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feed.Intercept(f(g(h())))`.
func (c *FeedClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feed = append(c.inters.Feed, interceptors...)
}

// Create returns a builder for creating a Feed entity.
func (c *FeedClient) Create() *FeedCreate {
	mutation := newFeedMutation(c.config, OpCreate)
	return &FeedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feed entities.
func (c *FeedClient) CreateBulk(builders ...*FeedCreate) *FeedCreateBulk {
	return &FeedCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedClient) MapCreateBulk(slice any, setFunc func(*FeedCreate, int)) *FeedCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedCreateBulk{err: fmt.Errorf("calling to FeedClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feed.
func (c *FeedClient) Update() *FeedUpdate {
	mutation := newFeedMutation(c.config, OpUpdate)
	return &FeedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedClient) UpdateOne(f *Feed) *FeedUpdateOne {
	mutation := newFeedMutation(c.config, OpUpdateOne, withFeed(f))
	return &FeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedClient) UpdateOneID(id model.InternalID) *FeedUpdateOne {
	mutation := newFeedMutation(c.config, OpUpdateOne, withFeedID(id))
	return &FeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feed.
func (c *FeedClient) Delete() *FeedDelete {
	mutation := newFeedMutation(c.config, OpDelete)
	return &FeedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedClient) DeleteOne(f *Feed) *FeedDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedClient) DeleteOneID(id model.InternalID) *FeedDeleteOne {
	builder := c.Delete().Where(feed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedDeleteOne{builder}
}

// Query returns a query builder for Feed.
func (c *FeedClient) Query() *FeedQuery {
	return &FeedQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeed},
		inters: c.Interceptors(),
	}
}

// Get returns a Feed entity by its id.
func (c *FeedClient) Get(ctx context.Context, id model.InternalID) (*Feed, error) {
	return c.Query().Where(feed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedClient) GetX(ctx context.Context, id model.InternalID) *Feed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItem queries the item edge of a Feed.
func (c *FeedClient) QueryItem(f *Feed) *FeedItemQuery {
	query := (&FeedItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feed.Table, feed.FieldID, id),
			sqlgraph.To(feeditem.Table, feeditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feed.ItemTable, feed.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConfig queries the config edge of a Feed.
func (c *FeedClient) QueryConfig(f *Feed) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feed.Table, feed.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, feed.ConfigTable, feed.ConfigColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedClient) Hooks() []Hook {
	return c.hooks.Feed
}

// Interceptors returns the client interceptors.
func (c *FeedClient) Interceptors() []Interceptor {
	return c.inters.Feed
}

func (c *FeedClient) mutate(ctx context.Context, m *FeedMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Feed mutation op: %q", m.Op())
	}
}

// FeedActionSetClient is a client for the FeedActionSet schema.
type FeedActionSetClient struct {
	config
}

// NewFeedActionSetClient returns a client for the FeedActionSet from the given config.
func NewFeedActionSetClient(c config) *FeedActionSetClient {
	return &FeedActionSetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedactionset.Hooks(f(g(h())))`.
func (c *FeedActionSetClient) Use(hooks ...Hook) {
	c.hooks.FeedActionSet = append(c.hooks.FeedActionSet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feedactionset.Intercept(f(g(h())))`.
func (c *FeedActionSetClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedActionSet = append(c.inters.FeedActionSet, interceptors...)
}

// Create returns a builder for creating a FeedActionSet entity.
func (c *FeedActionSetClient) Create() *FeedActionSetCreate {
	mutation := newFeedActionSetMutation(c.config, OpCreate)
	return &FeedActionSetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedActionSet entities.
func (c *FeedActionSetClient) CreateBulk(builders ...*FeedActionSetCreate) *FeedActionSetCreateBulk {
	return &FeedActionSetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedActionSetClient) MapCreateBulk(slice any, setFunc func(*FeedActionSetCreate, int)) *FeedActionSetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedActionSetCreateBulk{err: fmt.Errorf("calling to FeedActionSetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedActionSetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedActionSetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedActionSet.
func (c *FeedActionSetClient) Update() *FeedActionSetUpdate {
	mutation := newFeedActionSetMutation(c.config, OpUpdate)
	return &FeedActionSetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedActionSetClient) UpdateOne(fas *FeedActionSet) *FeedActionSetUpdateOne {
	mutation := newFeedActionSetMutation(c.config, OpUpdateOne, withFeedActionSet(fas))
	return &FeedActionSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedActionSetClient) UpdateOneID(id model.InternalID) *FeedActionSetUpdateOne {
	mutation := newFeedActionSetMutation(c.config, OpUpdateOne, withFeedActionSetID(id))
	return &FeedActionSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedActionSet.
func (c *FeedActionSetClient) Delete() *FeedActionSetDelete {
	mutation := newFeedActionSetMutation(c.config, OpDelete)
	return &FeedActionSetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedActionSetClient) DeleteOne(fas *FeedActionSet) *FeedActionSetDeleteOne {
	return c.DeleteOneID(fas.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedActionSetClient) DeleteOneID(id model.InternalID) *FeedActionSetDeleteOne {
	builder := c.Delete().Where(feedactionset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedActionSetDeleteOne{builder}
}

// Query returns a query builder for FeedActionSet.
func (c *FeedActionSetClient) Query() *FeedActionSetQuery {
	return &FeedActionSetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedActionSet},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedActionSet entity by its id.
func (c *FeedActionSetClient) Get(ctx context.Context, id model.InternalID) (*FeedActionSet, error) {
	return c.Query().Where(feedactionset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedActionSetClient) GetX(ctx context.Context, id model.InternalID) *FeedActionSet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a FeedActionSet.
func (c *FeedActionSetClient) QueryOwner(fas *FeedActionSet) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fas.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedactionset.Table, feedactionset.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feedactionset.OwnerTable, feedactionset.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(fas.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedConfig queries the feed_config edge of a FeedActionSet.
func (c *FeedActionSetClient) QueryFeedConfig(fas *FeedActionSet) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fas.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedactionset.Table, feedactionset.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, feedactionset.FeedConfigTable, feedactionset.FeedConfigPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fas.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedActionSetClient) Hooks() []Hook {
	return c.hooks.FeedActionSet
}

// Interceptors returns the client interceptors.
func (c *FeedActionSetClient) Interceptors() []Interceptor {
	return c.inters.FeedActionSet
}

func (c *FeedActionSetClient) mutate(ctx context.Context, m *FeedActionSetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedActionSetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedActionSetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedActionSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedActionSetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedActionSet mutation op: %q", m.Op())
	}
}

// FeedConfigClient is a client for the FeedConfig schema.
type FeedConfigClient struct {
	config
}

// NewFeedConfigClient returns a client for the FeedConfig from the given config.
func NewFeedConfigClient(c config) *FeedConfigClient {
	return &FeedConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedconfig.Hooks(f(g(h())))`.
func (c *FeedConfigClient) Use(hooks ...Hook) {
	c.hooks.FeedConfig = append(c.hooks.FeedConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feedconfig.Intercept(f(g(h())))`.
func (c *FeedConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedConfig = append(c.inters.FeedConfig, interceptors...)
}

// Create returns a builder for creating a FeedConfig entity.
func (c *FeedConfigClient) Create() *FeedConfigCreate {
	mutation := newFeedConfigMutation(c.config, OpCreate)
	return &FeedConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedConfig entities.
func (c *FeedConfigClient) CreateBulk(builders ...*FeedConfigCreate) *FeedConfigCreateBulk {
	return &FeedConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedConfigClient) MapCreateBulk(slice any, setFunc func(*FeedConfigCreate, int)) *FeedConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedConfigCreateBulk{err: fmt.Errorf("calling to FeedConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedConfig.
func (c *FeedConfigClient) Update() *FeedConfigUpdate {
	mutation := newFeedConfigMutation(c.config, OpUpdate)
	return &FeedConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedConfigClient) UpdateOne(fc *FeedConfig) *FeedConfigUpdateOne {
	mutation := newFeedConfigMutation(c.config, OpUpdateOne, withFeedConfig(fc))
	return &FeedConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedConfigClient) UpdateOneID(id model.InternalID) *FeedConfigUpdateOne {
	mutation := newFeedConfigMutation(c.config, OpUpdateOne, withFeedConfigID(id))
	return &FeedConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedConfig.
func (c *FeedConfigClient) Delete() *FeedConfigDelete {
	mutation := newFeedConfigMutation(c.config, OpDelete)
	return &FeedConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedConfigClient) DeleteOne(fc *FeedConfig) *FeedConfigDeleteOne {
	return c.DeleteOneID(fc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedConfigClient) DeleteOneID(id model.InternalID) *FeedConfigDeleteOne {
	builder := c.Delete().Where(feedconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedConfigDeleteOne{builder}
}

// Query returns a query builder for FeedConfig.
func (c *FeedConfigClient) Query() *FeedConfigQuery {
	return &FeedConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedConfig entity by its id.
func (c *FeedConfigClient) Get(ctx context.Context, id model.InternalID) (*FeedConfig, error) {
	return c.Query().Where(feedconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedConfigClient) GetX(ctx context.Context, id model.InternalID) *FeedConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a FeedConfig.
func (c *FeedConfigClient) QueryOwner(fc *FeedConfig) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feedconfig.OwnerTable, feedconfig.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeed queries the feed edge of a FeedConfig.
func (c *FeedConfigClient) QueryFeed(fc *FeedConfig) *FeedQuery {
	query := (&FeedClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(feed.Table, feed.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, feedconfig.FeedTable, feedconfig.FeedColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifySource queries the notify_source edge of a FeedConfig.
func (c *FeedConfigClient) QueryNotifySource(fc *FeedConfig) *NotifySourceQuery {
	query := (&NotifySourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feedconfig.NotifySourceTable, feedconfig.NotifySourceColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedActionSet queries the feed_action_set edge of a FeedConfig.
func (c *FeedConfigClient) QueryFeedActionSet(fc *FeedConfig) *FeedActionSetQuery {
	query := (&FeedActionSetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(feedactionset.Table, feedactionset.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, feedconfig.FeedActionSetTable, feedconfig.FeedActionSetPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedConfigAction queries the feed_config_action edge of a FeedConfig.
func (c *FeedConfigClient) QueryFeedConfigAction(fc *FeedConfig) *FeedConfigActionQuery {
	query := (&FeedConfigActionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(feedconfigaction.Table, feedconfigaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, feedconfig.FeedConfigActionTable, feedconfig.FeedConfigActionColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedConfigClient) Hooks() []Hook {
	return c.hooks.FeedConfig
}

// Interceptors returns the client interceptors.
func (c *FeedConfigClient) Interceptors() []Interceptor {
	return c.inters.FeedConfig
}

func (c *FeedConfigClient) mutate(ctx context.Context, m *FeedConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedConfig mutation op: %q", m.Op())
	}
}

// FeedConfigActionClient is a client for the FeedConfigAction schema.
type FeedConfigActionClient struct {
	config
}

// NewFeedConfigActionClient returns a client for the FeedConfigAction from the given config.
func NewFeedConfigActionClient(c config) *FeedConfigActionClient {
	return &FeedConfigActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedconfigaction.Hooks(f(g(h())))`.
func (c *FeedConfigActionClient) Use(hooks ...Hook) {
	c.hooks.FeedConfigAction = append(c.hooks.FeedConfigAction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feedconfigaction.Intercept(f(g(h())))`.
func (c *FeedConfigActionClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedConfigAction = append(c.inters.FeedConfigAction, interceptors...)
}

// Create returns a builder for creating a FeedConfigAction entity.
func (c *FeedConfigActionClient) Create() *FeedConfigActionCreate {
	mutation := newFeedConfigActionMutation(c.config, OpCreate)
	return &FeedConfigActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedConfigAction entities.
func (c *FeedConfigActionClient) CreateBulk(builders ...*FeedConfigActionCreate) *FeedConfigActionCreateBulk {
	return &FeedConfigActionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedConfigActionClient) MapCreateBulk(slice any, setFunc func(*FeedConfigActionCreate, int)) *FeedConfigActionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedConfigActionCreateBulk{err: fmt.Errorf("calling to FeedConfigActionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedConfigActionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedConfigActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedConfigAction.
func (c *FeedConfigActionClient) Update() *FeedConfigActionUpdate {
	mutation := newFeedConfigActionMutation(c.config, OpUpdate)
	return &FeedConfigActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedConfigActionClient) UpdateOne(fca *FeedConfigAction) *FeedConfigActionUpdateOne {
	mutation := newFeedConfigActionMutation(c.config, OpUpdateOne, withFeedConfigAction(fca))
	return &FeedConfigActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedConfigActionClient) UpdateOneID(id int) *FeedConfigActionUpdateOne {
	mutation := newFeedConfigActionMutation(c.config, OpUpdateOne, withFeedConfigActionID(id))
	return &FeedConfigActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedConfigAction.
func (c *FeedConfigActionClient) Delete() *FeedConfigActionDelete {
	mutation := newFeedConfigActionMutation(c.config, OpDelete)
	return &FeedConfigActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedConfigActionClient) DeleteOne(fca *FeedConfigAction) *FeedConfigActionDeleteOne {
	return c.DeleteOneID(fca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedConfigActionClient) DeleteOneID(id int) *FeedConfigActionDeleteOne {
	builder := c.Delete().Where(feedconfigaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedConfigActionDeleteOne{builder}
}

// Query returns a query builder for FeedConfigAction.
func (c *FeedConfigActionClient) Query() *FeedConfigActionQuery {
	return &FeedConfigActionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedConfigAction},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedConfigAction entity by its id.
func (c *FeedConfigActionClient) Get(ctx context.Context, id int) (*FeedConfigAction, error) {
	return c.Query().Where(feedconfigaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedConfigActionClient) GetX(ctx context.Context, id int) *FeedConfigAction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFeedConfig queries the feed_config edge of a FeedConfigAction.
func (c *FeedConfigActionClient) QueryFeedConfig(fca *FeedConfigAction) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfigaction.Table, feedconfigaction.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedconfigaction.FeedConfigTable, feedconfigaction.FeedConfigColumn),
		)
		fromV = sqlgraph.Neighbors(fca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedActionSet queries the feed_action_set edge of a FeedConfigAction.
func (c *FeedConfigActionClient) QueryFeedActionSet(fca *FeedConfigAction) *FeedActionSetQuery {
	query := (&FeedActionSetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfigaction.Table, feedconfigaction.FieldID, id),
			sqlgraph.To(feedactionset.Table, feedactionset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedconfigaction.FeedActionSetTable, feedconfigaction.FeedActionSetColumn),
		)
		fromV = sqlgraph.Neighbors(fca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedConfigActionClient) Hooks() []Hook {
	return c.hooks.FeedConfigAction
}

// Interceptors returns the client interceptors.
func (c *FeedConfigActionClient) Interceptors() []Interceptor {
	return c.inters.FeedConfigAction
}

func (c *FeedConfigActionClient) mutate(ctx context.Context, m *FeedConfigActionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedConfigActionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedConfigActionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedConfigActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedConfigActionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedConfigAction mutation op: %q", m.Op())
	}
}

// FeedItemClient is a client for the FeedItem schema.
type FeedItemClient struct {
	config
}

// NewFeedItemClient returns a client for the FeedItem from the given config.
func NewFeedItemClient(c config) *FeedItemClient {
	return &FeedItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feeditem.Hooks(f(g(h())))`.
func (c *FeedItemClient) Use(hooks ...Hook) {
	c.hooks.FeedItem = append(c.hooks.FeedItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feeditem.Intercept(f(g(h())))`.
func (c *FeedItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedItem = append(c.inters.FeedItem, interceptors...)
}

// Create returns a builder for creating a FeedItem entity.
func (c *FeedItemClient) Create() *FeedItemCreate {
	mutation := newFeedItemMutation(c.config, OpCreate)
	return &FeedItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedItem entities.
func (c *FeedItemClient) CreateBulk(builders ...*FeedItemCreate) *FeedItemCreateBulk {
	return &FeedItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedItemClient) MapCreateBulk(slice any, setFunc func(*FeedItemCreate, int)) *FeedItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedItemCreateBulk{err: fmt.Errorf("calling to FeedItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedItem.
func (c *FeedItemClient) Update() *FeedItemUpdate {
	mutation := newFeedItemMutation(c.config, OpUpdate)
	return &FeedItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedItemClient) UpdateOne(fi *FeedItem) *FeedItemUpdateOne {
	mutation := newFeedItemMutation(c.config, OpUpdateOne, withFeedItem(fi))
	return &FeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedItemClient) UpdateOneID(id model.InternalID) *FeedItemUpdateOne {
	mutation := newFeedItemMutation(c.config, OpUpdateOne, withFeedItemID(id))
	return &FeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedItem.
func (c *FeedItemClient) Delete() *FeedItemDelete {
	mutation := newFeedItemMutation(c.config, OpDelete)
	return &FeedItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedItemClient) DeleteOne(fi *FeedItem) *FeedItemDeleteOne {
	return c.DeleteOneID(fi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedItemClient) DeleteOneID(id model.InternalID) *FeedItemDeleteOne {
	builder := c.Delete().Where(feeditem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedItemDeleteOne{builder}
}

// Query returns a query builder for FeedItem.
func (c *FeedItemClient) Query() *FeedItemQuery {
	return &FeedItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedItem},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedItem entity by its id.
func (c *FeedItemClient) Get(ctx context.Context, id model.InternalID) (*FeedItem, error) {
	return c.Query().Where(feeditem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedItemClient) GetX(ctx context.Context, id model.InternalID) *FeedItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFeed queries the feed edge of a FeedItem.
func (c *FeedItemClient) QueryFeed(fi *FeedItem) *FeedQuery {
	query := (&FeedClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditem.Table, feeditem.FieldID, id),
			sqlgraph.To(feed.Table, feed.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feeditem.FeedTable, feeditem.FeedColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedItemCollection queries the feed_item_collection edge of a FeedItem.
func (c *FeedItemClient) QueryFeedItemCollection(fi *FeedItem) *FeedItemCollectionQuery {
	query := (&FeedItemCollectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditem.Table, feeditem.FieldID, id),
			sqlgraph.To(feeditemcollection.Table, feeditemcollection.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, feeditem.FeedItemCollectionTable, feeditem.FeedItemCollectionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedItemClient) Hooks() []Hook {
	return c.hooks.FeedItem
}

// Interceptors returns the client interceptors.
func (c *FeedItemClient) Interceptors() []Interceptor {
	return c.inters.FeedItem
}

func (c *FeedItemClient) mutate(ctx context.Context, m *FeedItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedItem mutation op: %q", m.Op())
	}
}

// FeedItemCollectionClient is a client for the FeedItemCollection schema.
type FeedItemCollectionClient struct {
	config
}

// NewFeedItemCollectionClient returns a client for the FeedItemCollection from the given config.
func NewFeedItemCollectionClient(c config) *FeedItemCollectionClient {
	return &FeedItemCollectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feeditemcollection.Hooks(f(g(h())))`.
func (c *FeedItemCollectionClient) Use(hooks ...Hook) {
	c.hooks.FeedItemCollection = append(c.hooks.FeedItemCollection, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feeditemcollection.Intercept(f(g(h())))`.
func (c *FeedItemCollectionClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedItemCollection = append(c.inters.FeedItemCollection, interceptors...)
}

// Create returns a builder for creating a FeedItemCollection entity.
func (c *FeedItemCollectionClient) Create() *FeedItemCollectionCreate {
	mutation := newFeedItemCollectionMutation(c.config, OpCreate)
	return &FeedItemCollectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedItemCollection entities.
func (c *FeedItemCollectionClient) CreateBulk(builders ...*FeedItemCollectionCreate) *FeedItemCollectionCreateBulk {
	return &FeedItemCollectionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedItemCollectionClient) MapCreateBulk(slice any, setFunc func(*FeedItemCollectionCreate, int)) *FeedItemCollectionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedItemCollectionCreateBulk{err: fmt.Errorf("calling to FeedItemCollectionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedItemCollectionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedItemCollectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedItemCollection.
func (c *FeedItemCollectionClient) Update() *FeedItemCollectionUpdate {
	mutation := newFeedItemCollectionMutation(c.config, OpUpdate)
	return &FeedItemCollectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedItemCollectionClient) UpdateOne(fic *FeedItemCollection) *FeedItemCollectionUpdateOne {
	mutation := newFeedItemCollectionMutation(c.config, OpUpdateOne, withFeedItemCollection(fic))
	return &FeedItemCollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedItemCollectionClient) UpdateOneID(id model.InternalID) *FeedItemCollectionUpdateOne {
	mutation := newFeedItemCollectionMutation(c.config, OpUpdateOne, withFeedItemCollectionID(id))
	return &FeedItemCollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedItemCollection.
func (c *FeedItemCollectionClient) Delete() *FeedItemCollectionDelete {
	mutation := newFeedItemCollectionMutation(c.config, OpDelete)
	return &FeedItemCollectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedItemCollectionClient) DeleteOne(fic *FeedItemCollection) *FeedItemCollectionDeleteOne {
	return c.DeleteOneID(fic.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedItemCollectionClient) DeleteOneID(id model.InternalID) *FeedItemCollectionDeleteOne {
	builder := c.Delete().Where(feeditemcollection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedItemCollectionDeleteOne{builder}
}

// Query returns a query builder for FeedItemCollection.
func (c *FeedItemCollectionClient) Query() *FeedItemCollectionQuery {
	return &FeedItemCollectionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedItemCollection},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedItemCollection entity by its id.
func (c *FeedItemCollectionClient) Get(ctx context.Context, id model.InternalID) (*FeedItemCollection, error) {
	return c.Query().Where(feeditemcollection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedItemCollectionClient) GetX(ctx context.Context, id model.InternalID) *FeedItemCollection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a FeedItemCollection.
func (c *FeedItemCollectionClient) QueryOwner(fic *FeedItemCollection) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditemcollection.Table, feeditemcollection.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feeditemcollection.OwnerTable, feeditemcollection.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(fic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedItem queries the feed_item edge of a FeedItemCollection.
func (c *FeedItemCollectionClient) QueryFeedItem(fic *FeedItemCollection) *FeedItemQuery {
	query := (&FeedItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditemcollection.Table, feeditemcollection.FieldID, id),
			sqlgraph.To(feeditem.Table, feeditem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, feeditemcollection.FeedItemTable, feeditemcollection.FeedItemPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifySource queries the notify_source edge of a FeedItemCollection.
func (c *FeedItemCollectionClient) QueryNotifySource(fic *FeedItemCollection) *NotifySourceQuery {
	query := (&NotifySourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditemcollection.Table, feeditemcollection.FieldID, id),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feeditemcollection.NotifySourceTable, feeditemcollection.NotifySourceColumn),
		)
		fromV = sqlgraph.Neighbors(fic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedItemCollectionClient) Hooks() []Hook {
	return c.hooks.FeedItemCollection
}

// Interceptors returns the client interceptors.
func (c *FeedItemCollectionClient) Interceptors() []Interceptor {
	return c.inters.FeedItemCollection
}

func (c *FeedItemCollectionClient) mutate(ctx context.Context, m *FeedItemCollectionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedItemCollectionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedItemCollectionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedItemCollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedItemCollectionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedItemCollection mutation op: %q", m.Op())
	}
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `file.Hooks(f(g(h())))`.
func (c *FileClient) Use(hooks ...Hook) {
	c.hooks.File = append(c.hooks.File, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `file.Intercept(f(g(h())))`.
func (c *FileClient) Intercept(interceptors ...Interceptor) {
	c.inters.File = append(c.inters.File, interceptors...)
}

// Create returns a builder for creating a File entity.
func (c *FileClient) Create() *FileCreate {
	mutation := newFileMutation(c.config, OpCreate)
	return &FileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of File entities.
func (c *FileClient) CreateBulk(builders ...*FileCreate) *FileCreateBulk {
	return &FileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FileClient) MapCreateBulk(slice any, setFunc func(*FileCreate, int)) *FileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FileCreateBulk{err: fmt.Errorf("calling to FileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	mutation := newFileMutation(c.config, OpUpdate)
	return &FileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFile(f))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id model.InternalID) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFileID(id))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	mutation := newFileMutation(c.config, OpDelete)
	return &FileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FileClient) DeleteOneID(id model.InternalID) *FileDeleteOne {
	builder := c.Delete().Where(file.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteOne{builder}
}

// Query returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFile},
		inters: c.Interceptors(),
	}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id model.InternalID) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id model.InternalID) *File {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a File.
func (c *FileClient) QueryOwner(f *File) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.OwnerTable, file.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImage queries the image edge of a File.
func (c *FileClient) QueryImage(f *File) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, file.ImageTable, file.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileClient) Hooks() []Hook {
	return c.hooks.File
}

// Interceptors returns the client interceptors.
func (c *FileClient) Interceptors() []Interceptor {
	return c.inters.File
}

func (c *FileClient) mutate(ctx context.Context, m *FileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown File mutation op: %q", m.Op())
	}
}

// ImageClient is a client for the Image schema.
type ImageClient struct {
	config
}

// NewImageClient returns a client for the Image from the given config.
func NewImageClient(c config) *ImageClient {
	return &ImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `image.Hooks(f(g(h())))`.
func (c *ImageClient) Use(hooks ...Hook) {
	c.hooks.Image = append(c.hooks.Image, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `image.Intercept(f(g(h())))`.
func (c *ImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Image = append(c.inters.Image, interceptors...)
}

// Create returns a builder for creating a Image entity.
func (c *ImageClient) Create() *ImageCreate {
	mutation := newImageMutation(c.config, OpCreate)
	return &ImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Image entities.
func (c *ImageClient) CreateBulk(builders ...*ImageCreate) *ImageCreateBulk {
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ImageClient) MapCreateBulk(slice any, setFunc func(*ImageCreate, int)) *ImageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ImageCreateBulk{err: fmt.Errorf("calling to ImageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ImageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Image.
func (c *ImageClient) Update() *ImageUpdate {
	mutation := newImageMutation(c.config, OpUpdate)
	return &ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageClient) UpdateOne(i *Image) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImage(i))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageClient) UpdateOneID(id model.InternalID) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImageID(id))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Image.
func (c *ImageClient) Delete() *ImageDelete {
	mutation := newImageMutation(c.config, OpDelete)
	return &ImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ImageClient) DeleteOne(i *Image) *ImageDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ImageClient) DeleteOneID(id model.InternalID) *ImageDeleteOne {
	builder := c.Delete().Where(image.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageDeleteOne{builder}
}

// Query returns a query builder for Image.
func (c *ImageClient) Query() *ImageQuery {
	return &ImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeImage},
		inters: c.Interceptors(),
	}
}

// Get returns a Image entity by its id.
func (c *ImageClient) Get(ctx context.Context, id model.InternalID) (*Image, error) {
	return c.Query().Where(image.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageClient) GetX(ctx context.Context, id model.InternalID) *Image {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Image.
func (c *ImageClient) QueryOwner(i *Image) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, image.OwnerTable, image.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a Image.
func (c *ImageClient) QueryFile(i *Image) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, image.FileTable, image.FileColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImageClient) Hooks() []Hook {
	return c.hooks.Image
}

// Interceptors returns the client interceptors.
func (c *ImageClient) Interceptors() []Interceptor {
	return c.inters.Image
}

func (c *ImageClient) mutate(ctx context.Context, m *ImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Image mutation op: %q", m.Op())
	}
}

// NotifyFlowClient is a client for the NotifyFlow schema.
type NotifyFlowClient struct {
	config
}

// NewNotifyFlowClient returns a client for the NotifyFlow from the given config.
func NewNotifyFlowClient(c config) *NotifyFlowClient {
	return &NotifyFlowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifyflow.Hooks(f(g(h())))`.
func (c *NotifyFlowClient) Use(hooks ...Hook) {
	c.hooks.NotifyFlow = append(c.hooks.NotifyFlow, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifyflow.Intercept(f(g(h())))`.
func (c *NotifyFlowClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyFlow = append(c.inters.NotifyFlow, interceptors...)
}

// Create returns a builder for creating a NotifyFlow entity.
func (c *NotifyFlowClient) Create() *NotifyFlowCreate {
	mutation := newNotifyFlowMutation(c.config, OpCreate)
	return &NotifyFlowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyFlow entities.
func (c *NotifyFlowClient) CreateBulk(builders ...*NotifyFlowCreate) *NotifyFlowCreateBulk {
	return &NotifyFlowCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifyFlowClient) MapCreateBulk(slice any, setFunc func(*NotifyFlowCreate, int)) *NotifyFlowCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifyFlowCreateBulk{err: fmt.Errorf("calling to NotifyFlowClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifyFlowCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifyFlowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyFlow.
func (c *NotifyFlowClient) Update() *NotifyFlowUpdate {
	mutation := newNotifyFlowMutation(c.config, OpUpdate)
	return &NotifyFlowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyFlowClient) UpdateOne(nf *NotifyFlow) *NotifyFlowUpdateOne {
	mutation := newNotifyFlowMutation(c.config, OpUpdateOne, withNotifyFlow(nf))
	return &NotifyFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyFlowClient) UpdateOneID(id model.InternalID) *NotifyFlowUpdateOne {
	mutation := newNotifyFlowMutation(c.config, OpUpdateOne, withNotifyFlowID(id))
	return &NotifyFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyFlow.
func (c *NotifyFlowClient) Delete() *NotifyFlowDelete {
	mutation := newNotifyFlowMutation(c.config, OpDelete)
	return &NotifyFlowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyFlowClient) DeleteOne(nf *NotifyFlow) *NotifyFlowDeleteOne {
	return c.DeleteOneID(nf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyFlowClient) DeleteOneID(id model.InternalID) *NotifyFlowDeleteOne {
	builder := c.Delete().Where(notifyflow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyFlowDeleteOne{builder}
}

// Query returns a query builder for NotifyFlow.
func (c *NotifyFlowClient) Query() *NotifyFlowQuery {
	return &NotifyFlowQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyFlow},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyFlow entity by its id.
func (c *NotifyFlowClient) Get(ctx context.Context, id model.InternalID) (*NotifyFlow, error) {
	return c.Query().Where(notifyflow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyFlowClient) GetX(ctx context.Context, id model.InternalID) *NotifyFlow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryOwner(nf *NotifyFlow) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifyflow.OwnerTable, notifyflow.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyTarget queries the notify_target edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryNotifyTarget(nf *NotifyFlow) *NotifyTargetQuery {
	query := (&NotifyTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(notifytarget.Table, notifytarget.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, notifyflow.NotifyTargetTable, notifyflow.NotifyTargetPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifySource queries the notify_source edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryNotifySource(nf *NotifyFlow) *NotifySourceQuery {
	query := (&NotifySourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, notifyflow.NotifySourceTable, notifyflow.NotifySourcePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlowTarget queries the notify_flow_target edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryNotifyFlowTarget(nf *NotifyFlow) *NotifyFlowTargetQuery {
	query := (&NotifyFlowTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(notifyflowtarget.Table, notifyflowtarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, notifyflow.NotifyFlowTargetTable, notifyflow.NotifyFlowTargetColumn),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlowSource queries the notify_flow_source edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryNotifyFlowSource(nf *NotifyFlow) *NotifyFlowSourceQuery {
	query := (&NotifyFlowSourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(notifyflowsource.Table, notifyflowsource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, notifyflow.NotifyFlowSourceTable, notifyflow.NotifyFlowSourceColumn),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifyFlowClient) Hooks() []Hook {
	return c.hooks.NotifyFlow
}

// Interceptors returns the client interceptors.
func (c *NotifyFlowClient) Interceptors() []Interceptor {
	return c.inters.NotifyFlow
}

func (c *NotifyFlowClient) mutate(ctx context.Context, m *NotifyFlowMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyFlowCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyFlowUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyFlowDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyFlow mutation op: %q", m.Op())
	}
}

// NotifyFlowSourceClient is a client for the NotifyFlowSource schema.
type NotifyFlowSourceClient struct {
	config
}

// NewNotifyFlowSourceClient returns a client for the NotifyFlowSource from the given config.
func NewNotifyFlowSourceClient(c config) *NotifyFlowSourceClient {
	return &NotifyFlowSourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifyflowsource.Hooks(f(g(h())))`.
func (c *NotifyFlowSourceClient) Use(hooks ...Hook) {
	c.hooks.NotifyFlowSource = append(c.hooks.NotifyFlowSource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifyflowsource.Intercept(f(g(h())))`.
func (c *NotifyFlowSourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyFlowSource = append(c.inters.NotifyFlowSource, interceptors...)
}

// Create returns a builder for creating a NotifyFlowSource entity.
func (c *NotifyFlowSourceClient) Create() *NotifyFlowSourceCreate {
	mutation := newNotifyFlowSourceMutation(c.config, OpCreate)
	return &NotifyFlowSourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyFlowSource entities.
func (c *NotifyFlowSourceClient) CreateBulk(builders ...*NotifyFlowSourceCreate) *NotifyFlowSourceCreateBulk {
	return &NotifyFlowSourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifyFlowSourceClient) MapCreateBulk(slice any, setFunc func(*NotifyFlowSourceCreate, int)) *NotifyFlowSourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifyFlowSourceCreateBulk{err: fmt.Errorf("calling to NotifyFlowSourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifyFlowSourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifyFlowSourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyFlowSource.
func (c *NotifyFlowSourceClient) Update() *NotifyFlowSourceUpdate {
	mutation := newNotifyFlowSourceMutation(c.config, OpUpdate)
	return &NotifyFlowSourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyFlowSourceClient) UpdateOne(nfs *NotifyFlowSource) *NotifyFlowSourceUpdateOne {
	mutation := newNotifyFlowSourceMutation(c.config, OpUpdateOne, withNotifyFlowSource(nfs))
	return &NotifyFlowSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyFlowSourceClient) UpdateOneID(id int) *NotifyFlowSourceUpdateOne {
	mutation := newNotifyFlowSourceMutation(c.config, OpUpdateOne, withNotifyFlowSourceID(id))
	return &NotifyFlowSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyFlowSource.
func (c *NotifyFlowSourceClient) Delete() *NotifyFlowSourceDelete {
	mutation := newNotifyFlowSourceMutation(c.config, OpDelete)
	return &NotifyFlowSourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyFlowSourceClient) DeleteOne(nfs *NotifyFlowSource) *NotifyFlowSourceDeleteOne {
	return c.DeleteOneID(nfs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyFlowSourceClient) DeleteOneID(id int) *NotifyFlowSourceDeleteOne {
	builder := c.Delete().Where(notifyflowsource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyFlowSourceDeleteOne{builder}
}

// Query returns a query builder for NotifyFlowSource.
func (c *NotifyFlowSourceClient) Query() *NotifyFlowSourceQuery {
	return &NotifyFlowSourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyFlowSource},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyFlowSource entity by its id.
func (c *NotifyFlowSourceClient) Get(ctx context.Context, id int) (*NotifyFlowSource, error) {
	return c.Query().Where(notifyflowsource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyFlowSourceClient) GetX(ctx context.Context, id int) *NotifyFlowSource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotifyFlow queries the notify_flow edge of a NotifyFlowSource.
func (c *NotifyFlowSourceClient) QueryNotifyFlow(nfs *NotifyFlowSource) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nfs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowsource.Table, notifyflowsource.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowsource.NotifyFlowTable, notifyflowsource.NotifyFlowColumn),
		)
		fromV = sqlgraph.Neighbors(nfs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifySource queries the notify_source edge of a NotifyFlowSource.
func (c *NotifyFlowSourceClient) QueryNotifySource(nfs *NotifyFlowSource) *NotifySourceQuery {
	query := (&NotifySourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nfs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowsource.Table, notifyflowsource.FieldID, id),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowsource.NotifySourceTable, notifyflowsource.NotifySourceColumn),
		)
		fromV = sqlgraph.Neighbors(nfs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifyFlowSourceClient) Hooks() []Hook {
	return c.hooks.NotifyFlowSource
}

// Interceptors returns the client interceptors.
func (c *NotifyFlowSourceClient) Interceptors() []Interceptor {
	return c.inters.NotifyFlowSource
}

func (c *NotifyFlowSourceClient) mutate(ctx context.Context, m *NotifyFlowSourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyFlowSourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyFlowSourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyFlowSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyFlowSourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyFlowSource mutation op: %q", m.Op())
	}
}

// NotifyFlowTargetClient is a client for the NotifyFlowTarget schema.
type NotifyFlowTargetClient struct {
	config
}

// NewNotifyFlowTargetClient returns a client for the NotifyFlowTarget from the given config.
func NewNotifyFlowTargetClient(c config) *NotifyFlowTargetClient {
	return &NotifyFlowTargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifyflowtarget.Hooks(f(g(h())))`.
func (c *NotifyFlowTargetClient) Use(hooks ...Hook) {
	c.hooks.NotifyFlowTarget = append(c.hooks.NotifyFlowTarget, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifyflowtarget.Intercept(f(g(h())))`.
func (c *NotifyFlowTargetClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyFlowTarget = append(c.inters.NotifyFlowTarget, interceptors...)
}

// Create returns a builder for creating a NotifyFlowTarget entity.
func (c *NotifyFlowTargetClient) Create() *NotifyFlowTargetCreate {
	mutation := newNotifyFlowTargetMutation(c.config, OpCreate)
	return &NotifyFlowTargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyFlowTarget entities.
func (c *NotifyFlowTargetClient) CreateBulk(builders ...*NotifyFlowTargetCreate) *NotifyFlowTargetCreateBulk {
	return &NotifyFlowTargetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifyFlowTargetClient) MapCreateBulk(slice any, setFunc func(*NotifyFlowTargetCreate, int)) *NotifyFlowTargetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifyFlowTargetCreateBulk{err: fmt.Errorf("calling to NotifyFlowTargetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifyFlowTargetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifyFlowTargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyFlowTarget.
func (c *NotifyFlowTargetClient) Update() *NotifyFlowTargetUpdate {
	mutation := newNotifyFlowTargetMutation(c.config, OpUpdate)
	return &NotifyFlowTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyFlowTargetClient) UpdateOne(nft *NotifyFlowTarget) *NotifyFlowTargetUpdateOne {
	mutation := newNotifyFlowTargetMutation(c.config, OpUpdateOne, withNotifyFlowTarget(nft))
	return &NotifyFlowTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyFlowTargetClient) UpdateOneID(id int) *NotifyFlowTargetUpdateOne {
	mutation := newNotifyFlowTargetMutation(c.config, OpUpdateOne, withNotifyFlowTargetID(id))
	return &NotifyFlowTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyFlowTarget.
func (c *NotifyFlowTargetClient) Delete() *NotifyFlowTargetDelete {
	mutation := newNotifyFlowTargetMutation(c.config, OpDelete)
	return &NotifyFlowTargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyFlowTargetClient) DeleteOne(nft *NotifyFlowTarget) *NotifyFlowTargetDeleteOne {
	return c.DeleteOneID(nft.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyFlowTargetClient) DeleteOneID(id int) *NotifyFlowTargetDeleteOne {
	builder := c.Delete().Where(notifyflowtarget.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyFlowTargetDeleteOne{builder}
}

// Query returns a query builder for NotifyFlowTarget.
func (c *NotifyFlowTargetClient) Query() *NotifyFlowTargetQuery {
	return &NotifyFlowTargetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyFlowTarget},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyFlowTarget entity by its id.
func (c *NotifyFlowTargetClient) Get(ctx context.Context, id int) (*NotifyFlowTarget, error) {
	return c.Query().Where(notifyflowtarget.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyFlowTargetClient) GetX(ctx context.Context, id int) *NotifyFlowTarget {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotifyFlow queries the notify_flow edge of a NotifyFlowTarget.
func (c *NotifyFlowTargetClient) QueryNotifyFlow(nft *NotifyFlowTarget) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowtarget.Table, notifyflowtarget.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowtarget.NotifyFlowTable, notifyflowtarget.NotifyFlowColumn),
		)
		fromV = sqlgraph.Neighbors(nft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyTarget queries the notify_target edge of a NotifyFlowTarget.
func (c *NotifyFlowTargetClient) QueryNotifyTarget(nft *NotifyFlowTarget) *NotifyTargetQuery {
	query := (&NotifyTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowtarget.Table, notifyflowtarget.FieldID, id),
			sqlgraph.To(notifytarget.Table, notifytarget.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowtarget.NotifyTargetTable, notifyflowtarget.NotifyTargetColumn),
		)
		fromV = sqlgraph.Neighbors(nft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifyFlowTargetClient) Hooks() []Hook {
	return c.hooks.NotifyFlowTarget
}

// Interceptors returns the client interceptors.
func (c *NotifyFlowTargetClient) Interceptors() []Interceptor {
	return c.inters.NotifyFlowTarget
}

func (c *NotifyFlowTargetClient) mutate(ctx context.Context, m *NotifyFlowTargetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyFlowTargetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyFlowTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyFlowTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyFlowTargetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyFlowTarget mutation op: %q", m.Op())
	}
}

// NotifySourceClient is a client for the NotifySource schema.
type NotifySourceClient struct {
	config
}

// NewNotifySourceClient returns a client for the NotifySource from the given config.
func NewNotifySourceClient(c config) *NotifySourceClient {
	return &NotifySourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifysource.Hooks(f(g(h())))`.
func (c *NotifySourceClient) Use(hooks ...Hook) {
	c.hooks.NotifySource = append(c.hooks.NotifySource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifysource.Intercept(f(g(h())))`.
func (c *NotifySourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifySource = append(c.inters.NotifySource, interceptors...)
}

// Create returns a builder for creating a NotifySource entity.
func (c *NotifySourceClient) Create() *NotifySourceCreate {
	mutation := newNotifySourceMutation(c.config, OpCreate)
	return &NotifySourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifySource entities.
func (c *NotifySourceClient) CreateBulk(builders ...*NotifySourceCreate) *NotifySourceCreateBulk {
	return &NotifySourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifySourceClient) MapCreateBulk(slice any, setFunc func(*NotifySourceCreate, int)) *NotifySourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifySourceCreateBulk{err: fmt.Errorf("calling to NotifySourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifySourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifySourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifySource.
func (c *NotifySourceClient) Update() *NotifySourceUpdate {
	mutation := newNotifySourceMutation(c.config, OpUpdate)
	return &NotifySourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifySourceClient) UpdateOne(ns *NotifySource) *NotifySourceUpdateOne {
	mutation := newNotifySourceMutation(c.config, OpUpdateOne, withNotifySource(ns))
	return &NotifySourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifySourceClient) UpdateOneID(id model.InternalID) *NotifySourceUpdateOne {
	mutation := newNotifySourceMutation(c.config, OpUpdateOne, withNotifySourceID(id))
	return &NotifySourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifySource.
func (c *NotifySourceClient) Delete() *NotifySourceDelete {
	mutation := newNotifySourceMutation(c.config, OpDelete)
	return &NotifySourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifySourceClient) DeleteOne(ns *NotifySource) *NotifySourceDeleteOne {
	return c.DeleteOneID(ns.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifySourceClient) DeleteOneID(id model.InternalID) *NotifySourceDeleteOne {
	builder := c.Delete().Where(notifysource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifySourceDeleteOne{builder}
}

// Query returns a query builder for NotifySource.
func (c *NotifySourceClient) Query() *NotifySourceQuery {
	return &NotifySourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifySource},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifySource entity by its id.
func (c *NotifySourceClient) Get(ctx context.Context, id model.InternalID) (*NotifySource, error) {
	return c.Query().Where(notifysource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifySourceClient) GetX(ctx context.Context, id model.InternalID) *NotifySource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a NotifySource.
func (c *NotifySourceClient) QueryOwner(ns *NotifySource) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifysource.Table, notifysource.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifysource.OwnerTable, notifysource.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlow queries the notify_flow edge of a NotifySource.
func (c *NotifySourceClient) QueryNotifyFlow(ns *NotifySource) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifysource.Table, notifysource.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, notifysource.NotifyFlowTable, notifysource.NotifyFlowPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedConfig queries the feed_config edge of a NotifySource.
func (c *NotifySourceClient) QueryFeedConfig(ns *NotifySource) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifysource.Table, notifysource.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifysource.FeedConfigTable, notifysource.FeedConfigColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedItemCollection queries the feed_item_collection edge of a NotifySource.
func (c *NotifySourceClient) QueryFeedItemCollection(ns *NotifySource) *FeedItemCollectionQuery {
	query := (&FeedItemCollectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifysource.Table, notifysource.FieldID, id),
			sqlgraph.To(feeditemcollection.Table, feeditemcollection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifysource.FeedItemCollectionTable, notifysource.FeedItemCollectionColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlowSource queries the notify_flow_source edge of a NotifySource.
func (c *NotifySourceClient) QueryNotifyFlowSource(ns *NotifySource) *NotifyFlowSourceQuery {
	query := (&NotifyFlowSourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifysource.Table, notifysource.FieldID, id),
			sqlgraph.To(notifyflowsource.Table, notifyflowsource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, notifysource.NotifyFlowSourceTable, notifysource.NotifyFlowSourceColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifySourceClient) Hooks() []Hook {
	return c.hooks.NotifySource
}

// Interceptors returns the client interceptors.
func (c *NotifySourceClient) Interceptors() []Interceptor {
	return c.inters.NotifySource
}

func (c *NotifySourceClient) mutate(ctx context.Context, m *NotifySourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifySourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifySourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifySourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifySourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifySource mutation op: %q", m.Op())
	}
}

// NotifyTargetClient is a client for the NotifyTarget schema.
type NotifyTargetClient struct {
	config
}

// NewNotifyTargetClient returns a client for the NotifyTarget from the given config.
func NewNotifyTargetClient(c config) *NotifyTargetClient {
	return &NotifyTargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifytarget.Hooks(f(g(h())))`.
func (c *NotifyTargetClient) Use(hooks ...Hook) {
	c.hooks.NotifyTarget = append(c.hooks.NotifyTarget, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifytarget.Intercept(f(g(h())))`.
func (c *NotifyTargetClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyTarget = append(c.inters.NotifyTarget, interceptors...)
}

// Create returns a builder for creating a NotifyTarget entity.
func (c *NotifyTargetClient) Create() *NotifyTargetCreate {
	mutation := newNotifyTargetMutation(c.config, OpCreate)
	return &NotifyTargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyTarget entities.
func (c *NotifyTargetClient) CreateBulk(builders ...*NotifyTargetCreate) *NotifyTargetCreateBulk {
	return &NotifyTargetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifyTargetClient) MapCreateBulk(slice any, setFunc func(*NotifyTargetCreate, int)) *NotifyTargetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifyTargetCreateBulk{err: fmt.Errorf("calling to NotifyTargetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifyTargetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifyTargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyTarget.
func (c *NotifyTargetClient) Update() *NotifyTargetUpdate {
	mutation := newNotifyTargetMutation(c.config, OpUpdate)
	return &NotifyTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyTargetClient) UpdateOne(nt *NotifyTarget) *NotifyTargetUpdateOne {
	mutation := newNotifyTargetMutation(c.config, OpUpdateOne, withNotifyTarget(nt))
	return &NotifyTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyTargetClient) UpdateOneID(id model.InternalID) *NotifyTargetUpdateOne {
	mutation := newNotifyTargetMutation(c.config, OpUpdateOne, withNotifyTargetID(id))
	return &NotifyTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyTarget.
func (c *NotifyTargetClient) Delete() *NotifyTargetDelete {
	mutation := newNotifyTargetMutation(c.config, OpDelete)
	return &NotifyTargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyTargetClient) DeleteOne(nt *NotifyTarget) *NotifyTargetDeleteOne {
	return c.DeleteOneID(nt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyTargetClient) DeleteOneID(id model.InternalID) *NotifyTargetDeleteOne {
	builder := c.Delete().Where(notifytarget.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyTargetDeleteOne{builder}
}

// Query returns a query builder for NotifyTarget.
func (c *NotifyTargetClient) Query() *NotifyTargetQuery {
	return &NotifyTargetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyTarget},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyTarget entity by its id.
func (c *NotifyTargetClient) Get(ctx context.Context, id model.InternalID) (*NotifyTarget, error) {
	return c.Query().Where(notifytarget.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyTargetClient) GetX(ctx context.Context, id model.InternalID) *NotifyTarget {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a NotifyTarget.
func (c *NotifyTargetClient) QueryOwner(nt *NotifyTarget) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifytarget.Table, notifytarget.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifytarget.OwnerTable, notifytarget.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(nt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlow queries the notify_flow edge of a NotifyTarget.
func (c *NotifyTargetClient) QueryNotifyFlow(nt *NotifyTarget) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifytarget.Table, notifytarget.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, notifytarget.NotifyFlowTable, notifytarget.NotifyFlowPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlowTarget queries the notify_flow_target edge of a NotifyTarget.
func (c *NotifyTargetClient) QueryNotifyFlowTarget(nt *NotifyTarget) *NotifyFlowTargetQuery {
	query := (&NotifyFlowTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifytarget.Table, notifytarget.FieldID, id),
			sqlgraph.To(notifyflowtarget.Table, notifyflowtarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, notifytarget.NotifyFlowTargetTable, notifytarget.NotifyFlowTargetColumn),
		)
		fromV = sqlgraph.Neighbors(nt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifyTargetClient) Hooks() []Hook {
	return c.hooks.NotifyTarget
}

// Interceptors returns the client interceptors.
func (c *NotifyTargetClient) Interceptors() []Interceptor {
	return c.inters.NotifyTarget
}

func (c *NotifyTargetClient) mutate(ctx context.Context, m *NotifyTargetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyTargetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyTargetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyTarget mutation op: %q", m.Op())
	}
}

// PorterContextClient is a client for the PorterContext schema.
type PorterContextClient struct {
	config
}

// NewPorterContextClient returns a client for the PorterContext from the given config.
func NewPorterContextClient(c config) *PorterContextClient {
	return &PorterContextClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `portercontext.Hooks(f(g(h())))`.
func (c *PorterContextClient) Use(hooks ...Hook) {
	c.hooks.PorterContext = append(c.hooks.PorterContext, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `portercontext.Intercept(f(g(h())))`.
func (c *PorterContextClient) Intercept(interceptors ...Interceptor) {
	c.inters.PorterContext = append(c.inters.PorterContext, interceptors...)
}

// Create returns a builder for creating a PorterContext entity.
func (c *PorterContextClient) Create() *PorterContextCreate {
	mutation := newPorterContextMutation(c.config, OpCreate)
	return &PorterContextCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PorterContext entities.
func (c *PorterContextClient) CreateBulk(builders ...*PorterContextCreate) *PorterContextCreateBulk {
	return &PorterContextCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PorterContextClient) MapCreateBulk(slice any, setFunc func(*PorterContextCreate, int)) *PorterContextCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PorterContextCreateBulk{err: fmt.Errorf("calling to PorterContextClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PorterContextCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PorterContextCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PorterContext.
func (c *PorterContextClient) Update() *PorterContextUpdate {
	mutation := newPorterContextMutation(c.config, OpUpdate)
	return &PorterContextUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PorterContextClient) UpdateOne(pc *PorterContext) *PorterContextUpdateOne {
	mutation := newPorterContextMutation(c.config, OpUpdateOne, withPorterContext(pc))
	return &PorterContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PorterContextClient) UpdateOneID(id model.InternalID) *PorterContextUpdateOne {
	mutation := newPorterContextMutation(c.config, OpUpdateOne, withPorterContextID(id))
	return &PorterContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PorterContext.
func (c *PorterContextClient) Delete() *PorterContextDelete {
	mutation := newPorterContextMutation(c.config, OpDelete)
	return &PorterContextDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PorterContextClient) DeleteOne(pc *PorterContext) *PorterContextDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PorterContextClient) DeleteOneID(id model.InternalID) *PorterContextDeleteOne {
	builder := c.Delete().Where(portercontext.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PorterContextDeleteOne{builder}
}

// Query returns a query builder for PorterContext.
func (c *PorterContextClient) Query() *PorterContextQuery {
	return &PorterContextQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePorterContext},
		inters: c.Interceptors(),
	}
}

// Get returns a PorterContext entity by its id.
func (c *PorterContextClient) Get(ctx context.Context, id model.InternalID) (*PorterContext, error) {
	return c.Query().Where(portercontext.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PorterContextClient) GetX(ctx context.Context, id model.InternalID) *PorterContext {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a PorterContext.
func (c *PorterContextClient) QueryOwner(pc *PorterContext) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(portercontext.Table, portercontext.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, portercontext.OwnerTable, portercontext.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PorterContextClient) Hooks() []Hook {
	return c.hooks.PorterContext
}

// Interceptors returns the client interceptors.
func (c *PorterContextClient) Interceptors() []Interceptor {
	return c.inters.PorterContext
}

func (c *PorterContextClient) mutate(ctx context.Context, m *PorterContextMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PorterContextCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PorterContextUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PorterContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PorterContextDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PorterContext mutation op: %q", m.Op())
	}
}

// PorterInstanceClient is a client for the PorterInstance schema.
type PorterInstanceClient struct {
	config
}

// NewPorterInstanceClient returns a client for the PorterInstance from the given config.
func NewPorterInstanceClient(c config) *PorterInstanceClient {
	return &PorterInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `porterinstance.Hooks(f(g(h())))`.
func (c *PorterInstanceClient) Use(hooks ...Hook) {
	c.hooks.PorterInstance = append(c.hooks.PorterInstance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `porterinstance.Intercept(f(g(h())))`.
func (c *PorterInstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.PorterInstance = append(c.inters.PorterInstance, interceptors...)
}

// Create returns a builder for creating a PorterInstance entity.
func (c *PorterInstanceClient) Create() *PorterInstanceCreate {
	mutation := newPorterInstanceMutation(c.config, OpCreate)
	return &PorterInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PorterInstance entities.
func (c *PorterInstanceClient) CreateBulk(builders ...*PorterInstanceCreate) *PorterInstanceCreateBulk {
	return &PorterInstanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PorterInstanceClient) MapCreateBulk(slice any, setFunc func(*PorterInstanceCreate, int)) *PorterInstanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PorterInstanceCreateBulk{err: fmt.Errorf("calling to PorterInstanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PorterInstanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PorterInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PorterInstance.
func (c *PorterInstanceClient) Update() *PorterInstanceUpdate {
	mutation := newPorterInstanceMutation(c.config, OpUpdate)
	return &PorterInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PorterInstanceClient) UpdateOne(pi *PorterInstance) *PorterInstanceUpdateOne {
	mutation := newPorterInstanceMutation(c.config, OpUpdateOne, withPorterInstance(pi))
	return &PorterInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PorterInstanceClient) UpdateOneID(id model.InternalID) *PorterInstanceUpdateOne {
	mutation := newPorterInstanceMutation(c.config, OpUpdateOne, withPorterInstanceID(id))
	return &PorterInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PorterInstance.
func (c *PorterInstanceClient) Delete() *PorterInstanceDelete {
	mutation := newPorterInstanceMutation(c.config, OpDelete)
	return &PorterInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PorterInstanceClient) DeleteOne(pi *PorterInstance) *PorterInstanceDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PorterInstanceClient) DeleteOneID(id model.InternalID) *PorterInstanceDeleteOne {
	builder := c.Delete().Where(porterinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PorterInstanceDeleteOne{builder}
}

// Query returns a query builder for PorterInstance.
func (c *PorterInstanceClient) Query() *PorterInstanceQuery {
	return &PorterInstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePorterInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a PorterInstance entity by its id.
func (c *PorterInstanceClient) Get(ctx context.Context, id model.InternalID) (*PorterInstance, error) {
	return c.Query().Where(porterinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PorterInstanceClient) GetX(ctx context.Context, id model.InternalID) *PorterInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PorterInstanceClient) Hooks() []Hook {
	return c.hooks.PorterInstance
}

// Interceptors returns the client interceptors.
func (c *PorterInstanceClient) Interceptors() []Interceptor {
	return c.inters.PorterInstance
}

func (c *PorterInstanceClient) mutate(ctx context.Context, m *PorterInstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PorterInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PorterInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PorterInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PorterInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PorterInstance mutation op: %q", m.Op())
	}
}

// SystemNotificationClient is a client for the SystemNotification schema.
type SystemNotificationClient struct {
	config
}

// NewSystemNotificationClient returns a client for the SystemNotification from the given config.
func NewSystemNotificationClient(c config) *SystemNotificationClient {
	return &SystemNotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systemnotification.Hooks(f(g(h())))`.
func (c *SystemNotificationClient) Use(hooks ...Hook) {
	c.hooks.SystemNotification = append(c.hooks.SystemNotification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `systemnotification.Intercept(f(g(h())))`.
func (c *SystemNotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.SystemNotification = append(c.inters.SystemNotification, interceptors...)
}

// Create returns a builder for creating a SystemNotification entity.
func (c *SystemNotificationClient) Create() *SystemNotificationCreate {
	mutation := newSystemNotificationMutation(c.config, OpCreate)
	return &SystemNotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SystemNotification entities.
func (c *SystemNotificationClient) CreateBulk(builders ...*SystemNotificationCreate) *SystemNotificationCreateBulk {
	return &SystemNotificationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SystemNotificationClient) MapCreateBulk(slice any, setFunc func(*SystemNotificationCreate, int)) *SystemNotificationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SystemNotificationCreateBulk{err: fmt.Errorf("calling to SystemNotificationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SystemNotificationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SystemNotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SystemNotification.
func (c *SystemNotificationClient) Update() *SystemNotificationUpdate {
	mutation := newSystemNotificationMutation(c.config, OpUpdate)
	return &SystemNotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SystemNotificationClient) UpdateOne(sn *SystemNotification) *SystemNotificationUpdateOne {
	mutation := newSystemNotificationMutation(c.config, OpUpdateOne, withSystemNotification(sn))
	return &SystemNotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SystemNotificationClient) UpdateOneID(id model.InternalID) *SystemNotificationUpdateOne {
	mutation := newSystemNotificationMutation(c.config, OpUpdateOne, withSystemNotificationID(id))
	return &SystemNotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SystemNotification.
func (c *SystemNotificationClient) Delete() *SystemNotificationDelete {
	mutation := newSystemNotificationMutation(c.config, OpDelete)
	return &SystemNotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SystemNotificationClient) DeleteOne(sn *SystemNotification) *SystemNotificationDeleteOne {
	return c.DeleteOneID(sn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SystemNotificationClient) DeleteOneID(id model.InternalID) *SystemNotificationDeleteOne {
	builder := c.Delete().Where(systemnotification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SystemNotificationDeleteOne{builder}
}

// Query returns a query builder for SystemNotification.
func (c *SystemNotificationClient) Query() *SystemNotificationQuery {
	return &SystemNotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSystemNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a SystemNotification entity by its id.
func (c *SystemNotificationClient) Get(ctx context.Context, id model.InternalID) (*SystemNotification, error) {
	return c.Query().Where(systemnotification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SystemNotificationClient) GetX(ctx context.Context, id model.InternalID) *SystemNotification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SystemNotificationClient) Hooks() []Hook {
	return c.hooks.SystemNotification
}

// Interceptors returns the client interceptors.
func (c *SystemNotificationClient) Interceptors() []Interceptor {
	return c.inters.SystemNotification
}

func (c *SystemNotificationClient) mutate(ctx context.Context, m *SystemNotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SystemNotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SystemNotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SystemNotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SystemNotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SystemNotification mutation op: %q", m.Op())
	}
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tag.Intercept(f(g(h())))`.
func (c *TagClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tag = append(c.inters.Tag, interceptors...)
}

// Create returns a builder for creating a Tag entity.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TagClient) MapCreateBulk(slice any, setFunc func(*TagCreate, int)) *TagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TagCreateBulk{err: fmt.Errorf("calling to TagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id model.InternalID) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TagClient) DeleteOneID(id model.InternalID) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTag},
		inters: c.Interceptors(),
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id model.InternalID) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id model.InternalID) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Tag.
func (c *TagClient) QueryOwner(t *Tag) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tag.OwnerTable, tag.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// Interceptors returns the client interceptors.
func (c *TagClient) Interceptors() []Interceptor {
	return c.inters.Tag
}

func (c *TagClient) mutate(ctx context.Context, m *TagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tag mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id model.InternalID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id model.InternalID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id model.InternalID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id model.InternalID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBindAccount queries the bind_account edge of a User.
func (c *UserClient) QueryBindAccount(u *User) *AccountQuery {
	query := (&AccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BindAccountTable, user.BindAccountColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPurchasedApp queries the purchased_app edge of a User.
func (c *UserClient) QueryPurchasedApp(u *User) *AppInfoQuery {
	query := (&AppInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(appinfo.Table, appinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.PurchasedAppTable, user.PurchasedAppPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApp queries the app edge of a User.
func (c *UserClient) QueryApp(u *User) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AppTable, user.AppColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppInst queries the app_inst edge of a User.
func (c *UserClient) QueryAppInst(u *User) *AppInstQuery {
	query := (&AppInstClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(appinst.Table, appinst.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AppInstTable, user.AppInstColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedConfig queries the feed_config edge of a User.
func (c *UserClient) QueryFeedConfig(u *User) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FeedConfigTable, user.FeedConfigColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedActionSet queries the feed_action_set edge of a User.
func (c *UserClient) QueryFeedActionSet(u *User) *FeedActionSetQuery {
	query := (&FeedActionSetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(feedactionset.Table, feedactionset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FeedActionSetTable, user.FeedActionSetColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedItemCollection queries the feed_item_collection edge of a User.
func (c *UserClient) QueryFeedItemCollection(u *User) *FeedItemCollectionQuery {
	query := (&FeedItemCollectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(feeditemcollection.Table, feeditemcollection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FeedItemCollectionTable, user.FeedItemCollectionColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifySource queries the notify_source edge of a User.
func (c *UserClient) QueryNotifySource(u *User) *NotifySourceQuery {
	query := (&NotifySourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotifySourceTable, user.NotifySourceColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyTarget queries the notify_target edge of a User.
func (c *UserClient) QueryNotifyTarget(u *User) *NotifyTargetQuery {
	query := (&NotifyTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notifytarget.Table, notifytarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotifyTargetTable, user.NotifyTargetColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlow queries the notify_flow edge of a User.
func (c *UserClient) QueryNotifyFlow(u *User) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotifyFlowTable, user.NotifyFlowColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImage queries the image edge of a User.
func (c *UserClient) QueryImage(u *User) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ImageTable, user.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a User.
func (c *UserClient) QueryFile(u *User) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FileTable, user.FileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeviceInfo queries the device_info edge of a User.
func (c *UserClient) QueryDeviceInfo(u *User) *DeviceInfoQuery {
	query := (&DeviceInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(deviceinfo.Table, deviceinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.DeviceInfoTable, user.DeviceInfoPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTag queries the tag edge of a User.
func (c *UserClient) QueryTag(u *User) *TagQuery {
	query := (&TagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TagTable, user.TagColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPorterContext queries the porter_context edge of a User.
func (c *UserClient) QueryPorterContext(u *User) *PorterContextQuery {
	query := (&PorterContextClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(portercontext.Table, portercontext.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PorterContextTable, user.PorterContextColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a User.
func (c *UserClient) QueryCreator(u *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.CreatorTable, user.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedUser queries the created_user edge of a User.
func (c *UserClient) QueryCreatedUser(u *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedUserTable, user.CreatedUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserDevice queries the user_device edge of a User.
func (c *UserClient) QueryUserDevice(u *User) *UserDeviceQuery {
	query := (&UserDeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userdevice.Table, userdevice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserDeviceTable, user.UserDeviceColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserDeviceClient is a client for the UserDevice schema.
type UserDeviceClient struct {
	config
}

// NewUserDeviceClient returns a client for the UserDevice from the given config.
func NewUserDeviceClient(c config) *UserDeviceClient {
	return &UserDeviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userdevice.Hooks(f(g(h())))`.
func (c *UserDeviceClient) Use(hooks ...Hook) {
	c.hooks.UserDevice = append(c.hooks.UserDevice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userdevice.Intercept(f(g(h())))`.
func (c *UserDeviceClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserDevice = append(c.inters.UserDevice, interceptors...)
}

// Create returns a builder for creating a UserDevice entity.
func (c *UserDeviceClient) Create() *UserDeviceCreate {
	mutation := newUserDeviceMutation(c.config, OpCreate)
	return &UserDeviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserDevice entities.
func (c *UserDeviceClient) CreateBulk(builders ...*UserDeviceCreate) *UserDeviceCreateBulk {
	return &UserDeviceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserDeviceClient) MapCreateBulk(slice any, setFunc func(*UserDeviceCreate, int)) *UserDeviceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserDeviceCreateBulk{err: fmt.Errorf("calling to UserDeviceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserDeviceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserDeviceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserDevice.
func (c *UserDeviceClient) Update() *UserDeviceUpdate {
	mutation := newUserDeviceMutation(c.config, OpUpdate)
	return &UserDeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserDeviceClient) UpdateOne(ud *UserDevice) *UserDeviceUpdateOne {
	mutation := newUserDeviceMutation(c.config, OpUpdateOne, withUserDevice(ud))
	return &UserDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserDeviceClient) UpdateOneID(id int) *UserDeviceUpdateOne {
	mutation := newUserDeviceMutation(c.config, OpUpdateOne, withUserDeviceID(id))
	return &UserDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserDevice.
func (c *UserDeviceClient) Delete() *UserDeviceDelete {
	mutation := newUserDeviceMutation(c.config, OpDelete)
	return &UserDeviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserDeviceClient) DeleteOne(ud *UserDevice) *UserDeviceDeleteOne {
	return c.DeleteOneID(ud.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserDeviceClient) DeleteOneID(id int) *UserDeviceDeleteOne {
	builder := c.Delete().Where(userdevice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeviceDeleteOne{builder}
}

// Query returns a query builder for UserDevice.
func (c *UserDeviceClient) Query() *UserDeviceQuery {
	return &UserDeviceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserDevice},
		inters: c.Interceptors(),
	}
}

// Get returns a UserDevice entity by its id.
func (c *UserDeviceClient) Get(ctx context.Context, id int) (*UserDevice, error) {
	return c.Query().Where(userdevice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserDeviceClient) GetX(ctx context.Context, id int) *UserDevice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeviceInfo queries the device_info edge of a UserDevice.
func (c *UserDeviceClient) QueryDeviceInfo(ud *UserDevice) *DeviceInfoQuery {
	query := (&DeviceInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ud.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userdevice.Table, userdevice.FieldID, id),
			sqlgraph.To(deviceinfo.Table, deviceinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userdevice.DeviceInfoTable, userdevice.DeviceInfoColumn),
		)
		fromV = sqlgraph.Neighbors(ud.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UserDevice.
func (c *UserDeviceClient) QueryUser(ud *UserDevice) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ud.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userdevice.Table, userdevice.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userdevice.UserTable, userdevice.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ud.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserDeviceClient) Hooks() []Hook {
	return c.hooks.UserDevice
}

// Interceptors returns the client interceptors.
func (c *UserDeviceClient) Interceptors() []Interceptor {
	return c.inters.UserDevice
}

func (c *UserDeviceClient) mutate(ctx context.Context, m *UserDeviceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserDeviceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserDeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDeviceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserDevice mutation op: %q", m.Op())
	}
}

// UserSessionClient is a client for the UserSession schema.
type UserSessionClient struct {
	config
}

// NewUserSessionClient returns a client for the UserSession from the given config.
func NewUserSessionClient(c config) *UserSessionClient {
	return &UserSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersession.Hooks(f(g(h())))`.
func (c *UserSessionClient) Use(hooks ...Hook) {
	c.hooks.UserSession = append(c.hooks.UserSession, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usersession.Intercept(f(g(h())))`.
func (c *UserSessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSession = append(c.inters.UserSession, interceptors...)
}

// Create returns a builder for creating a UserSession entity.
func (c *UserSessionClient) Create() *UserSessionCreate {
	mutation := newUserSessionMutation(c.config, OpCreate)
	return &UserSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSession entities.
func (c *UserSessionClient) CreateBulk(builders ...*UserSessionCreate) *UserSessionCreateBulk {
	return &UserSessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserSessionClient) MapCreateBulk(slice any, setFunc func(*UserSessionCreate, int)) *UserSessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserSessionCreateBulk{err: fmt.Errorf("calling to UserSessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserSessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSession.
func (c *UserSessionClient) Update() *UserSessionUpdate {
	mutation := newUserSessionMutation(c.config, OpUpdate)
	return &UserSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSessionClient) UpdateOne(us *UserSession) *UserSessionUpdateOne {
	mutation := newUserSessionMutation(c.config, OpUpdateOne, withUserSession(us))
	return &UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSessionClient) UpdateOneID(id model.InternalID) *UserSessionUpdateOne {
	mutation := newUserSessionMutation(c.config, OpUpdateOne, withUserSessionID(id))
	return &UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSession.
func (c *UserSessionClient) Delete() *UserSessionDelete {
	mutation := newUserSessionMutation(c.config, OpDelete)
	return &UserSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSessionClient) DeleteOne(us *UserSession) *UserSessionDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSessionClient) DeleteOneID(id model.InternalID) *UserSessionDeleteOne {
	builder := c.Delete().Where(usersession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSessionDeleteOne{builder}
}

// Query returns a query builder for UserSession.
func (c *UserSessionClient) Query() *UserSessionQuery {
	return &UserSessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSession},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSession entity by its id.
func (c *UserSessionClient) Get(ctx context.Context, id model.InternalID) (*UserSession, error) {
	return c.Query().Where(usersession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSessionClient) GetX(ctx context.Context, id model.InternalID) *UserSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeviceInfo queries the device_info edge of a UserSession.
func (c *UserSessionClient) QueryDeviceInfo(us *UserSession) *DeviceInfoQuery {
	query := (&DeviceInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersession.Table, usersession.FieldID, id),
			sqlgraph.To(deviceinfo.Table, deviceinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usersession.DeviceInfoTable, usersession.DeviceInfoColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserSessionClient) Hooks() []Hook {
	return c.hooks.UserSession
}

// Interceptors returns the client interceptors.
func (c *UserSessionClient) Interceptors() []Interceptor {
	return c.inters.UserSession
}

func (c *UserSessionClient) mutate(ctx context.Context, m *UserSessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserSession mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Account, App, AppBinary, AppInfo, AppInst, AppInstRunTime, DeviceInfo, Feed,
		FeedActionSet, FeedConfig, FeedConfigAction, FeedItem, FeedItemCollection,
		File, Image, NotifyFlow, NotifyFlowSource, NotifyFlowTarget, NotifySource,
		NotifyTarget, PorterContext, PorterInstance, SystemNotification, Tag, User,
		UserDevice, UserSession []ent.Hook
	}
	inters struct {
		Account, App, AppBinary, AppInfo, AppInst, AppInstRunTime, DeviceInfo, Feed,
		FeedActionSet, FeedConfig, FeedConfigAction, FeedItem, FeedItemCollection,
		File, Image, NotifyFlow, NotifyFlowSource, NotifyFlowTarget, NotifySource,
		NotifyTarget, PorterContext, PorterInstance, SystemNotification, Tag, User,
		UserDevice, UserSession []ent.Interceptor
	}
)
