// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/tuihub/librarian/internal/data/internal/ent/migrate"
	"github.com/tuihub/librarian/internal/model"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tuihub/librarian/internal/data/internal/ent/account"
	"github.com/tuihub/librarian/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/internal/data/internal/ent/appappcategory"
	"github.com/tuihub/librarian/internal/data/internal/ent/appcategory"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinfo"
	"github.com/tuihub/librarian/internal/data/internal/ent/appruntime"
	"github.com/tuihub/librarian/internal/data/internal/ent/device"
	"github.com/tuihub/librarian/internal/data/internal/ent/feed"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedactionset"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfigaction"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditem"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditemcollection"
	"github.com/tuihub/librarian/internal/data/internal/ent/file"
	"github.com/tuihub/librarian/internal/data/internal/ent/image"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflow"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflowsource"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflowtarget"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifysource"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifytarget"
	"github.com/tuihub/librarian/internal/data/internal/ent/portercontext"
	"github.com/tuihub/librarian/internal/data/internal/ent/porterinstance"
	"github.com/tuihub/librarian/internal/data/internal/ent/session"
	"github.com/tuihub/librarian/internal/data/internal/ent/storeapp"
	"github.com/tuihub/librarian/internal/data/internal/ent/storeappbinary"
	"github.com/tuihub/librarian/internal/data/internal/ent/systemnotification"
	"github.com/tuihub/librarian/internal/data/internal/ent/tag"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// App is the client for interacting with the App builders.
	App *AppClient
	// AppAppCategory is the client for interacting with the AppAppCategory builders.
	AppAppCategory *AppAppCategoryClient
	// AppCategory is the client for interacting with the AppCategory builders.
	AppCategory *AppCategoryClient
	// AppInfo is the client for interacting with the AppInfo builders.
	AppInfo *AppInfoClient
	// AppRunTime is the client for interacting with the AppRunTime builders.
	AppRunTime *AppRunTimeClient
	// Device is the client for interacting with the Device builders.
	Device *DeviceClient
	// Feed is the client for interacting with the Feed builders.
	Feed *FeedClient
	// FeedActionSet is the client for interacting with the FeedActionSet builders.
	FeedActionSet *FeedActionSetClient
	// FeedConfig is the client for interacting with the FeedConfig builders.
	FeedConfig *FeedConfigClient
	// FeedConfigAction is the client for interacting with the FeedConfigAction builders.
	FeedConfigAction *FeedConfigActionClient
	// FeedItem is the client for interacting with the FeedItem builders.
	FeedItem *FeedItemClient
	// FeedItemCollection is the client for interacting with the FeedItemCollection builders.
	FeedItemCollection *FeedItemCollectionClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// Image is the client for interacting with the Image builders.
	Image *ImageClient
	// NotifyFlow is the client for interacting with the NotifyFlow builders.
	NotifyFlow *NotifyFlowClient
	// NotifyFlowSource is the client for interacting with the NotifyFlowSource builders.
	NotifyFlowSource *NotifyFlowSourceClient
	// NotifyFlowTarget is the client for interacting with the NotifyFlowTarget builders.
	NotifyFlowTarget *NotifyFlowTargetClient
	// NotifySource is the client for interacting with the NotifySource builders.
	NotifySource *NotifySourceClient
	// NotifyTarget is the client for interacting with the NotifyTarget builders.
	NotifyTarget *NotifyTargetClient
	// PorterContext is the client for interacting with the PorterContext builders.
	PorterContext *PorterContextClient
	// PorterInstance is the client for interacting with the PorterInstance builders.
	PorterInstance *PorterInstanceClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// StoreApp is the client for interacting with the StoreApp builders.
	StoreApp *StoreAppClient
	// StoreAppBinary is the client for interacting with the StoreAppBinary builders.
	StoreAppBinary *StoreAppBinaryClient
	// SystemNotification is the client for interacting with the SystemNotification builders.
	SystemNotification *SystemNotificationClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Account = NewAccountClient(c.config)
	c.App = NewAppClient(c.config)
	c.AppAppCategory = NewAppAppCategoryClient(c.config)
	c.AppCategory = NewAppCategoryClient(c.config)
	c.AppInfo = NewAppInfoClient(c.config)
	c.AppRunTime = NewAppRunTimeClient(c.config)
	c.Device = NewDeviceClient(c.config)
	c.Feed = NewFeedClient(c.config)
	c.FeedActionSet = NewFeedActionSetClient(c.config)
	c.FeedConfig = NewFeedConfigClient(c.config)
	c.FeedConfigAction = NewFeedConfigActionClient(c.config)
	c.FeedItem = NewFeedItemClient(c.config)
	c.FeedItemCollection = NewFeedItemCollectionClient(c.config)
	c.File = NewFileClient(c.config)
	c.Image = NewImageClient(c.config)
	c.NotifyFlow = NewNotifyFlowClient(c.config)
	c.NotifyFlowSource = NewNotifyFlowSourceClient(c.config)
	c.NotifyFlowTarget = NewNotifyFlowTargetClient(c.config)
	c.NotifySource = NewNotifySourceClient(c.config)
	c.NotifyTarget = NewNotifyTargetClient(c.config)
	c.PorterContext = NewPorterContextClient(c.config)
	c.PorterInstance = NewPorterInstanceClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.StoreApp = NewStoreAppClient(c.config)
	c.StoreAppBinary = NewStoreAppBinaryClient(c.config)
	c.SystemNotification = NewSystemNotificationClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Account:            NewAccountClient(cfg),
		App:                NewAppClient(cfg),
		AppAppCategory:     NewAppAppCategoryClient(cfg),
		AppCategory:        NewAppCategoryClient(cfg),
		AppInfo:            NewAppInfoClient(cfg),
		AppRunTime:         NewAppRunTimeClient(cfg),
		Device:             NewDeviceClient(cfg),
		Feed:               NewFeedClient(cfg),
		FeedActionSet:      NewFeedActionSetClient(cfg),
		FeedConfig:         NewFeedConfigClient(cfg),
		FeedConfigAction:   NewFeedConfigActionClient(cfg),
		FeedItem:           NewFeedItemClient(cfg),
		FeedItemCollection: NewFeedItemCollectionClient(cfg),
		File:               NewFileClient(cfg),
		Image:              NewImageClient(cfg),
		NotifyFlow:         NewNotifyFlowClient(cfg),
		NotifyFlowSource:   NewNotifyFlowSourceClient(cfg),
		NotifyFlowTarget:   NewNotifyFlowTargetClient(cfg),
		NotifySource:       NewNotifySourceClient(cfg),
		NotifyTarget:       NewNotifyTargetClient(cfg),
		PorterContext:      NewPorterContextClient(cfg),
		PorterInstance:     NewPorterInstanceClient(cfg),
		Session:            NewSessionClient(cfg),
		StoreApp:           NewStoreAppClient(cfg),
		StoreAppBinary:     NewStoreAppBinaryClient(cfg),
		SystemNotification: NewSystemNotificationClient(cfg),
		Tag:                NewTagClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Account:            NewAccountClient(cfg),
		App:                NewAppClient(cfg),
		AppAppCategory:     NewAppAppCategoryClient(cfg),
		AppCategory:        NewAppCategoryClient(cfg),
		AppInfo:            NewAppInfoClient(cfg),
		AppRunTime:         NewAppRunTimeClient(cfg),
		Device:             NewDeviceClient(cfg),
		Feed:               NewFeedClient(cfg),
		FeedActionSet:      NewFeedActionSetClient(cfg),
		FeedConfig:         NewFeedConfigClient(cfg),
		FeedConfigAction:   NewFeedConfigActionClient(cfg),
		FeedItem:           NewFeedItemClient(cfg),
		FeedItemCollection: NewFeedItemCollectionClient(cfg),
		File:               NewFileClient(cfg),
		Image:              NewImageClient(cfg),
		NotifyFlow:         NewNotifyFlowClient(cfg),
		NotifyFlowSource:   NewNotifyFlowSourceClient(cfg),
		NotifyFlowTarget:   NewNotifyFlowTargetClient(cfg),
		NotifySource:       NewNotifySourceClient(cfg),
		NotifyTarget:       NewNotifyTargetClient(cfg),
		PorterContext:      NewPorterContextClient(cfg),
		PorterInstance:     NewPorterInstanceClient(cfg),
		Session:            NewSessionClient(cfg),
		StoreApp:           NewStoreAppClient(cfg),
		StoreAppBinary:     NewStoreAppBinaryClient(cfg),
		SystemNotification: NewSystemNotificationClient(cfg),
		Tag:                NewTagClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Account.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Account, c.App, c.AppAppCategory, c.AppCategory, c.AppInfo, c.AppRunTime,
		c.Device, c.Feed, c.FeedActionSet, c.FeedConfig, c.FeedConfigAction,
		c.FeedItem, c.FeedItemCollection, c.File, c.Image, c.NotifyFlow,
		c.NotifyFlowSource, c.NotifyFlowTarget, c.NotifySource, c.NotifyTarget,
		c.PorterContext, c.PorterInstance, c.Session, c.StoreApp, c.StoreAppBinary,
		c.SystemNotification, c.Tag, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Account, c.App, c.AppAppCategory, c.AppCategory, c.AppInfo, c.AppRunTime,
		c.Device, c.Feed, c.FeedActionSet, c.FeedConfig, c.FeedConfigAction,
		c.FeedItem, c.FeedItemCollection, c.File, c.Image, c.NotifyFlow,
		c.NotifyFlowSource, c.NotifyFlowTarget, c.NotifySource, c.NotifyTarget,
		c.PorterContext, c.PorterInstance, c.Session, c.StoreApp, c.StoreAppBinary,
		c.SystemNotification, c.Tag, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccountMutation:
		return c.Account.mutate(ctx, m)
	case *AppMutation:
		return c.App.mutate(ctx, m)
	case *AppAppCategoryMutation:
		return c.AppAppCategory.mutate(ctx, m)
	case *AppCategoryMutation:
		return c.AppCategory.mutate(ctx, m)
	case *AppInfoMutation:
		return c.AppInfo.mutate(ctx, m)
	case *AppRunTimeMutation:
		return c.AppRunTime.mutate(ctx, m)
	case *DeviceMutation:
		return c.Device.mutate(ctx, m)
	case *FeedMutation:
		return c.Feed.mutate(ctx, m)
	case *FeedActionSetMutation:
		return c.FeedActionSet.mutate(ctx, m)
	case *FeedConfigMutation:
		return c.FeedConfig.mutate(ctx, m)
	case *FeedConfigActionMutation:
		return c.FeedConfigAction.mutate(ctx, m)
	case *FeedItemMutation:
		return c.FeedItem.mutate(ctx, m)
	case *FeedItemCollectionMutation:
		return c.FeedItemCollection.mutate(ctx, m)
	case *FileMutation:
		return c.File.mutate(ctx, m)
	case *ImageMutation:
		return c.Image.mutate(ctx, m)
	case *NotifyFlowMutation:
		return c.NotifyFlow.mutate(ctx, m)
	case *NotifyFlowSourceMutation:
		return c.NotifyFlowSource.mutate(ctx, m)
	case *NotifyFlowTargetMutation:
		return c.NotifyFlowTarget.mutate(ctx, m)
	case *NotifySourceMutation:
		return c.NotifySource.mutate(ctx, m)
	case *NotifyTargetMutation:
		return c.NotifyTarget.mutate(ctx, m)
	case *PorterContextMutation:
		return c.PorterContext.mutate(ctx, m)
	case *PorterInstanceMutation:
		return c.PorterInstance.mutate(ctx, m)
	case *SessionMutation:
		return c.Session.mutate(ctx, m)
	case *StoreAppMutation:
		return c.StoreApp.mutate(ctx, m)
	case *StoreAppBinaryMutation:
		return c.StoreAppBinary.mutate(ctx, m)
	case *SystemNotificationMutation:
		return c.SystemNotification.mutate(ctx, m)
	case *TagMutation:
		return c.Tag.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccountClient is a client for the Account schema.
type AccountClient struct {
	config
}

// NewAccountClient returns a client for the Account from the given config.
func NewAccountClient(c config) *AccountClient {
	return &AccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `account.Hooks(f(g(h())))`.
func (c *AccountClient) Use(hooks ...Hook) {
	c.hooks.Account = append(c.hooks.Account, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `account.Intercept(f(g(h())))`.
func (c *AccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.Account = append(c.inters.Account, interceptors...)
}

// Create returns a builder for creating a Account entity.
func (c *AccountClient) Create() *AccountCreate {
	mutation := newAccountMutation(c.config, OpCreate)
	return &AccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Account entities.
func (c *AccountClient) CreateBulk(builders ...*AccountCreate) *AccountCreateBulk {
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccountClient) MapCreateBulk(slice any, setFunc func(*AccountCreate, int)) *AccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccountCreateBulk{err: fmt.Errorf("calling to AccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Account.
func (c *AccountClient) Update() *AccountUpdate {
	mutation := newAccountMutation(c.config, OpUpdate)
	return &AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountClient) UpdateOne(a *Account) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccount(a))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountClient) UpdateOneID(id model.InternalID) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccountID(id))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Account.
func (c *AccountClient) Delete() *AccountDelete {
	mutation := newAccountMutation(c.config, OpDelete)
	return &AccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountClient) DeleteOne(a *Account) *AccountDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountClient) DeleteOneID(id model.InternalID) *AccountDeleteOne {
	builder := c.Delete().Where(account.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDeleteOne{builder}
}

// Query returns a query builder for Account.
func (c *AccountClient) Query() *AccountQuery {
	return &AccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a Account entity by its id.
func (c *AccountClient) Get(ctx context.Context, id model.InternalID) (*Account, error) {
	return c.Query().Where(account.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountClient) GetX(ctx context.Context, id model.InternalID) *Account {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBoundUser queries the bound_user edge of a Account.
func (c *AccountClient) QueryBoundUser(a *Account) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, account.BoundUserTable, account.BoundUserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountClient) Hooks() []Hook {
	return c.hooks.Account
}

// Interceptors returns the client interceptors.
func (c *AccountClient) Interceptors() []Interceptor {
	return c.inters.Account
}

func (c *AccountClient) mutate(ctx context.Context, m *AccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Account mutation op: %q", m.Op())
	}
}

// AppClient is a client for the App schema.
type AppClient struct {
	config
}

// NewAppClient returns a client for the App from the given config.
func NewAppClient(c config) *AppClient {
	return &AppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `app.Hooks(f(g(h())))`.
func (c *AppClient) Use(hooks ...Hook) {
	c.hooks.App = append(c.hooks.App, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `app.Intercept(f(g(h())))`.
func (c *AppClient) Intercept(interceptors ...Interceptor) {
	c.inters.App = append(c.inters.App, interceptors...)
}

// Create returns a builder for creating a App entity.
func (c *AppClient) Create() *AppCreate {
	mutation := newAppMutation(c.config, OpCreate)
	return &AppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of App entities.
func (c *AppClient) CreateBulk(builders ...*AppCreate) *AppCreateBulk {
	return &AppCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppClient) MapCreateBulk(slice any, setFunc func(*AppCreate, int)) *AppCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppCreateBulk{err: fmt.Errorf("calling to AppClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for App.
func (c *AppClient) Update() *AppUpdate {
	mutation := newAppMutation(c.config, OpUpdate)
	return &AppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppClient) UpdateOne(a *App) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withApp(a))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppClient) UpdateOneID(id model.InternalID) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withAppID(id))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for App.
func (c *AppClient) Delete() *AppDelete {
	mutation := newAppMutation(c.config, OpDelete)
	return &AppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppClient) DeleteOne(a *App) *AppDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppClient) DeleteOneID(id model.InternalID) *AppDeleteOne {
	builder := c.Delete().Where(app.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDeleteOne{builder}
}

// Query returns a query builder for App.
func (c *AppClient) Query() *AppQuery {
	return &AppQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApp},
		inters: c.Interceptors(),
	}
}

// Get returns a App entity by its id.
func (c *AppClient) Get(ctx context.Context, id model.InternalID) (*App, error) {
	return c.Query().Where(app.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppClient) GetX(ctx context.Context, id model.InternalID) *App {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a App.
func (c *AppClient) QueryUser(a *App) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, app.UserTable, app.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevice queries the device edge of a App.
func (c *AppClient) QueryDevice(a *App) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, app.DeviceTable, app.DeviceColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppRunTime queries the app_run_time edge of a App.
func (c *AppClient) QueryAppRunTime(a *App) *AppRunTimeQuery {
	query := (&AppRunTimeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(appruntime.Table, appruntime.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.AppRunTimeTable, app.AppRunTimeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppCategory queries the app_category edge of a App.
func (c *AppClient) QueryAppCategory(a *App) *AppCategoryQuery {
	query := (&AppCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(appcategory.Table, appcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, app.AppCategoryTable, app.AppCategoryPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppAppCategory queries the app_app_category edge of a App.
func (c *AppClient) QueryAppAppCategory(a *App) *AppAppCategoryQuery {
	query := (&AppAppCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(appappcategory.Table, appappcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, app.AppAppCategoryTable, app.AppAppCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppClient) Hooks() []Hook {
	return c.hooks.App
}

// Interceptors returns the client interceptors.
func (c *AppClient) Interceptors() []Interceptor {
	return c.inters.App
}

func (c *AppClient) mutate(ctx context.Context, m *AppMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown App mutation op: %q", m.Op())
	}
}

// AppAppCategoryClient is a client for the AppAppCategory schema.
type AppAppCategoryClient struct {
	config
}

// NewAppAppCategoryClient returns a client for the AppAppCategory from the given config.
func NewAppAppCategoryClient(c config) *AppAppCategoryClient {
	return &AppAppCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appappcategory.Hooks(f(g(h())))`.
func (c *AppAppCategoryClient) Use(hooks ...Hook) {
	c.hooks.AppAppCategory = append(c.hooks.AppAppCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appappcategory.Intercept(f(g(h())))`.
func (c *AppAppCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppAppCategory = append(c.inters.AppAppCategory, interceptors...)
}

// Create returns a builder for creating a AppAppCategory entity.
func (c *AppAppCategoryClient) Create() *AppAppCategoryCreate {
	mutation := newAppAppCategoryMutation(c.config, OpCreate)
	return &AppAppCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppAppCategory entities.
func (c *AppAppCategoryClient) CreateBulk(builders ...*AppAppCategoryCreate) *AppAppCategoryCreateBulk {
	return &AppAppCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppAppCategoryClient) MapCreateBulk(slice any, setFunc func(*AppAppCategoryCreate, int)) *AppAppCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppAppCategoryCreateBulk{err: fmt.Errorf("calling to AppAppCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppAppCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppAppCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppAppCategory.
func (c *AppAppCategoryClient) Update() *AppAppCategoryUpdate {
	mutation := newAppAppCategoryMutation(c.config, OpUpdate)
	return &AppAppCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppAppCategoryClient) UpdateOne(aac *AppAppCategory) *AppAppCategoryUpdateOne {
	mutation := newAppAppCategoryMutation(c.config, OpUpdateOne, withAppAppCategory(aac))
	return &AppAppCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppAppCategoryClient) UpdateOneID(id int) *AppAppCategoryUpdateOne {
	mutation := newAppAppCategoryMutation(c.config, OpUpdateOne, withAppAppCategoryID(id))
	return &AppAppCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppAppCategory.
func (c *AppAppCategoryClient) Delete() *AppAppCategoryDelete {
	mutation := newAppAppCategoryMutation(c.config, OpDelete)
	return &AppAppCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppAppCategoryClient) DeleteOne(aac *AppAppCategory) *AppAppCategoryDeleteOne {
	return c.DeleteOneID(aac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppAppCategoryClient) DeleteOneID(id int) *AppAppCategoryDeleteOne {
	builder := c.Delete().Where(appappcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppAppCategoryDeleteOne{builder}
}

// Query returns a query builder for AppAppCategory.
func (c *AppAppCategoryClient) Query() *AppAppCategoryQuery {
	return &AppAppCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppAppCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a AppAppCategory entity by its id.
func (c *AppAppCategoryClient) Get(ctx context.Context, id int) (*AppAppCategory, error) {
	return c.Query().Where(appappcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppAppCategoryClient) GetX(ctx context.Context, id int) *AppAppCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppCategory queries the app_category edge of a AppAppCategory.
func (c *AppAppCategoryClient) QueryAppCategory(aac *AppAppCategory) *AppCategoryQuery {
	query := (&AppCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appappcategory.Table, appappcategory.FieldID, id),
			sqlgraph.To(appcategory.Table, appcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, appappcategory.AppCategoryTable, appappcategory.AppCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(aac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApp queries the app edge of a AppAppCategory.
func (c *AppAppCategoryClient) QueryApp(aac *AppAppCategory) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appappcategory.Table, appappcategory.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, appappcategory.AppTable, appappcategory.AppColumn),
		)
		fromV = sqlgraph.Neighbors(aac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppAppCategoryClient) Hooks() []Hook {
	return c.hooks.AppAppCategory
}

// Interceptors returns the client interceptors.
func (c *AppAppCategoryClient) Interceptors() []Interceptor {
	return c.inters.AppAppCategory
}

func (c *AppAppCategoryClient) mutate(ctx context.Context, m *AppAppCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppAppCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppAppCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppAppCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppAppCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppAppCategory mutation op: %q", m.Op())
	}
}

// AppCategoryClient is a client for the AppCategory schema.
type AppCategoryClient struct {
	config
}

// NewAppCategoryClient returns a client for the AppCategory from the given config.
func NewAppCategoryClient(c config) *AppCategoryClient {
	return &AppCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appcategory.Hooks(f(g(h())))`.
func (c *AppCategoryClient) Use(hooks ...Hook) {
	c.hooks.AppCategory = append(c.hooks.AppCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appcategory.Intercept(f(g(h())))`.
func (c *AppCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppCategory = append(c.inters.AppCategory, interceptors...)
}

// Create returns a builder for creating a AppCategory entity.
func (c *AppCategoryClient) Create() *AppCategoryCreate {
	mutation := newAppCategoryMutation(c.config, OpCreate)
	return &AppCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppCategory entities.
func (c *AppCategoryClient) CreateBulk(builders ...*AppCategoryCreate) *AppCategoryCreateBulk {
	return &AppCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppCategoryClient) MapCreateBulk(slice any, setFunc func(*AppCategoryCreate, int)) *AppCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppCategoryCreateBulk{err: fmt.Errorf("calling to AppCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppCategory.
func (c *AppCategoryClient) Update() *AppCategoryUpdate {
	mutation := newAppCategoryMutation(c.config, OpUpdate)
	return &AppCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppCategoryClient) UpdateOne(ac *AppCategory) *AppCategoryUpdateOne {
	mutation := newAppCategoryMutation(c.config, OpUpdateOne, withAppCategory(ac))
	return &AppCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppCategoryClient) UpdateOneID(id model.InternalID) *AppCategoryUpdateOne {
	mutation := newAppCategoryMutation(c.config, OpUpdateOne, withAppCategoryID(id))
	return &AppCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppCategory.
func (c *AppCategoryClient) Delete() *AppCategoryDelete {
	mutation := newAppCategoryMutation(c.config, OpDelete)
	return &AppCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppCategoryClient) DeleteOne(ac *AppCategory) *AppCategoryDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppCategoryClient) DeleteOneID(id model.InternalID) *AppCategoryDeleteOne {
	builder := c.Delete().Where(appcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppCategoryDeleteOne{builder}
}

// Query returns a query builder for AppCategory.
func (c *AppCategoryClient) Query() *AppCategoryQuery {
	return &AppCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a AppCategory entity by its id.
func (c *AppCategoryClient) Get(ctx context.Context, id model.InternalID) (*AppCategory, error) {
	return c.Query().Where(appcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppCategoryClient) GetX(ctx context.Context, id model.InternalID) *AppCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the app edge of a AppCategory.
func (c *AppCategoryClient) QueryApp(ac *AppCategory) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appcategory.Table, appcategory.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, appcategory.AppTable, appcategory.AppPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppAppCategory queries the app_app_category edge of a AppCategory.
func (c *AppCategoryClient) QueryAppAppCategory(ac *AppCategory) *AppAppCategoryQuery {
	query := (&AppAppCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appcategory.Table, appcategory.FieldID, id),
			sqlgraph.To(appappcategory.Table, appappcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, appcategory.AppAppCategoryTable, appcategory.AppAppCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppCategoryClient) Hooks() []Hook {
	return c.hooks.AppCategory
}

// Interceptors returns the client interceptors.
func (c *AppCategoryClient) Interceptors() []Interceptor {
	return c.inters.AppCategory
}

func (c *AppCategoryClient) mutate(ctx context.Context, m *AppCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppCategory mutation op: %q", m.Op())
	}
}

// AppInfoClient is a client for the AppInfo schema.
type AppInfoClient struct {
	config
}

// NewAppInfoClient returns a client for the AppInfo from the given config.
func NewAppInfoClient(c config) *AppInfoClient {
	return &AppInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appinfo.Hooks(f(g(h())))`.
func (c *AppInfoClient) Use(hooks ...Hook) {
	c.hooks.AppInfo = append(c.hooks.AppInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appinfo.Intercept(f(g(h())))`.
func (c *AppInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppInfo = append(c.inters.AppInfo, interceptors...)
}

// Create returns a builder for creating a AppInfo entity.
func (c *AppInfoClient) Create() *AppInfoCreate {
	mutation := newAppInfoMutation(c.config, OpCreate)
	return &AppInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppInfo entities.
func (c *AppInfoClient) CreateBulk(builders ...*AppInfoCreate) *AppInfoCreateBulk {
	return &AppInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppInfoClient) MapCreateBulk(slice any, setFunc func(*AppInfoCreate, int)) *AppInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppInfoCreateBulk{err: fmt.Errorf("calling to AppInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppInfo.
func (c *AppInfoClient) Update() *AppInfoUpdate {
	mutation := newAppInfoMutation(c.config, OpUpdate)
	return &AppInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppInfoClient) UpdateOne(ai *AppInfo) *AppInfoUpdateOne {
	mutation := newAppInfoMutation(c.config, OpUpdateOne, withAppInfo(ai))
	return &AppInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppInfoClient) UpdateOneID(id model.InternalID) *AppInfoUpdateOne {
	mutation := newAppInfoMutation(c.config, OpUpdateOne, withAppInfoID(id))
	return &AppInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppInfo.
func (c *AppInfoClient) Delete() *AppInfoDelete {
	mutation := newAppInfoMutation(c.config, OpDelete)
	return &AppInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppInfoClient) DeleteOne(ai *AppInfo) *AppInfoDeleteOne {
	return c.DeleteOneID(ai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppInfoClient) DeleteOneID(id model.InternalID) *AppInfoDeleteOne {
	builder := c.Delete().Where(appinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppInfoDeleteOne{builder}
}

// Query returns a query builder for AppInfo.
func (c *AppInfoClient) Query() *AppInfoQuery {
	return &AppInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a AppInfo entity by its id.
func (c *AppInfoClient) Get(ctx context.Context, id model.InternalID) (*AppInfo, error) {
	return c.Query().Where(appinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppInfoClient) GetX(ctx context.Context, id model.InternalID) *AppInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppInfoClient) Hooks() []Hook {
	return c.hooks.AppInfo
}

// Interceptors returns the client interceptors.
func (c *AppInfoClient) Interceptors() []Interceptor {
	return c.inters.AppInfo
}

func (c *AppInfoClient) mutate(ctx context.Context, m *AppInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppInfo mutation op: %q", m.Op())
	}
}

// AppRunTimeClient is a client for the AppRunTime schema.
type AppRunTimeClient struct {
	config
}

// NewAppRunTimeClient returns a client for the AppRunTime from the given config.
func NewAppRunTimeClient(c config) *AppRunTimeClient {
	return &AppRunTimeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appruntime.Hooks(f(g(h())))`.
func (c *AppRunTimeClient) Use(hooks ...Hook) {
	c.hooks.AppRunTime = append(c.hooks.AppRunTime, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appruntime.Intercept(f(g(h())))`.
func (c *AppRunTimeClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppRunTime = append(c.inters.AppRunTime, interceptors...)
}

// Create returns a builder for creating a AppRunTime entity.
func (c *AppRunTimeClient) Create() *AppRunTimeCreate {
	mutation := newAppRunTimeMutation(c.config, OpCreate)
	return &AppRunTimeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppRunTime entities.
func (c *AppRunTimeClient) CreateBulk(builders ...*AppRunTimeCreate) *AppRunTimeCreateBulk {
	return &AppRunTimeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppRunTimeClient) MapCreateBulk(slice any, setFunc func(*AppRunTimeCreate, int)) *AppRunTimeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppRunTimeCreateBulk{err: fmt.Errorf("calling to AppRunTimeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppRunTimeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppRunTimeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppRunTime.
func (c *AppRunTimeClient) Update() *AppRunTimeUpdate {
	mutation := newAppRunTimeMutation(c.config, OpUpdate)
	return &AppRunTimeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppRunTimeClient) UpdateOne(art *AppRunTime) *AppRunTimeUpdateOne {
	mutation := newAppRunTimeMutation(c.config, OpUpdateOne, withAppRunTime(art))
	return &AppRunTimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppRunTimeClient) UpdateOneID(id model.InternalID) *AppRunTimeUpdateOne {
	mutation := newAppRunTimeMutation(c.config, OpUpdateOne, withAppRunTimeID(id))
	return &AppRunTimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppRunTime.
func (c *AppRunTimeClient) Delete() *AppRunTimeDelete {
	mutation := newAppRunTimeMutation(c.config, OpDelete)
	return &AppRunTimeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppRunTimeClient) DeleteOne(art *AppRunTime) *AppRunTimeDeleteOne {
	return c.DeleteOneID(art.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppRunTimeClient) DeleteOneID(id model.InternalID) *AppRunTimeDeleteOne {
	builder := c.Delete().Where(appruntime.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppRunTimeDeleteOne{builder}
}

// Query returns a query builder for AppRunTime.
func (c *AppRunTimeClient) Query() *AppRunTimeQuery {
	return &AppRunTimeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppRunTime},
		inters: c.Interceptors(),
	}
}

// Get returns a AppRunTime entity by its id.
func (c *AppRunTimeClient) Get(ctx context.Context, id model.InternalID) (*AppRunTime, error) {
	return c.Query().Where(appruntime.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppRunTimeClient) GetX(ctx context.Context, id model.InternalID) *AppRunTime {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the app edge of a AppRunTime.
func (c *AppRunTimeClient) QueryApp(art *AppRunTime) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := art.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appruntime.Table, appruntime.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appruntime.AppTable, appruntime.AppColumn),
		)
		fromV = sqlgraph.Neighbors(art.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppRunTimeClient) Hooks() []Hook {
	return c.hooks.AppRunTime
}

// Interceptors returns the client interceptors.
func (c *AppRunTimeClient) Interceptors() []Interceptor {
	return c.inters.AppRunTime
}

func (c *AppRunTimeClient) mutate(ctx context.Context, m *AppRunTimeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppRunTimeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppRunTimeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppRunTimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppRunTimeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppRunTime mutation op: %q", m.Op())
	}
}

// DeviceClient is a client for the Device schema.
type DeviceClient struct {
	config
}

// NewDeviceClient returns a client for the Device from the given config.
func NewDeviceClient(c config) *DeviceClient {
	return &DeviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `device.Hooks(f(g(h())))`.
func (c *DeviceClient) Use(hooks ...Hook) {
	c.hooks.Device = append(c.hooks.Device, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `device.Intercept(f(g(h())))`.
func (c *DeviceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Device = append(c.inters.Device, interceptors...)
}

// Create returns a builder for creating a Device entity.
func (c *DeviceClient) Create() *DeviceCreate {
	mutation := newDeviceMutation(c.config, OpCreate)
	return &DeviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Device entities.
func (c *DeviceClient) CreateBulk(builders ...*DeviceCreate) *DeviceCreateBulk {
	return &DeviceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeviceClient) MapCreateBulk(slice any, setFunc func(*DeviceCreate, int)) *DeviceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeviceCreateBulk{err: fmt.Errorf("calling to DeviceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeviceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeviceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Device.
func (c *DeviceClient) Update() *DeviceUpdate {
	mutation := newDeviceMutation(c.config, OpUpdate)
	return &DeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceClient) UpdateOne(d *Device) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDevice(d))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceClient) UpdateOneID(id model.InternalID) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDeviceID(id))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Device.
func (c *DeviceClient) Delete() *DeviceDelete {
	mutation := newDeviceMutation(c.config, OpDelete)
	return &DeviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceClient) DeleteOne(d *Device) *DeviceDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeviceClient) DeleteOneID(id model.InternalID) *DeviceDeleteOne {
	builder := c.Delete().Where(device.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceDeleteOne{builder}
}

// Query returns a query builder for Device.
func (c *DeviceClient) Query() *DeviceQuery {
	return &DeviceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDevice},
		inters: c.Interceptors(),
	}
}

// Get returns a Device entity by its id.
func (c *DeviceClient) Get(ctx context.Context, id model.InternalID) (*Device, error) {
	return c.Query().Where(device.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceClient) GetX(ctx context.Context, id model.InternalID) *Device {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a Device.
func (c *DeviceClient) QuerySession(d *Device) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, device.SessionTable, device.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApp queries the app edge of a Device.
func (c *DeviceClient) QueryApp(d *Device) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, device.AppTable, device.AppColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceClient) Hooks() []Hook {
	return c.hooks.Device
}

// Interceptors returns the client interceptors.
func (c *DeviceClient) Interceptors() []Interceptor {
	return c.inters.Device
}

func (c *DeviceClient) mutate(ctx context.Context, m *DeviceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeviceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeviceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Device mutation op: %q", m.Op())
	}
}

// FeedClient is a client for the Feed schema.
type FeedClient struct {
	config
}

// NewFeedClient returns a client for the Feed from the given config.
func NewFeedClient(c config) *FeedClient {
	return &FeedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feed.Hooks(f(g(h())))`.
func (c *FeedClient) Use(hooks ...Hook) {
	c.hooks.Feed = append(c.hooks.Feed, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feed.Intercept(f(g(h())))`.
func (c *FeedClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feed = append(c.inters.Feed, interceptors...)
}

// Create returns a builder for creating a Feed entity.
func (c *FeedClient) Create() *FeedCreate {
	mutation := newFeedMutation(c.config, OpCreate)
	return &FeedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feed entities.
func (c *FeedClient) CreateBulk(builders ...*FeedCreate) *FeedCreateBulk {
	return &FeedCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedClient) MapCreateBulk(slice any, setFunc func(*FeedCreate, int)) *FeedCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedCreateBulk{err: fmt.Errorf("calling to FeedClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feed.
func (c *FeedClient) Update() *FeedUpdate {
	mutation := newFeedMutation(c.config, OpUpdate)
	return &FeedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedClient) UpdateOne(f *Feed) *FeedUpdateOne {
	mutation := newFeedMutation(c.config, OpUpdateOne, withFeed(f))
	return &FeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedClient) UpdateOneID(id model.InternalID) *FeedUpdateOne {
	mutation := newFeedMutation(c.config, OpUpdateOne, withFeedID(id))
	return &FeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feed.
func (c *FeedClient) Delete() *FeedDelete {
	mutation := newFeedMutation(c.config, OpDelete)
	return &FeedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedClient) DeleteOne(f *Feed) *FeedDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedClient) DeleteOneID(id model.InternalID) *FeedDeleteOne {
	builder := c.Delete().Where(feed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedDeleteOne{builder}
}

// Query returns a query builder for Feed.
func (c *FeedClient) Query() *FeedQuery {
	return &FeedQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeed},
		inters: c.Interceptors(),
	}
}

// Get returns a Feed entity by its id.
func (c *FeedClient) Get(ctx context.Context, id model.InternalID) (*Feed, error) {
	return c.Query().Where(feed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedClient) GetX(ctx context.Context, id model.InternalID) *Feed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItem queries the item edge of a Feed.
func (c *FeedClient) QueryItem(f *Feed) *FeedItemQuery {
	query := (&FeedItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feed.Table, feed.FieldID, id),
			sqlgraph.To(feeditem.Table, feeditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feed.ItemTable, feed.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConfig queries the config edge of a Feed.
func (c *FeedClient) QueryConfig(f *Feed) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feed.Table, feed.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, feed.ConfigTable, feed.ConfigColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedClient) Hooks() []Hook {
	return c.hooks.Feed
}

// Interceptors returns the client interceptors.
func (c *FeedClient) Interceptors() []Interceptor {
	return c.inters.Feed
}

func (c *FeedClient) mutate(ctx context.Context, m *FeedMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Feed mutation op: %q", m.Op())
	}
}

// FeedActionSetClient is a client for the FeedActionSet schema.
type FeedActionSetClient struct {
	config
}

// NewFeedActionSetClient returns a client for the FeedActionSet from the given config.
func NewFeedActionSetClient(c config) *FeedActionSetClient {
	return &FeedActionSetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedactionset.Hooks(f(g(h())))`.
func (c *FeedActionSetClient) Use(hooks ...Hook) {
	c.hooks.FeedActionSet = append(c.hooks.FeedActionSet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feedactionset.Intercept(f(g(h())))`.
func (c *FeedActionSetClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedActionSet = append(c.inters.FeedActionSet, interceptors...)
}

// Create returns a builder for creating a FeedActionSet entity.
func (c *FeedActionSetClient) Create() *FeedActionSetCreate {
	mutation := newFeedActionSetMutation(c.config, OpCreate)
	return &FeedActionSetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedActionSet entities.
func (c *FeedActionSetClient) CreateBulk(builders ...*FeedActionSetCreate) *FeedActionSetCreateBulk {
	return &FeedActionSetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedActionSetClient) MapCreateBulk(slice any, setFunc func(*FeedActionSetCreate, int)) *FeedActionSetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedActionSetCreateBulk{err: fmt.Errorf("calling to FeedActionSetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedActionSetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedActionSetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedActionSet.
func (c *FeedActionSetClient) Update() *FeedActionSetUpdate {
	mutation := newFeedActionSetMutation(c.config, OpUpdate)
	return &FeedActionSetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedActionSetClient) UpdateOne(fas *FeedActionSet) *FeedActionSetUpdateOne {
	mutation := newFeedActionSetMutation(c.config, OpUpdateOne, withFeedActionSet(fas))
	return &FeedActionSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedActionSetClient) UpdateOneID(id model.InternalID) *FeedActionSetUpdateOne {
	mutation := newFeedActionSetMutation(c.config, OpUpdateOne, withFeedActionSetID(id))
	return &FeedActionSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedActionSet.
func (c *FeedActionSetClient) Delete() *FeedActionSetDelete {
	mutation := newFeedActionSetMutation(c.config, OpDelete)
	return &FeedActionSetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedActionSetClient) DeleteOne(fas *FeedActionSet) *FeedActionSetDeleteOne {
	return c.DeleteOneID(fas.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedActionSetClient) DeleteOneID(id model.InternalID) *FeedActionSetDeleteOne {
	builder := c.Delete().Where(feedactionset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedActionSetDeleteOne{builder}
}

// Query returns a query builder for FeedActionSet.
func (c *FeedActionSetClient) Query() *FeedActionSetQuery {
	return &FeedActionSetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedActionSet},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedActionSet entity by its id.
func (c *FeedActionSetClient) Get(ctx context.Context, id model.InternalID) (*FeedActionSet, error) {
	return c.Query().Where(feedactionset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedActionSetClient) GetX(ctx context.Context, id model.InternalID) *FeedActionSet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a FeedActionSet.
func (c *FeedActionSetClient) QueryOwner(fas *FeedActionSet) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fas.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedactionset.Table, feedactionset.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feedactionset.OwnerTable, feedactionset.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(fas.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedConfig queries the feed_config edge of a FeedActionSet.
func (c *FeedActionSetClient) QueryFeedConfig(fas *FeedActionSet) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fas.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedactionset.Table, feedactionset.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, feedactionset.FeedConfigTable, feedactionset.FeedConfigPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fas.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedActionSetClient) Hooks() []Hook {
	return c.hooks.FeedActionSet
}

// Interceptors returns the client interceptors.
func (c *FeedActionSetClient) Interceptors() []Interceptor {
	return c.inters.FeedActionSet
}

func (c *FeedActionSetClient) mutate(ctx context.Context, m *FeedActionSetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedActionSetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedActionSetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedActionSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedActionSetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedActionSet mutation op: %q", m.Op())
	}
}

// FeedConfigClient is a client for the FeedConfig schema.
type FeedConfigClient struct {
	config
}

// NewFeedConfigClient returns a client for the FeedConfig from the given config.
func NewFeedConfigClient(c config) *FeedConfigClient {
	return &FeedConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedconfig.Hooks(f(g(h())))`.
func (c *FeedConfigClient) Use(hooks ...Hook) {
	c.hooks.FeedConfig = append(c.hooks.FeedConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feedconfig.Intercept(f(g(h())))`.
func (c *FeedConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedConfig = append(c.inters.FeedConfig, interceptors...)
}

// Create returns a builder for creating a FeedConfig entity.
func (c *FeedConfigClient) Create() *FeedConfigCreate {
	mutation := newFeedConfigMutation(c.config, OpCreate)
	return &FeedConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedConfig entities.
func (c *FeedConfigClient) CreateBulk(builders ...*FeedConfigCreate) *FeedConfigCreateBulk {
	return &FeedConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedConfigClient) MapCreateBulk(slice any, setFunc func(*FeedConfigCreate, int)) *FeedConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedConfigCreateBulk{err: fmt.Errorf("calling to FeedConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedConfig.
func (c *FeedConfigClient) Update() *FeedConfigUpdate {
	mutation := newFeedConfigMutation(c.config, OpUpdate)
	return &FeedConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedConfigClient) UpdateOne(fc *FeedConfig) *FeedConfigUpdateOne {
	mutation := newFeedConfigMutation(c.config, OpUpdateOne, withFeedConfig(fc))
	return &FeedConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedConfigClient) UpdateOneID(id model.InternalID) *FeedConfigUpdateOne {
	mutation := newFeedConfigMutation(c.config, OpUpdateOne, withFeedConfigID(id))
	return &FeedConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedConfig.
func (c *FeedConfigClient) Delete() *FeedConfigDelete {
	mutation := newFeedConfigMutation(c.config, OpDelete)
	return &FeedConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedConfigClient) DeleteOne(fc *FeedConfig) *FeedConfigDeleteOne {
	return c.DeleteOneID(fc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedConfigClient) DeleteOneID(id model.InternalID) *FeedConfigDeleteOne {
	builder := c.Delete().Where(feedconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedConfigDeleteOne{builder}
}

// Query returns a query builder for FeedConfig.
func (c *FeedConfigClient) Query() *FeedConfigQuery {
	return &FeedConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedConfig entity by its id.
func (c *FeedConfigClient) Get(ctx context.Context, id model.InternalID) (*FeedConfig, error) {
	return c.Query().Where(feedconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedConfigClient) GetX(ctx context.Context, id model.InternalID) *FeedConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a FeedConfig.
func (c *FeedConfigClient) QueryOwner(fc *FeedConfig) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feedconfig.OwnerTable, feedconfig.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeed queries the feed edge of a FeedConfig.
func (c *FeedConfigClient) QueryFeed(fc *FeedConfig) *FeedQuery {
	query := (&FeedClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(feed.Table, feed.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, feedconfig.FeedTable, feedconfig.FeedColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifySource queries the notify_source edge of a FeedConfig.
func (c *FeedConfigClient) QueryNotifySource(fc *FeedConfig) *NotifySourceQuery {
	query := (&NotifySourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feedconfig.NotifySourceTable, feedconfig.NotifySourceColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedActionSet queries the feed_action_set edge of a FeedConfig.
func (c *FeedConfigClient) QueryFeedActionSet(fc *FeedConfig) *FeedActionSetQuery {
	query := (&FeedActionSetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(feedactionset.Table, feedactionset.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, feedconfig.FeedActionSetTable, feedconfig.FeedActionSetPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedConfigAction queries the feed_config_action edge of a FeedConfig.
func (c *FeedConfigClient) QueryFeedConfigAction(fc *FeedConfig) *FeedConfigActionQuery {
	query := (&FeedConfigActionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(feedconfigaction.Table, feedconfigaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, feedconfig.FeedConfigActionTable, feedconfig.FeedConfigActionColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedConfigClient) Hooks() []Hook {
	return c.hooks.FeedConfig
}

// Interceptors returns the client interceptors.
func (c *FeedConfigClient) Interceptors() []Interceptor {
	return c.inters.FeedConfig
}

func (c *FeedConfigClient) mutate(ctx context.Context, m *FeedConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedConfig mutation op: %q", m.Op())
	}
}

// FeedConfigActionClient is a client for the FeedConfigAction schema.
type FeedConfigActionClient struct {
	config
}

// NewFeedConfigActionClient returns a client for the FeedConfigAction from the given config.
func NewFeedConfigActionClient(c config) *FeedConfigActionClient {
	return &FeedConfigActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedconfigaction.Hooks(f(g(h())))`.
func (c *FeedConfigActionClient) Use(hooks ...Hook) {
	c.hooks.FeedConfigAction = append(c.hooks.FeedConfigAction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feedconfigaction.Intercept(f(g(h())))`.
func (c *FeedConfigActionClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedConfigAction = append(c.inters.FeedConfigAction, interceptors...)
}

// Create returns a builder for creating a FeedConfigAction entity.
func (c *FeedConfigActionClient) Create() *FeedConfigActionCreate {
	mutation := newFeedConfigActionMutation(c.config, OpCreate)
	return &FeedConfigActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedConfigAction entities.
func (c *FeedConfigActionClient) CreateBulk(builders ...*FeedConfigActionCreate) *FeedConfigActionCreateBulk {
	return &FeedConfigActionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedConfigActionClient) MapCreateBulk(slice any, setFunc func(*FeedConfigActionCreate, int)) *FeedConfigActionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedConfigActionCreateBulk{err: fmt.Errorf("calling to FeedConfigActionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedConfigActionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedConfigActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedConfigAction.
func (c *FeedConfigActionClient) Update() *FeedConfigActionUpdate {
	mutation := newFeedConfigActionMutation(c.config, OpUpdate)
	return &FeedConfigActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedConfigActionClient) UpdateOne(fca *FeedConfigAction) *FeedConfigActionUpdateOne {
	mutation := newFeedConfigActionMutation(c.config, OpUpdateOne, withFeedConfigAction(fca))
	return &FeedConfigActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedConfigActionClient) UpdateOneID(id int) *FeedConfigActionUpdateOne {
	mutation := newFeedConfigActionMutation(c.config, OpUpdateOne, withFeedConfigActionID(id))
	return &FeedConfigActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedConfigAction.
func (c *FeedConfigActionClient) Delete() *FeedConfigActionDelete {
	mutation := newFeedConfigActionMutation(c.config, OpDelete)
	return &FeedConfigActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedConfigActionClient) DeleteOne(fca *FeedConfigAction) *FeedConfigActionDeleteOne {
	return c.DeleteOneID(fca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedConfigActionClient) DeleteOneID(id int) *FeedConfigActionDeleteOne {
	builder := c.Delete().Where(feedconfigaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedConfigActionDeleteOne{builder}
}

// Query returns a query builder for FeedConfigAction.
func (c *FeedConfigActionClient) Query() *FeedConfigActionQuery {
	return &FeedConfigActionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedConfigAction},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedConfigAction entity by its id.
func (c *FeedConfigActionClient) Get(ctx context.Context, id int) (*FeedConfigAction, error) {
	return c.Query().Where(feedconfigaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedConfigActionClient) GetX(ctx context.Context, id int) *FeedConfigAction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFeedConfig queries the feed_config edge of a FeedConfigAction.
func (c *FeedConfigActionClient) QueryFeedConfig(fca *FeedConfigAction) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfigaction.Table, feedconfigaction.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedconfigaction.FeedConfigTable, feedconfigaction.FeedConfigColumn),
		)
		fromV = sqlgraph.Neighbors(fca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedActionSet queries the feed_action_set edge of a FeedConfigAction.
func (c *FeedConfigActionClient) QueryFeedActionSet(fca *FeedConfigAction) *FeedActionSetQuery {
	query := (&FeedActionSetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfigaction.Table, feedconfigaction.FieldID, id),
			sqlgraph.To(feedactionset.Table, feedactionset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedconfigaction.FeedActionSetTable, feedconfigaction.FeedActionSetColumn),
		)
		fromV = sqlgraph.Neighbors(fca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedConfigActionClient) Hooks() []Hook {
	return c.hooks.FeedConfigAction
}

// Interceptors returns the client interceptors.
func (c *FeedConfigActionClient) Interceptors() []Interceptor {
	return c.inters.FeedConfigAction
}

func (c *FeedConfigActionClient) mutate(ctx context.Context, m *FeedConfigActionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedConfigActionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedConfigActionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedConfigActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedConfigActionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedConfigAction mutation op: %q", m.Op())
	}
}

// FeedItemClient is a client for the FeedItem schema.
type FeedItemClient struct {
	config
}

// NewFeedItemClient returns a client for the FeedItem from the given config.
func NewFeedItemClient(c config) *FeedItemClient {
	return &FeedItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feeditem.Hooks(f(g(h())))`.
func (c *FeedItemClient) Use(hooks ...Hook) {
	c.hooks.FeedItem = append(c.hooks.FeedItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feeditem.Intercept(f(g(h())))`.
func (c *FeedItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedItem = append(c.inters.FeedItem, interceptors...)
}

// Create returns a builder for creating a FeedItem entity.
func (c *FeedItemClient) Create() *FeedItemCreate {
	mutation := newFeedItemMutation(c.config, OpCreate)
	return &FeedItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedItem entities.
func (c *FeedItemClient) CreateBulk(builders ...*FeedItemCreate) *FeedItemCreateBulk {
	return &FeedItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedItemClient) MapCreateBulk(slice any, setFunc func(*FeedItemCreate, int)) *FeedItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedItemCreateBulk{err: fmt.Errorf("calling to FeedItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedItem.
func (c *FeedItemClient) Update() *FeedItemUpdate {
	mutation := newFeedItemMutation(c.config, OpUpdate)
	return &FeedItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedItemClient) UpdateOne(fi *FeedItem) *FeedItemUpdateOne {
	mutation := newFeedItemMutation(c.config, OpUpdateOne, withFeedItem(fi))
	return &FeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedItemClient) UpdateOneID(id model.InternalID) *FeedItemUpdateOne {
	mutation := newFeedItemMutation(c.config, OpUpdateOne, withFeedItemID(id))
	return &FeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedItem.
func (c *FeedItemClient) Delete() *FeedItemDelete {
	mutation := newFeedItemMutation(c.config, OpDelete)
	return &FeedItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedItemClient) DeleteOne(fi *FeedItem) *FeedItemDeleteOne {
	return c.DeleteOneID(fi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedItemClient) DeleteOneID(id model.InternalID) *FeedItemDeleteOne {
	builder := c.Delete().Where(feeditem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedItemDeleteOne{builder}
}

// Query returns a query builder for FeedItem.
func (c *FeedItemClient) Query() *FeedItemQuery {
	return &FeedItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedItem},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedItem entity by its id.
func (c *FeedItemClient) Get(ctx context.Context, id model.InternalID) (*FeedItem, error) {
	return c.Query().Where(feeditem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedItemClient) GetX(ctx context.Context, id model.InternalID) *FeedItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFeed queries the feed edge of a FeedItem.
func (c *FeedItemClient) QueryFeed(fi *FeedItem) *FeedQuery {
	query := (&FeedClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditem.Table, feeditem.FieldID, id),
			sqlgraph.To(feed.Table, feed.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feeditem.FeedTable, feeditem.FeedColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedItemCollection queries the feed_item_collection edge of a FeedItem.
func (c *FeedItemClient) QueryFeedItemCollection(fi *FeedItem) *FeedItemCollectionQuery {
	query := (&FeedItemCollectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditem.Table, feeditem.FieldID, id),
			sqlgraph.To(feeditemcollection.Table, feeditemcollection.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, feeditem.FeedItemCollectionTable, feeditem.FeedItemCollectionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedItemClient) Hooks() []Hook {
	return c.hooks.FeedItem
}

// Interceptors returns the client interceptors.
func (c *FeedItemClient) Interceptors() []Interceptor {
	return c.inters.FeedItem
}

func (c *FeedItemClient) mutate(ctx context.Context, m *FeedItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedItem mutation op: %q", m.Op())
	}
}

// FeedItemCollectionClient is a client for the FeedItemCollection schema.
type FeedItemCollectionClient struct {
	config
}

// NewFeedItemCollectionClient returns a client for the FeedItemCollection from the given config.
func NewFeedItemCollectionClient(c config) *FeedItemCollectionClient {
	return &FeedItemCollectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feeditemcollection.Hooks(f(g(h())))`.
func (c *FeedItemCollectionClient) Use(hooks ...Hook) {
	c.hooks.FeedItemCollection = append(c.hooks.FeedItemCollection, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feeditemcollection.Intercept(f(g(h())))`.
func (c *FeedItemCollectionClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedItemCollection = append(c.inters.FeedItemCollection, interceptors...)
}

// Create returns a builder for creating a FeedItemCollection entity.
func (c *FeedItemCollectionClient) Create() *FeedItemCollectionCreate {
	mutation := newFeedItemCollectionMutation(c.config, OpCreate)
	return &FeedItemCollectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedItemCollection entities.
func (c *FeedItemCollectionClient) CreateBulk(builders ...*FeedItemCollectionCreate) *FeedItemCollectionCreateBulk {
	return &FeedItemCollectionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedItemCollectionClient) MapCreateBulk(slice any, setFunc func(*FeedItemCollectionCreate, int)) *FeedItemCollectionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedItemCollectionCreateBulk{err: fmt.Errorf("calling to FeedItemCollectionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedItemCollectionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedItemCollectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedItemCollection.
func (c *FeedItemCollectionClient) Update() *FeedItemCollectionUpdate {
	mutation := newFeedItemCollectionMutation(c.config, OpUpdate)
	return &FeedItemCollectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedItemCollectionClient) UpdateOne(fic *FeedItemCollection) *FeedItemCollectionUpdateOne {
	mutation := newFeedItemCollectionMutation(c.config, OpUpdateOne, withFeedItemCollection(fic))
	return &FeedItemCollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedItemCollectionClient) UpdateOneID(id model.InternalID) *FeedItemCollectionUpdateOne {
	mutation := newFeedItemCollectionMutation(c.config, OpUpdateOne, withFeedItemCollectionID(id))
	return &FeedItemCollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedItemCollection.
func (c *FeedItemCollectionClient) Delete() *FeedItemCollectionDelete {
	mutation := newFeedItemCollectionMutation(c.config, OpDelete)
	return &FeedItemCollectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedItemCollectionClient) DeleteOne(fic *FeedItemCollection) *FeedItemCollectionDeleteOne {
	return c.DeleteOneID(fic.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedItemCollectionClient) DeleteOneID(id model.InternalID) *FeedItemCollectionDeleteOne {
	builder := c.Delete().Where(feeditemcollection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedItemCollectionDeleteOne{builder}
}

// Query returns a query builder for FeedItemCollection.
func (c *FeedItemCollectionClient) Query() *FeedItemCollectionQuery {
	return &FeedItemCollectionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedItemCollection},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedItemCollection entity by its id.
func (c *FeedItemCollectionClient) Get(ctx context.Context, id model.InternalID) (*FeedItemCollection, error) {
	return c.Query().Where(feeditemcollection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedItemCollectionClient) GetX(ctx context.Context, id model.InternalID) *FeedItemCollection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a FeedItemCollection.
func (c *FeedItemCollectionClient) QueryOwner(fic *FeedItemCollection) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditemcollection.Table, feeditemcollection.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feeditemcollection.OwnerTable, feeditemcollection.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(fic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedItem queries the feed_item edge of a FeedItemCollection.
func (c *FeedItemCollectionClient) QueryFeedItem(fic *FeedItemCollection) *FeedItemQuery {
	query := (&FeedItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditemcollection.Table, feeditemcollection.FieldID, id),
			sqlgraph.To(feeditem.Table, feeditem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, feeditemcollection.FeedItemTable, feeditemcollection.FeedItemPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifySource queries the notify_source edge of a FeedItemCollection.
func (c *FeedItemCollectionClient) QueryNotifySource(fic *FeedItemCollection) *NotifySourceQuery {
	query := (&NotifySourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditemcollection.Table, feeditemcollection.FieldID, id),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feeditemcollection.NotifySourceTable, feeditemcollection.NotifySourceColumn),
		)
		fromV = sqlgraph.Neighbors(fic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedItemCollectionClient) Hooks() []Hook {
	return c.hooks.FeedItemCollection
}

// Interceptors returns the client interceptors.
func (c *FeedItemCollectionClient) Interceptors() []Interceptor {
	return c.inters.FeedItemCollection
}

func (c *FeedItemCollectionClient) mutate(ctx context.Context, m *FeedItemCollectionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedItemCollectionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedItemCollectionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedItemCollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedItemCollectionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedItemCollection mutation op: %q", m.Op())
	}
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `file.Hooks(f(g(h())))`.
func (c *FileClient) Use(hooks ...Hook) {
	c.hooks.File = append(c.hooks.File, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `file.Intercept(f(g(h())))`.
func (c *FileClient) Intercept(interceptors ...Interceptor) {
	c.inters.File = append(c.inters.File, interceptors...)
}

// Create returns a builder for creating a File entity.
func (c *FileClient) Create() *FileCreate {
	mutation := newFileMutation(c.config, OpCreate)
	return &FileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of File entities.
func (c *FileClient) CreateBulk(builders ...*FileCreate) *FileCreateBulk {
	return &FileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FileClient) MapCreateBulk(slice any, setFunc func(*FileCreate, int)) *FileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FileCreateBulk{err: fmt.Errorf("calling to FileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	mutation := newFileMutation(c.config, OpUpdate)
	return &FileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFile(f))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id model.InternalID) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFileID(id))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	mutation := newFileMutation(c.config, OpDelete)
	return &FileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FileClient) DeleteOneID(id model.InternalID) *FileDeleteOne {
	builder := c.Delete().Where(file.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteOne{builder}
}

// Query returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFile},
		inters: c.Interceptors(),
	}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id model.InternalID) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id model.InternalID) *File {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a File.
func (c *FileClient) QueryOwner(f *File) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.OwnerTable, file.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImage queries the image edge of a File.
func (c *FileClient) QueryImage(f *File) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, file.ImageTable, file.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileClient) Hooks() []Hook {
	return c.hooks.File
}

// Interceptors returns the client interceptors.
func (c *FileClient) Interceptors() []Interceptor {
	return c.inters.File
}

func (c *FileClient) mutate(ctx context.Context, m *FileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown File mutation op: %q", m.Op())
	}
}

// ImageClient is a client for the Image schema.
type ImageClient struct {
	config
}

// NewImageClient returns a client for the Image from the given config.
func NewImageClient(c config) *ImageClient {
	return &ImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `image.Hooks(f(g(h())))`.
func (c *ImageClient) Use(hooks ...Hook) {
	c.hooks.Image = append(c.hooks.Image, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `image.Intercept(f(g(h())))`.
func (c *ImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Image = append(c.inters.Image, interceptors...)
}

// Create returns a builder for creating a Image entity.
func (c *ImageClient) Create() *ImageCreate {
	mutation := newImageMutation(c.config, OpCreate)
	return &ImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Image entities.
func (c *ImageClient) CreateBulk(builders ...*ImageCreate) *ImageCreateBulk {
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ImageClient) MapCreateBulk(slice any, setFunc func(*ImageCreate, int)) *ImageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ImageCreateBulk{err: fmt.Errorf("calling to ImageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ImageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Image.
func (c *ImageClient) Update() *ImageUpdate {
	mutation := newImageMutation(c.config, OpUpdate)
	return &ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageClient) UpdateOne(i *Image) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImage(i))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageClient) UpdateOneID(id model.InternalID) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImageID(id))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Image.
func (c *ImageClient) Delete() *ImageDelete {
	mutation := newImageMutation(c.config, OpDelete)
	return &ImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ImageClient) DeleteOne(i *Image) *ImageDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ImageClient) DeleteOneID(id model.InternalID) *ImageDeleteOne {
	builder := c.Delete().Where(image.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageDeleteOne{builder}
}

// Query returns a query builder for Image.
func (c *ImageClient) Query() *ImageQuery {
	return &ImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeImage},
		inters: c.Interceptors(),
	}
}

// Get returns a Image entity by its id.
func (c *ImageClient) Get(ctx context.Context, id model.InternalID) (*Image, error) {
	return c.Query().Where(image.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageClient) GetX(ctx context.Context, id model.InternalID) *Image {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Image.
func (c *ImageClient) QueryOwner(i *Image) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, image.OwnerTable, image.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a Image.
func (c *ImageClient) QueryFile(i *Image) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, image.FileTable, image.FileColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImageClient) Hooks() []Hook {
	return c.hooks.Image
}

// Interceptors returns the client interceptors.
func (c *ImageClient) Interceptors() []Interceptor {
	return c.inters.Image
}

func (c *ImageClient) mutate(ctx context.Context, m *ImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Image mutation op: %q", m.Op())
	}
}

// NotifyFlowClient is a client for the NotifyFlow schema.
type NotifyFlowClient struct {
	config
}

// NewNotifyFlowClient returns a client for the NotifyFlow from the given config.
func NewNotifyFlowClient(c config) *NotifyFlowClient {
	return &NotifyFlowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifyflow.Hooks(f(g(h())))`.
func (c *NotifyFlowClient) Use(hooks ...Hook) {
	c.hooks.NotifyFlow = append(c.hooks.NotifyFlow, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifyflow.Intercept(f(g(h())))`.
func (c *NotifyFlowClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyFlow = append(c.inters.NotifyFlow, interceptors...)
}

// Create returns a builder for creating a NotifyFlow entity.
func (c *NotifyFlowClient) Create() *NotifyFlowCreate {
	mutation := newNotifyFlowMutation(c.config, OpCreate)
	return &NotifyFlowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyFlow entities.
func (c *NotifyFlowClient) CreateBulk(builders ...*NotifyFlowCreate) *NotifyFlowCreateBulk {
	return &NotifyFlowCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifyFlowClient) MapCreateBulk(slice any, setFunc func(*NotifyFlowCreate, int)) *NotifyFlowCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifyFlowCreateBulk{err: fmt.Errorf("calling to NotifyFlowClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifyFlowCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifyFlowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyFlow.
func (c *NotifyFlowClient) Update() *NotifyFlowUpdate {
	mutation := newNotifyFlowMutation(c.config, OpUpdate)
	return &NotifyFlowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyFlowClient) UpdateOne(nf *NotifyFlow) *NotifyFlowUpdateOne {
	mutation := newNotifyFlowMutation(c.config, OpUpdateOne, withNotifyFlow(nf))
	return &NotifyFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyFlowClient) UpdateOneID(id model.InternalID) *NotifyFlowUpdateOne {
	mutation := newNotifyFlowMutation(c.config, OpUpdateOne, withNotifyFlowID(id))
	return &NotifyFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyFlow.
func (c *NotifyFlowClient) Delete() *NotifyFlowDelete {
	mutation := newNotifyFlowMutation(c.config, OpDelete)
	return &NotifyFlowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyFlowClient) DeleteOne(nf *NotifyFlow) *NotifyFlowDeleteOne {
	return c.DeleteOneID(nf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyFlowClient) DeleteOneID(id model.InternalID) *NotifyFlowDeleteOne {
	builder := c.Delete().Where(notifyflow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyFlowDeleteOne{builder}
}

// Query returns a query builder for NotifyFlow.
func (c *NotifyFlowClient) Query() *NotifyFlowQuery {
	return &NotifyFlowQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyFlow},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyFlow entity by its id.
func (c *NotifyFlowClient) Get(ctx context.Context, id model.InternalID) (*NotifyFlow, error) {
	return c.Query().Where(notifyflow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyFlowClient) GetX(ctx context.Context, id model.InternalID) *NotifyFlow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryOwner(nf *NotifyFlow) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifyflow.OwnerTable, notifyflow.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyTarget queries the notify_target edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryNotifyTarget(nf *NotifyFlow) *NotifyTargetQuery {
	query := (&NotifyTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(notifytarget.Table, notifytarget.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, notifyflow.NotifyTargetTable, notifyflow.NotifyTargetPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifySource queries the notify_source edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryNotifySource(nf *NotifyFlow) *NotifySourceQuery {
	query := (&NotifySourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, notifyflow.NotifySourceTable, notifyflow.NotifySourcePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlowTarget queries the notify_flow_target edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryNotifyFlowTarget(nf *NotifyFlow) *NotifyFlowTargetQuery {
	query := (&NotifyFlowTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(notifyflowtarget.Table, notifyflowtarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, notifyflow.NotifyFlowTargetTable, notifyflow.NotifyFlowTargetColumn),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlowSource queries the notify_flow_source edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryNotifyFlowSource(nf *NotifyFlow) *NotifyFlowSourceQuery {
	query := (&NotifyFlowSourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(notifyflowsource.Table, notifyflowsource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, notifyflow.NotifyFlowSourceTable, notifyflow.NotifyFlowSourceColumn),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifyFlowClient) Hooks() []Hook {
	return c.hooks.NotifyFlow
}

// Interceptors returns the client interceptors.
func (c *NotifyFlowClient) Interceptors() []Interceptor {
	return c.inters.NotifyFlow
}

func (c *NotifyFlowClient) mutate(ctx context.Context, m *NotifyFlowMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyFlowCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyFlowUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyFlowDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyFlow mutation op: %q", m.Op())
	}
}

// NotifyFlowSourceClient is a client for the NotifyFlowSource schema.
type NotifyFlowSourceClient struct {
	config
}

// NewNotifyFlowSourceClient returns a client for the NotifyFlowSource from the given config.
func NewNotifyFlowSourceClient(c config) *NotifyFlowSourceClient {
	return &NotifyFlowSourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifyflowsource.Hooks(f(g(h())))`.
func (c *NotifyFlowSourceClient) Use(hooks ...Hook) {
	c.hooks.NotifyFlowSource = append(c.hooks.NotifyFlowSource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifyflowsource.Intercept(f(g(h())))`.
func (c *NotifyFlowSourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyFlowSource = append(c.inters.NotifyFlowSource, interceptors...)
}

// Create returns a builder for creating a NotifyFlowSource entity.
func (c *NotifyFlowSourceClient) Create() *NotifyFlowSourceCreate {
	mutation := newNotifyFlowSourceMutation(c.config, OpCreate)
	return &NotifyFlowSourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyFlowSource entities.
func (c *NotifyFlowSourceClient) CreateBulk(builders ...*NotifyFlowSourceCreate) *NotifyFlowSourceCreateBulk {
	return &NotifyFlowSourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifyFlowSourceClient) MapCreateBulk(slice any, setFunc func(*NotifyFlowSourceCreate, int)) *NotifyFlowSourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifyFlowSourceCreateBulk{err: fmt.Errorf("calling to NotifyFlowSourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifyFlowSourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifyFlowSourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyFlowSource.
func (c *NotifyFlowSourceClient) Update() *NotifyFlowSourceUpdate {
	mutation := newNotifyFlowSourceMutation(c.config, OpUpdate)
	return &NotifyFlowSourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyFlowSourceClient) UpdateOne(nfs *NotifyFlowSource) *NotifyFlowSourceUpdateOne {
	mutation := newNotifyFlowSourceMutation(c.config, OpUpdateOne, withNotifyFlowSource(nfs))
	return &NotifyFlowSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyFlowSourceClient) UpdateOneID(id int) *NotifyFlowSourceUpdateOne {
	mutation := newNotifyFlowSourceMutation(c.config, OpUpdateOne, withNotifyFlowSourceID(id))
	return &NotifyFlowSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyFlowSource.
func (c *NotifyFlowSourceClient) Delete() *NotifyFlowSourceDelete {
	mutation := newNotifyFlowSourceMutation(c.config, OpDelete)
	return &NotifyFlowSourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyFlowSourceClient) DeleteOne(nfs *NotifyFlowSource) *NotifyFlowSourceDeleteOne {
	return c.DeleteOneID(nfs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyFlowSourceClient) DeleteOneID(id int) *NotifyFlowSourceDeleteOne {
	builder := c.Delete().Where(notifyflowsource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyFlowSourceDeleteOne{builder}
}

// Query returns a query builder for NotifyFlowSource.
func (c *NotifyFlowSourceClient) Query() *NotifyFlowSourceQuery {
	return &NotifyFlowSourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyFlowSource},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyFlowSource entity by its id.
func (c *NotifyFlowSourceClient) Get(ctx context.Context, id int) (*NotifyFlowSource, error) {
	return c.Query().Where(notifyflowsource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyFlowSourceClient) GetX(ctx context.Context, id int) *NotifyFlowSource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotifyFlow queries the notify_flow edge of a NotifyFlowSource.
func (c *NotifyFlowSourceClient) QueryNotifyFlow(nfs *NotifyFlowSource) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nfs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowsource.Table, notifyflowsource.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowsource.NotifyFlowTable, notifyflowsource.NotifyFlowColumn),
		)
		fromV = sqlgraph.Neighbors(nfs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifySource queries the notify_source edge of a NotifyFlowSource.
func (c *NotifyFlowSourceClient) QueryNotifySource(nfs *NotifyFlowSource) *NotifySourceQuery {
	query := (&NotifySourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nfs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowsource.Table, notifyflowsource.FieldID, id),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowsource.NotifySourceTable, notifyflowsource.NotifySourceColumn),
		)
		fromV = sqlgraph.Neighbors(nfs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifyFlowSourceClient) Hooks() []Hook {
	return c.hooks.NotifyFlowSource
}

// Interceptors returns the client interceptors.
func (c *NotifyFlowSourceClient) Interceptors() []Interceptor {
	return c.inters.NotifyFlowSource
}

func (c *NotifyFlowSourceClient) mutate(ctx context.Context, m *NotifyFlowSourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyFlowSourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyFlowSourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyFlowSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyFlowSourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyFlowSource mutation op: %q", m.Op())
	}
}

// NotifyFlowTargetClient is a client for the NotifyFlowTarget schema.
type NotifyFlowTargetClient struct {
	config
}

// NewNotifyFlowTargetClient returns a client for the NotifyFlowTarget from the given config.
func NewNotifyFlowTargetClient(c config) *NotifyFlowTargetClient {
	return &NotifyFlowTargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifyflowtarget.Hooks(f(g(h())))`.
func (c *NotifyFlowTargetClient) Use(hooks ...Hook) {
	c.hooks.NotifyFlowTarget = append(c.hooks.NotifyFlowTarget, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifyflowtarget.Intercept(f(g(h())))`.
func (c *NotifyFlowTargetClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyFlowTarget = append(c.inters.NotifyFlowTarget, interceptors...)
}

// Create returns a builder for creating a NotifyFlowTarget entity.
func (c *NotifyFlowTargetClient) Create() *NotifyFlowTargetCreate {
	mutation := newNotifyFlowTargetMutation(c.config, OpCreate)
	return &NotifyFlowTargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyFlowTarget entities.
func (c *NotifyFlowTargetClient) CreateBulk(builders ...*NotifyFlowTargetCreate) *NotifyFlowTargetCreateBulk {
	return &NotifyFlowTargetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifyFlowTargetClient) MapCreateBulk(slice any, setFunc func(*NotifyFlowTargetCreate, int)) *NotifyFlowTargetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifyFlowTargetCreateBulk{err: fmt.Errorf("calling to NotifyFlowTargetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifyFlowTargetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifyFlowTargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyFlowTarget.
func (c *NotifyFlowTargetClient) Update() *NotifyFlowTargetUpdate {
	mutation := newNotifyFlowTargetMutation(c.config, OpUpdate)
	return &NotifyFlowTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyFlowTargetClient) UpdateOne(nft *NotifyFlowTarget) *NotifyFlowTargetUpdateOne {
	mutation := newNotifyFlowTargetMutation(c.config, OpUpdateOne, withNotifyFlowTarget(nft))
	return &NotifyFlowTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyFlowTargetClient) UpdateOneID(id int) *NotifyFlowTargetUpdateOne {
	mutation := newNotifyFlowTargetMutation(c.config, OpUpdateOne, withNotifyFlowTargetID(id))
	return &NotifyFlowTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyFlowTarget.
func (c *NotifyFlowTargetClient) Delete() *NotifyFlowTargetDelete {
	mutation := newNotifyFlowTargetMutation(c.config, OpDelete)
	return &NotifyFlowTargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyFlowTargetClient) DeleteOne(nft *NotifyFlowTarget) *NotifyFlowTargetDeleteOne {
	return c.DeleteOneID(nft.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyFlowTargetClient) DeleteOneID(id int) *NotifyFlowTargetDeleteOne {
	builder := c.Delete().Where(notifyflowtarget.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyFlowTargetDeleteOne{builder}
}

// Query returns a query builder for NotifyFlowTarget.
func (c *NotifyFlowTargetClient) Query() *NotifyFlowTargetQuery {
	return &NotifyFlowTargetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyFlowTarget},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyFlowTarget entity by its id.
func (c *NotifyFlowTargetClient) Get(ctx context.Context, id int) (*NotifyFlowTarget, error) {
	return c.Query().Where(notifyflowtarget.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyFlowTargetClient) GetX(ctx context.Context, id int) *NotifyFlowTarget {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotifyFlow queries the notify_flow edge of a NotifyFlowTarget.
func (c *NotifyFlowTargetClient) QueryNotifyFlow(nft *NotifyFlowTarget) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowtarget.Table, notifyflowtarget.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowtarget.NotifyFlowTable, notifyflowtarget.NotifyFlowColumn),
		)
		fromV = sqlgraph.Neighbors(nft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyTarget queries the notify_target edge of a NotifyFlowTarget.
func (c *NotifyFlowTargetClient) QueryNotifyTarget(nft *NotifyFlowTarget) *NotifyTargetQuery {
	query := (&NotifyTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowtarget.Table, notifyflowtarget.FieldID, id),
			sqlgraph.To(notifytarget.Table, notifytarget.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowtarget.NotifyTargetTable, notifyflowtarget.NotifyTargetColumn),
		)
		fromV = sqlgraph.Neighbors(nft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifyFlowTargetClient) Hooks() []Hook {
	return c.hooks.NotifyFlowTarget
}

// Interceptors returns the client interceptors.
func (c *NotifyFlowTargetClient) Interceptors() []Interceptor {
	return c.inters.NotifyFlowTarget
}

func (c *NotifyFlowTargetClient) mutate(ctx context.Context, m *NotifyFlowTargetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyFlowTargetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyFlowTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyFlowTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyFlowTargetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyFlowTarget mutation op: %q", m.Op())
	}
}

// NotifySourceClient is a client for the NotifySource schema.
type NotifySourceClient struct {
	config
}

// NewNotifySourceClient returns a client for the NotifySource from the given config.
func NewNotifySourceClient(c config) *NotifySourceClient {
	return &NotifySourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifysource.Hooks(f(g(h())))`.
func (c *NotifySourceClient) Use(hooks ...Hook) {
	c.hooks.NotifySource = append(c.hooks.NotifySource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifysource.Intercept(f(g(h())))`.
func (c *NotifySourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifySource = append(c.inters.NotifySource, interceptors...)
}

// Create returns a builder for creating a NotifySource entity.
func (c *NotifySourceClient) Create() *NotifySourceCreate {
	mutation := newNotifySourceMutation(c.config, OpCreate)
	return &NotifySourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifySource entities.
func (c *NotifySourceClient) CreateBulk(builders ...*NotifySourceCreate) *NotifySourceCreateBulk {
	return &NotifySourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifySourceClient) MapCreateBulk(slice any, setFunc func(*NotifySourceCreate, int)) *NotifySourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifySourceCreateBulk{err: fmt.Errorf("calling to NotifySourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifySourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifySourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifySource.
func (c *NotifySourceClient) Update() *NotifySourceUpdate {
	mutation := newNotifySourceMutation(c.config, OpUpdate)
	return &NotifySourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifySourceClient) UpdateOne(ns *NotifySource) *NotifySourceUpdateOne {
	mutation := newNotifySourceMutation(c.config, OpUpdateOne, withNotifySource(ns))
	return &NotifySourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifySourceClient) UpdateOneID(id model.InternalID) *NotifySourceUpdateOne {
	mutation := newNotifySourceMutation(c.config, OpUpdateOne, withNotifySourceID(id))
	return &NotifySourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifySource.
func (c *NotifySourceClient) Delete() *NotifySourceDelete {
	mutation := newNotifySourceMutation(c.config, OpDelete)
	return &NotifySourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifySourceClient) DeleteOne(ns *NotifySource) *NotifySourceDeleteOne {
	return c.DeleteOneID(ns.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifySourceClient) DeleteOneID(id model.InternalID) *NotifySourceDeleteOne {
	builder := c.Delete().Where(notifysource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifySourceDeleteOne{builder}
}

// Query returns a query builder for NotifySource.
func (c *NotifySourceClient) Query() *NotifySourceQuery {
	return &NotifySourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifySource},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifySource entity by its id.
func (c *NotifySourceClient) Get(ctx context.Context, id model.InternalID) (*NotifySource, error) {
	return c.Query().Where(notifysource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifySourceClient) GetX(ctx context.Context, id model.InternalID) *NotifySource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a NotifySource.
func (c *NotifySourceClient) QueryOwner(ns *NotifySource) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifysource.Table, notifysource.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifysource.OwnerTable, notifysource.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlow queries the notify_flow edge of a NotifySource.
func (c *NotifySourceClient) QueryNotifyFlow(ns *NotifySource) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifysource.Table, notifysource.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, notifysource.NotifyFlowTable, notifysource.NotifyFlowPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedConfig queries the feed_config edge of a NotifySource.
func (c *NotifySourceClient) QueryFeedConfig(ns *NotifySource) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifysource.Table, notifysource.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifysource.FeedConfigTable, notifysource.FeedConfigColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedItemCollection queries the feed_item_collection edge of a NotifySource.
func (c *NotifySourceClient) QueryFeedItemCollection(ns *NotifySource) *FeedItemCollectionQuery {
	query := (&FeedItemCollectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifysource.Table, notifysource.FieldID, id),
			sqlgraph.To(feeditemcollection.Table, feeditemcollection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifysource.FeedItemCollectionTable, notifysource.FeedItemCollectionColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlowSource queries the notify_flow_source edge of a NotifySource.
func (c *NotifySourceClient) QueryNotifyFlowSource(ns *NotifySource) *NotifyFlowSourceQuery {
	query := (&NotifyFlowSourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifysource.Table, notifysource.FieldID, id),
			sqlgraph.To(notifyflowsource.Table, notifyflowsource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, notifysource.NotifyFlowSourceTable, notifysource.NotifyFlowSourceColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifySourceClient) Hooks() []Hook {
	return c.hooks.NotifySource
}

// Interceptors returns the client interceptors.
func (c *NotifySourceClient) Interceptors() []Interceptor {
	return c.inters.NotifySource
}

func (c *NotifySourceClient) mutate(ctx context.Context, m *NotifySourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifySourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifySourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifySourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifySourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifySource mutation op: %q", m.Op())
	}
}

// NotifyTargetClient is a client for the NotifyTarget schema.
type NotifyTargetClient struct {
	config
}

// NewNotifyTargetClient returns a client for the NotifyTarget from the given config.
func NewNotifyTargetClient(c config) *NotifyTargetClient {
	return &NotifyTargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifytarget.Hooks(f(g(h())))`.
func (c *NotifyTargetClient) Use(hooks ...Hook) {
	c.hooks.NotifyTarget = append(c.hooks.NotifyTarget, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifytarget.Intercept(f(g(h())))`.
func (c *NotifyTargetClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyTarget = append(c.inters.NotifyTarget, interceptors...)
}

// Create returns a builder for creating a NotifyTarget entity.
func (c *NotifyTargetClient) Create() *NotifyTargetCreate {
	mutation := newNotifyTargetMutation(c.config, OpCreate)
	return &NotifyTargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyTarget entities.
func (c *NotifyTargetClient) CreateBulk(builders ...*NotifyTargetCreate) *NotifyTargetCreateBulk {
	return &NotifyTargetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifyTargetClient) MapCreateBulk(slice any, setFunc func(*NotifyTargetCreate, int)) *NotifyTargetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifyTargetCreateBulk{err: fmt.Errorf("calling to NotifyTargetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifyTargetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifyTargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyTarget.
func (c *NotifyTargetClient) Update() *NotifyTargetUpdate {
	mutation := newNotifyTargetMutation(c.config, OpUpdate)
	return &NotifyTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyTargetClient) UpdateOne(nt *NotifyTarget) *NotifyTargetUpdateOne {
	mutation := newNotifyTargetMutation(c.config, OpUpdateOne, withNotifyTarget(nt))
	return &NotifyTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyTargetClient) UpdateOneID(id model.InternalID) *NotifyTargetUpdateOne {
	mutation := newNotifyTargetMutation(c.config, OpUpdateOne, withNotifyTargetID(id))
	return &NotifyTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyTarget.
func (c *NotifyTargetClient) Delete() *NotifyTargetDelete {
	mutation := newNotifyTargetMutation(c.config, OpDelete)
	return &NotifyTargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyTargetClient) DeleteOne(nt *NotifyTarget) *NotifyTargetDeleteOne {
	return c.DeleteOneID(nt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyTargetClient) DeleteOneID(id model.InternalID) *NotifyTargetDeleteOne {
	builder := c.Delete().Where(notifytarget.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyTargetDeleteOne{builder}
}

// Query returns a query builder for NotifyTarget.
func (c *NotifyTargetClient) Query() *NotifyTargetQuery {
	return &NotifyTargetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyTarget},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyTarget entity by its id.
func (c *NotifyTargetClient) Get(ctx context.Context, id model.InternalID) (*NotifyTarget, error) {
	return c.Query().Where(notifytarget.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyTargetClient) GetX(ctx context.Context, id model.InternalID) *NotifyTarget {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a NotifyTarget.
func (c *NotifyTargetClient) QueryOwner(nt *NotifyTarget) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifytarget.Table, notifytarget.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifytarget.OwnerTable, notifytarget.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(nt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlow queries the notify_flow edge of a NotifyTarget.
func (c *NotifyTargetClient) QueryNotifyFlow(nt *NotifyTarget) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifytarget.Table, notifytarget.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, notifytarget.NotifyFlowTable, notifytarget.NotifyFlowPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlowTarget queries the notify_flow_target edge of a NotifyTarget.
func (c *NotifyTargetClient) QueryNotifyFlowTarget(nt *NotifyTarget) *NotifyFlowTargetQuery {
	query := (&NotifyFlowTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifytarget.Table, notifytarget.FieldID, id),
			sqlgraph.To(notifyflowtarget.Table, notifyflowtarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, notifytarget.NotifyFlowTargetTable, notifytarget.NotifyFlowTargetColumn),
		)
		fromV = sqlgraph.Neighbors(nt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifyTargetClient) Hooks() []Hook {
	return c.hooks.NotifyTarget
}

// Interceptors returns the client interceptors.
func (c *NotifyTargetClient) Interceptors() []Interceptor {
	return c.inters.NotifyTarget
}

func (c *NotifyTargetClient) mutate(ctx context.Context, m *NotifyTargetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyTargetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyTargetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyTarget mutation op: %q", m.Op())
	}
}

// PorterContextClient is a client for the PorterContext schema.
type PorterContextClient struct {
	config
}

// NewPorterContextClient returns a client for the PorterContext from the given config.
func NewPorterContextClient(c config) *PorterContextClient {
	return &PorterContextClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `portercontext.Hooks(f(g(h())))`.
func (c *PorterContextClient) Use(hooks ...Hook) {
	c.hooks.PorterContext = append(c.hooks.PorterContext, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `portercontext.Intercept(f(g(h())))`.
func (c *PorterContextClient) Intercept(interceptors ...Interceptor) {
	c.inters.PorterContext = append(c.inters.PorterContext, interceptors...)
}

// Create returns a builder for creating a PorterContext entity.
func (c *PorterContextClient) Create() *PorterContextCreate {
	mutation := newPorterContextMutation(c.config, OpCreate)
	return &PorterContextCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PorterContext entities.
func (c *PorterContextClient) CreateBulk(builders ...*PorterContextCreate) *PorterContextCreateBulk {
	return &PorterContextCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PorterContextClient) MapCreateBulk(slice any, setFunc func(*PorterContextCreate, int)) *PorterContextCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PorterContextCreateBulk{err: fmt.Errorf("calling to PorterContextClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PorterContextCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PorterContextCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PorterContext.
func (c *PorterContextClient) Update() *PorterContextUpdate {
	mutation := newPorterContextMutation(c.config, OpUpdate)
	return &PorterContextUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PorterContextClient) UpdateOne(pc *PorterContext) *PorterContextUpdateOne {
	mutation := newPorterContextMutation(c.config, OpUpdateOne, withPorterContext(pc))
	return &PorterContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PorterContextClient) UpdateOneID(id model.InternalID) *PorterContextUpdateOne {
	mutation := newPorterContextMutation(c.config, OpUpdateOne, withPorterContextID(id))
	return &PorterContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PorterContext.
func (c *PorterContextClient) Delete() *PorterContextDelete {
	mutation := newPorterContextMutation(c.config, OpDelete)
	return &PorterContextDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PorterContextClient) DeleteOne(pc *PorterContext) *PorterContextDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PorterContextClient) DeleteOneID(id model.InternalID) *PorterContextDeleteOne {
	builder := c.Delete().Where(portercontext.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PorterContextDeleteOne{builder}
}

// Query returns a query builder for PorterContext.
func (c *PorterContextClient) Query() *PorterContextQuery {
	return &PorterContextQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePorterContext},
		inters: c.Interceptors(),
	}
}

// Get returns a PorterContext entity by its id.
func (c *PorterContextClient) Get(ctx context.Context, id model.InternalID) (*PorterContext, error) {
	return c.Query().Where(portercontext.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PorterContextClient) GetX(ctx context.Context, id model.InternalID) *PorterContext {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a PorterContext.
func (c *PorterContextClient) QueryOwner(pc *PorterContext) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(portercontext.Table, portercontext.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, portercontext.OwnerTable, portercontext.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PorterContextClient) Hooks() []Hook {
	return c.hooks.PorterContext
}

// Interceptors returns the client interceptors.
func (c *PorterContextClient) Interceptors() []Interceptor {
	return c.inters.PorterContext
}

func (c *PorterContextClient) mutate(ctx context.Context, m *PorterContextMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PorterContextCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PorterContextUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PorterContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PorterContextDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PorterContext mutation op: %q", m.Op())
	}
}

// PorterInstanceClient is a client for the PorterInstance schema.
type PorterInstanceClient struct {
	config
}

// NewPorterInstanceClient returns a client for the PorterInstance from the given config.
func NewPorterInstanceClient(c config) *PorterInstanceClient {
	return &PorterInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `porterinstance.Hooks(f(g(h())))`.
func (c *PorterInstanceClient) Use(hooks ...Hook) {
	c.hooks.PorterInstance = append(c.hooks.PorterInstance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `porterinstance.Intercept(f(g(h())))`.
func (c *PorterInstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.PorterInstance = append(c.inters.PorterInstance, interceptors...)
}

// Create returns a builder for creating a PorterInstance entity.
func (c *PorterInstanceClient) Create() *PorterInstanceCreate {
	mutation := newPorterInstanceMutation(c.config, OpCreate)
	return &PorterInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PorterInstance entities.
func (c *PorterInstanceClient) CreateBulk(builders ...*PorterInstanceCreate) *PorterInstanceCreateBulk {
	return &PorterInstanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PorterInstanceClient) MapCreateBulk(slice any, setFunc func(*PorterInstanceCreate, int)) *PorterInstanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PorterInstanceCreateBulk{err: fmt.Errorf("calling to PorterInstanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PorterInstanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PorterInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PorterInstance.
func (c *PorterInstanceClient) Update() *PorterInstanceUpdate {
	mutation := newPorterInstanceMutation(c.config, OpUpdate)
	return &PorterInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PorterInstanceClient) UpdateOne(pi *PorterInstance) *PorterInstanceUpdateOne {
	mutation := newPorterInstanceMutation(c.config, OpUpdateOne, withPorterInstance(pi))
	return &PorterInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PorterInstanceClient) UpdateOneID(id model.InternalID) *PorterInstanceUpdateOne {
	mutation := newPorterInstanceMutation(c.config, OpUpdateOne, withPorterInstanceID(id))
	return &PorterInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PorterInstance.
func (c *PorterInstanceClient) Delete() *PorterInstanceDelete {
	mutation := newPorterInstanceMutation(c.config, OpDelete)
	return &PorterInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PorterInstanceClient) DeleteOne(pi *PorterInstance) *PorterInstanceDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PorterInstanceClient) DeleteOneID(id model.InternalID) *PorterInstanceDeleteOne {
	builder := c.Delete().Where(porterinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PorterInstanceDeleteOne{builder}
}

// Query returns a query builder for PorterInstance.
func (c *PorterInstanceClient) Query() *PorterInstanceQuery {
	return &PorterInstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePorterInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a PorterInstance entity by its id.
func (c *PorterInstanceClient) Get(ctx context.Context, id model.InternalID) (*PorterInstance, error) {
	return c.Query().Where(porterinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PorterInstanceClient) GetX(ctx context.Context, id model.InternalID) *PorterInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PorterInstanceClient) Hooks() []Hook {
	return c.hooks.PorterInstance
}

// Interceptors returns the client interceptors.
func (c *PorterInstanceClient) Interceptors() []Interceptor {
	return c.inters.PorterInstance
}

func (c *PorterInstanceClient) mutate(ctx context.Context, m *PorterInstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PorterInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PorterInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PorterInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PorterInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PorterInstance mutation op: %q", m.Op())
	}
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `session.Intercept(f(g(h())))`.
func (c *SessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Session = append(c.inters.Session, interceptors...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SessionClient) MapCreateBulk(slice any, setFunc func(*SessionCreate, int)) *SessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SessionCreateBulk{err: fmt.Errorf("calling to SessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id model.InternalID) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id model.InternalID) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSession},
		inters: c.Interceptors(),
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id model.InternalID) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id model.InternalID) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Session.
func (c *SessionClient) QueryUser(s *Session) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.UserTable, session.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevice queries the device edge of a Session.
func (c *SessionClient) QueryDevice(s *Session) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.DeviceTable, session.DeviceColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// Interceptors returns the client interceptors.
func (c *SessionClient) Interceptors() []Interceptor {
	return c.inters.Session
}

func (c *SessionClient) mutate(ctx context.Context, m *SessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Session mutation op: %q", m.Op())
	}
}

// StoreAppClient is a client for the StoreApp schema.
type StoreAppClient struct {
	config
}

// NewStoreAppClient returns a client for the StoreApp from the given config.
func NewStoreAppClient(c config) *StoreAppClient {
	return &StoreAppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storeapp.Hooks(f(g(h())))`.
func (c *StoreAppClient) Use(hooks ...Hook) {
	c.hooks.StoreApp = append(c.hooks.StoreApp, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `storeapp.Intercept(f(g(h())))`.
func (c *StoreAppClient) Intercept(interceptors ...Interceptor) {
	c.inters.StoreApp = append(c.inters.StoreApp, interceptors...)
}

// Create returns a builder for creating a StoreApp entity.
func (c *StoreAppClient) Create() *StoreAppCreate {
	mutation := newStoreAppMutation(c.config, OpCreate)
	return &StoreAppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StoreApp entities.
func (c *StoreAppClient) CreateBulk(builders ...*StoreAppCreate) *StoreAppCreateBulk {
	return &StoreAppCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StoreAppClient) MapCreateBulk(slice any, setFunc func(*StoreAppCreate, int)) *StoreAppCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StoreAppCreateBulk{err: fmt.Errorf("calling to StoreAppClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StoreAppCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StoreAppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StoreApp.
func (c *StoreAppClient) Update() *StoreAppUpdate {
	mutation := newStoreAppMutation(c.config, OpUpdate)
	return &StoreAppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreAppClient) UpdateOne(sa *StoreApp) *StoreAppUpdateOne {
	mutation := newStoreAppMutation(c.config, OpUpdateOne, withStoreApp(sa))
	return &StoreAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreAppClient) UpdateOneID(id model.InternalID) *StoreAppUpdateOne {
	mutation := newStoreAppMutation(c.config, OpUpdateOne, withStoreAppID(id))
	return &StoreAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StoreApp.
func (c *StoreAppClient) Delete() *StoreAppDelete {
	mutation := newStoreAppMutation(c.config, OpDelete)
	return &StoreAppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreAppClient) DeleteOne(sa *StoreApp) *StoreAppDeleteOne {
	return c.DeleteOneID(sa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoreAppClient) DeleteOneID(id model.InternalID) *StoreAppDeleteOne {
	builder := c.Delete().Where(storeapp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreAppDeleteOne{builder}
}

// Query returns a query builder for StoreApp.
func (c *StoreAppClient) Query() *StoreAppQuery {
	return &StoreAppQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStoreApp},
		inters: c.Interceptors(),
	}
}

// Get returns a StoreApp entity by its id.
func (c *StoreAppClient) Get(ctx context.Context, id model.InternalID) (*StoreApp, error) {
	return c.Query().Where(storeapp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreAppClient) GetX(ctx context.Context, id model.InternalID) *StoreApp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StoreAppClient) Hooks() []Hook {
	return c.hooks.StoreApp
}

// Interceptors returns the client interceptors.
func (c *StoreAppClient) Interceptors() []Interceptor {
	return c.inters.StoreApp
}

func (c *StoreAppClient) mutate(ctx context.Context, m *StoreAppMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StoreAppCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StoreAppUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StoreAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StoreAppDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StoreApp mutation op: %q", m.Op())
	}
}

// StoreAppBinaryClient is a client for the StoreAppBinary schema.
type StoreAppBinaryClient struct {
	config
}

// NewStoreAppBinaryClient returns a client for the StoreAppBinary from the given config.
func NewStoreAppBinaryClient(c config) *StoreAppBinaryClient {
	return &StoreAppBinaryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storeappbinary.Hooks(f(g(h())))`.
func (c *StoreAppBinaryClient) Use(hooks ...Hook) {
	c.hooks.StoreAppBinary = append(c.hooks.StoreAppBinary, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `storeappbinary.Intercept(f(g(h())))`.
func (c *StoreAppBinaryClient) Intercept(interceptors ...Interceptor) {
	c.inters.StoreAppBinary = append(c.inters.StoreAppBinary, interceptors...)
}

// Create returns a builder for creating a StoreAppBinary entity.
func (c *StoreAppBinaryClient) Create() *StoreAppBinaryCreate {
	mutation := newStoreAppBinaryMutation(c.config, OpCreate)
	return &StoreAppBinaryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StoreAppBinary entities.
func (c *StoreAppBinaryClient) CreateBulk(builders ...*StoreAppBinaryCreate) *StoreAppBinaryCreateBulk {
	return &StoreAppBinaryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StoreAppBinaryClient) MapCreateBulk(slice any, setFunc func(*StoreAppBinaryCreate, int)) *StoreAppBinaryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StoreAppBinaryCreateBulk{err: fmt.Errorf("calling to StoreAppBinaryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StoreAppBinaryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StoreAppBinaryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StoreAppBinary.
func (c *StoreAppBinaryClient) Update() *StoreAppBinaryUpdate {
	mutation := newStoreAppBinaryMutation(c.config, OpUpdate)
	return &StoreAppBinaryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreAppBinaryClient) UpdateOne(sab *StoreAppBinary) *StoreAppBinaryUpdateOne {
	mutation := newStoreAppBinaryMutation(c.config, OpUpdateOne, withStoreAppBinary(sab))
	return &StoreAppBinaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreAppBinaryClient) UpdateOneID(id model.InternalID) *StoreAppBinaryUpdateOne {
	mutation := newStoreAppBinaryMutation(c.config, OpUpdateOne, withStoreAppBinaryID(id))
	return &StoreAppBinaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StoreAppBinary.
func (c *StoreAppBinaryClient) Delete() *StoreAppBinaryDelete {
	mutation := newStoreAppBinaryMutation(c.config, OpDelete)
	return &StoreAppBinaryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreAppBinaryClient) DeleteOne(sab *StoreAppBinary) *StoreAppBinaryDeleteOne {
	return c.DeleteOneID(sab.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoreAppBinaryClient) DeleteOneID(id model.InternalID) *StoreAppBinaryDeleteOne {
	builder := c.Delete().Where(storeappbinary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreAppBinaryDeleteOne{builder}
}

// Query returns a query builder for StoreAppBinary.
func (c *StoreAppBinaryClient) Query() *StoreAppBinaryQuery {
	return &StoreAppBinaryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStoreAppBinary},
		inters: c.Interceptors(),
	}
}

// Get returns a StoreAppBinary entity by its id.
func (c *StoreAppBinaryClient) Get(ctx context.Context, id model.InternalID) (*StoreAppBinary, error) {
	return c.Query().Where(storeappbinary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreAppBinaryClient) GetX(ctx context.Context, id model.InternalID) *StoreAppBinary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StoreAppBinaryClient) Hooks() []Hook {
	return c.hooks.StoreAppBinary
}

// Interceptors returns the client interceptors.
func (c *StoreAppBinaryClient) Interceptors() []Interceptor {
	return c.inters.StoreAppBinary
}

func (c *StoreAppBinaryClient) mutate(ctx context.Context, m *StoreAppBinaryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StoreAppBinaryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StoreAppBinaryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StoreAppBinaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StoreAppBinaryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StoreAppBinary mutation op: %q", m.Op())
	}
}

// SystemNotificationClient is a client for the SystemNotification schema.
type SystemNotificationClient struct {
	config
}

// NewSystemNotificationClient returns a client for the SystemNotification from the given config.
func NewSystemNotificationClient(c config) *SystemNotificationClient {
	return &SystemNotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systemnotification.Hooks(f(g(h())))`.
func (c *SystemNotificationClient) Use(hooks ...Hook) {
	c.hooks.SystemNotification = append(c.hooks.SystemNotification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `systemnotification.Intercept(f(g(h())))`.
func (c *SystemNotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.SystemNotification = append(c.inters.SystemNotification, interceptors...)
}

// Create returns a builder for creating a SystemNotification entity.
func (c *SystemNotificationClient) Create() *SystemNotificationCreate {
	mutation := newSystemNotificationMutation(c.config, OpCreate)
	return &SystemNotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SystemNotification entities.
func (c *SystemNotificationClient) CreateBulk(builders ...*SystemNotificationCreate) *SystemNotificationCreateBulk {
	return &SystemNotificationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SystemNotificationClient) MapCreateBulk(slice any, setFunc func(*SystemNotificationCreate, int)) *SystemNotificationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SystemNotificationCreateBulk{err: fmt.Errorf("calling to SystemNotificationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SystemNotificationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SystemNotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SystemNotification.
func (c *SystemNotificationClient) Update() *SystemNotificationUpdate {
	mutation := newSystemNotificationMutation(c.config, OpUpdate)
	return &SystemNotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SystemNotificationClient) UpdateOne(sn *SystemNotification) *SystemNotificationUpdateOne {
	mutation := newSystemNotificationMutation(c.config, OpUpdateOne, withSystemNotification(sn))
	return &SystemNotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SystemNotificationClient) UpdateOneID(id model.InternalID) *SystemNotificationUpdateOne {
	mutation := newSystemNotificationMutation(c.config, OpUpdateOne, withSystemNotificationID(id))
	return &SystemNotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SystemNotification.
func (c *SystemNotificationClient) Delete() *SystemNotificationDelete {
	mutation := newSystemNotificationMutation(c.config, OpDelete)
	return &SystemNotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SystemNotificationClient) DeleteOne(sn *SystemNotification) *SystemNotificationDeleteOne {
	return c.DeleteOneID(sn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SystemNotificationClient) DeleteOneID(id model.InternalID) *SystemNotificationDeleteOne {
	builder := c.Delete().Where(systemnotification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SystemNotificationDeleteOne{builder}
}

// Query returns a query builder for SystemNotification.
func (c *SystemNotificationClient) Query() *SystemNotificationQuery {
	return &SystemNotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSystemNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a SystemNotification entity by its id.
func (c *SystemNotificationClient) Get(ctx context.Context, id model.InternalID) (*SystemNotification, error) {
	return c.Query().Where(systemnotification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SystemNotificationClient) GetX(ctx context.Context, id model.InternalID) *SystemNotification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SystemNotificationClient) Hooks() []Hook {
	return c.hooks.SystemNotification
}

// Interceptors returns the client interceptors.
func (c *SystemNotificationClient) Interceptors() []Interceptor {
	return c.inters.SystemNotification
}

func (c *SystemNotificationClient) mutate(ctx context.Context, m *SystemNotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SystemNotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SystemNotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SystemNotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SystemNotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SystemNotification mutation op: %q", m.Op())
	}
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tag.Intercept(f(g(h())))`.
func (c *TagClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tag = append(c.inters.Tag, interceptors...)
}

// Create returns a builder for creating a Tag entity.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TagClient) MapCreateBulk(slice any, setFunc func(*TagCreate, int)) *TagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TagCreateBulk{err: fmt.Errorf("calling to TagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id model.InternalID) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TagClient) DeleteOneID(id model.InternalID) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTag},
		inters: c.Interceptors(),
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id model.InternalID) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id model.InternalID) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Tag.
func (c *TagClient) QueryOwner(t *Tag) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tag.OwnerTable, tag.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// Interceptors returns the client interceptors.
func (c *TagClient) Interceptors() []Interceptor {
	return c.inters.Tag
}

func (c *TagClient) mutate(ctx context.Context, m *TagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tag mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id model.InternalID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id model.InternalID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id model.InternalID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id model.InternalID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a User.
func (c *UserClient) QuerySession(u *User) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionTable, user.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccount queries the account edge of a User.
func (c *UserClient) QueryAccount(u *User) *AccountQuery {
	query := (&AccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AccountTable, user.AccountColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApp queries the app edge of a User.
func (c *UserClient) QueryApp(u *User) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AppTable, user.AppColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedConfig queries the feed_config edge of a User.
func (c *UserClient) QueryFeedConfig(u *User) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FeedConfigTable, user.FeedConfigColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedActionSet queries the feed_action_set edge of a User.
func (c *UserClient) QueryFeedActionSet(u *User) *FeedActionSetQuery {
	query := (&FeedActionSetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(feedactionset.Table, feedactionset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FeedActionSetTable, user.FeedActionSetColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedItemCollection queries the feed_item_collection edge of a User.
func (c *UserClient) QueryFeedItemCollection(u *User) *FeedItemCollectionQuery {
	query := (&FeedItemCollectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(feeditemcollection.Table, feeditemcollection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FeedItemCollectionTable, user.FeedItemCollectionColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifySource queries the notify_source edge of a User.
func (c *UserClient) QueryNotifySource(u *User) *NotifySourceQuery {
	query := (&NotifySourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotifySourceTable, user.NotifySourceColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyTarget queries the notify_target edge of a User.
func (c *UserClient) QueryNotifyTarget(u *User) *NotifyTargetQuery {
	query := (&NotifyTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notifytarget.Table, notifytarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotifyTargetTable, user.NotifyTargetColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlow queries the notify_flow edge of a User.
func (c *UserClient) QueryNotifyFlow(u *User) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotifyFlowTable, user.NotifyFlowColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImage queries the image edge of a User.
func (c *UserClient) QueryImage(u *User) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ImageTable, user.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a User.
func (c *UserClient) QueryFile(u *User) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FileTable, user.FileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTag queries the tag edge of a User.
func (c *UserClient) QueryTag(u *User) *TagQuery {
	query := (&TagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TagTable, user.TagColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPorterContext queries the porter_context edge of a User.
func (c *UserClient) QueryPorterContext(u *User) *PorterContextQuery {
	query := (&PorterContextClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(portercontext.Table, portercontext.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PorterContextTable, user.PorterContextColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a User.
func (c *UserClient) QueryCreator(u *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.CreatorTable, user.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedUser queries the created_user edge of a User.
func (c *UserClient) QueryCreatedUser(u *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedUserTable, user.CreatedUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Account, App, AppAppCategory, AppCategory, AppInfo, AppRunTime, Device, Feed,
		FeedActionSet, FeedConfig, FeedConfigAction, FeedItem, FeedItemCollection,
		File, Image, NotifyFlow, NotifyFlowSource, NotifyFlowTarget, NotifySource,
		NotifyTarget, PorterContext, PorterInstance, Session, StoreApp, StoreAppBinary,
		SystemNotification, Tag, User []ent.Hook
	}
	inters struct {
		Account, App, AppAppCategory, AppCategory, AppInfo, AppRunTime, Device, Feed,
		FeedActionSet, FeedConfig, FeedConfigAction, FeedItem, FeedItemCollection,
		File, Image, NotifyFlow, NotifyFlowSource, NotifyFlowTarget, NotifySource,
		NotifyTarget, PorterContext, PorterInstance, Session, StoreApp, StoreAppBinary,
		SystemNotification, Tag, User []ent.Interceptor
	}
)
