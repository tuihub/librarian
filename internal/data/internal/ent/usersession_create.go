// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/deviceinfo"
	"github.com/tuihub/librarian/internal/data/internal/ent/usersession"
	"github.com/tuihub/librarian/internal/model"
)

// UserSessionCreate is the builder for creating a UserSession entity.
type UserSessionCreate struct {
	config
	mutation *UserSessionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (usc *UserSessionCreate) SetUserID(mi model.InternalID) *UserSessionCreate {
	usc.mutation.SetUserID(mi)
	return usc
}

// SetRefreshToken sets the "refresh_token" field.
func (usc *UserSessionCreate) SetRefreshToken(s string) *UserSessionCreate {
	usc.mutation.SetRefreshToken(s)
	return usc
}

// SetExpireAt sets the "expire_at" field.
func (usc *UserSessionCreate) SetExpireAt(t time.Time) *UserSessionCreate {
	usc.mutation.SetExpireAt(t)
	return usc
}

// SetUpdatedAt sets the "updated_at" field.
func (usc *UserSessionCreate) SetUpdatedAt(t time.Time) *UserSessionCreate {
	usc.mutation.SetUpdatedAt(t)
	return usc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (usc *UserSessionCreate) SetNillableUpdatedAt(t *time.Time) *UserSessionCreate {
	if t != nil {
		usc.SetUpdatedAt(*t)
	}
	return usc
}

// SetCreatedAt sets the "created_at" field.
func (usc *UserSessionCreate) SetCreatedAt(t time.Time) *UserSessionCreate {
	usc.mutation.SetCreatedAt(t)
	return usc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usc *UserSessionCreate) SetNillableCreatedAt(t *time.Time) *UserSessionCreate {
	if t != nil {
		usc.SetCreatedAt(*t)
	}
	return usc
}

// SetID sets the "id" field.
func (usc *UserSessionCreate) SetID(mi model.InternalID) *UserSessionCreate {
	usc.mutation.SetID(mi)
	return usc
}

// SetDeviceInfoID sets the "device_info" edge to the DeviceInfo entity by ID.
func (usc *UserSessionCreate) SetDeviceInfoID(id model.InternalID) *UserSessionCreate {
	usc.mutation.SetDeviceInfoID(id)
	return usc
}

// SetNillableDeviceInfoID sets the "device_info" edge to the DeviceInfo entity by ID if the given value is not nil.
func (usc *UserSessionCreate) SetNillableDeviceInfoID(id *model.InternalID) *UserSessionCreate {
	if id != nil {
		usc = usc.SetDeviceInfoID(*id)
	}
	return usc
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (usc *UserSessionCreate) SetDeviceInfo(d *DeviceInfo) *UserSessionCreate {
	return usc.SetDeviceInfoID(d.ID)
}

// Mutation returns the UserSessionMutation object of the builder.
func (usc *UserSessionCreate) Mutation() *UserSessionMutation {
	return usc.mutation
}

// Save creates the UserSession in the database.
func (usc *UserSessionCreate) Save(ctx context.Context) (*UserSession, error) {
	usc.defaults()
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserSessionCreate) SaveX(ctx context.Context) *UserSession {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserSessionCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserSessionCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UserSessionCreate) defaults() {
	if _, ok := usc.mutation.UpdatedAt(); !ok {
		v := usersession.DefaultUpdatedAt()
		usc.mutation.SetUpdatedAt(v)
	}
	if _, ok := usc.mutation.CreatedAt(); !ok {
		v := usersession.DefaultCreatedAt()
		usc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserSessionCreate) check() error {
	if _, ok := usc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserSession.user_id"`)}
	}
	if _, ok := usc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`ent: missing required field "UserSession.refresh_token"`)}
	}
	if _, ok := usc.mutation.ExpireAt(); !ok {
		return &ValidationError{Name: "expire_at", err: errors.New(`ent: missing required field "UserSession.expire_at"`)}
	}
	if _, ok := usc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserSession.updated_at"`)}
	}
	if _, ok := usc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserSession.created_at"`)}
	}
	return nil
}

func (usc *UserSessionCreate) sqlSave(ctx context.Context) (*UserSession, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserSessionCreate) createSpec() (*UserSession, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSession{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(usersession.Table, sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = usc.conflict
	if id, ok := usc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := usc.mutation.UserID(); ok {
		_spec.SetField(usersession.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := usc.mutation.RefreshToken(); ok {
		_spec.SetField(usersession.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := usc.mutation.ExpireAt(); ok {
		_spec.SetField(usersession.FieldExpireAt, field.TypeTime, value)
		_node.ExpireAt = value
	}
	if value, ok := usc.mutation.UpdatedAt(); ok {
		_spec.SetField(usersession.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := usc.mutation.CreatedAt(); ok {
		_spec.SetField(usersession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := usc.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.DeviceInfoTable,
			Columns: []string{usersession.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.device_info_user_session = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSession.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSessionUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (usc *UserSessionCreate) OnConflict(opts ...sql.ConflictOption) *UserSessionUpsertOne {
	usc.conflict = opts
	return &UserSessionUpsertOne{
		create: usc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (usc *UserSessionCreate) OnConflictColumns(columns ...string) *UserSessionUpsertOne {
	usc.conflict = append(usc.conflict, sql.ConflictColumns(columns...))
	return &UserSessionUpsertOne{
		create: usc,
	}
}

type (
	// UserSessionUpsertOne is the builder for "upsert"-ing
	//  one UserSession node.
	UserSessionUpsertOne struct {
		create *UserSessionCreate
	}

	// UserSessionUpsert is the "OnConflict" setter.
	UserSessionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *UserSessionUpsert) SetUserID(v model.InternalID) *UserSessionUpsert {
	u.Set(usersession.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserSessionUpsert) UpdateUserID() *UserSessionUpsert {
	u.SetExcluded(usersession.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *UserSessionUpsert) AddUserID(v model.InternalID) *UserSessionUpsert {
	u.Add(usersession.FieldUserID, v)
	return u
}

// SetRefreshToken sets the "refresh_token" field.
func (u *UserSessionUpsert) SetRefreshToken(v string) *UserSessionUpsert {
	u.Set(usersession.FieldRefreshToken, v)
	return u
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *UserSessionUpsert) UpdateRefreshToken() *UserSessionUpsert {
	u.SetExcluded(usersession.FieldRefreshToken)
	return u
}

// SetExpireAt sets the "expire_at" field.
func (u *UserSessionUpsert) SetExpireAt(v time.Time) *UserSessionUpsert {
	u.Set(usersession.FieldExpireAt, v)
	return u
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *UserSessionUpsert) UpdateExpireAt() *UserSessionUpsert {
	u.SetExcluded(usersession.FieldExpireAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserSessionUpsert) SetUpdatedAt(v time.Time) *UserSessionUpsert {
	u.Set(usersession.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserSessionUpsert) UpdateUpdatedAt() *UserSessionUpsert {
	u.SetExcluded(usersession.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserSessionUpsert) SetCreatedAt(v time.Time) *UserSessionUpsert {
	u.Set(usersession.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserSessionUpsert) UpdateCreatedAt() *UserSessionUpsert {
	u.SetExcluded(usersession.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usersession.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserSessionUpsertOne) UpdateNewValues() *UserSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usersession.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSession.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserSessionUpsertOne) Ignore() *UserSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSessionUpsertOne) DoNothing() *UserSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSessionCreate.OnConflict
// documentation for more info.
func (u *UserSessionUpsertOne) Update(set func(*UserSessionUpsert)) *UserSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserSessionUpsertOne) SetUserID(v model.InternalID) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *UserSessionUpsertOne) AddUserID(v model.InternalID) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserSessionUpsertOne) UpdateUserID() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateUserID()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *UserSessionUpsertOne) SetRefreshToken(v string) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *UserSessionUpsertOne) UpdateRefreshToken() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateRefreshToken()
	})
}

// SetExpireAt sets the "expire_at" field.
func (u *UserSessionUpsertOne) SetExpireAt(v time.Time) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetExpireAt(v)
	})
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *UserSessionUpsertOne) UpdateExpireAt() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateExpireAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserSessionUpsertOne) SetUpdatedAt(v time.Time) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserSessionUpsertOne) UpdateUpdatedAt() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserSessionUpsertOne) SetCreatedAt(v time.Time) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserSessionUpsertOne) UpdateCreatedAt() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *UserSessionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserSessionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSessionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserSessionUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserSessionUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserSessionCreateBulk is the builder for creating many UserSession entities in bulk.
type UserSessionCreateBulk struct {
	config
	err      error
	builders []*UserSessionCreate
	conflict []sql.ConflictOption
}

// Save creates the UserSession entities in the database.
func (uscb *UserSessionCreateBulk) Save(ctx context.Context) ([]*UserSession, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserSession, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserSessionCreateBulk) SaveX(ctx context.Context) []*UserSession {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserSessionCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSession.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSessionUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (uscb *UserSessionCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserSessionUpsertBulk {
	uscb.conflict = opts
	return &UserSessionUpsertBulk{
		create: uscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uscb *UserSessionCreateBulk) OnConflictColumns(columns ...string) *UserSessionUpsertBulk {
	uscb.conflict = append(uscb.conflict, sql.ConflictColumns(columns...))
	return &UserSessionUpsertBulk{
		create: uscb,
	}
}

// UserSessionUpsertBulk is the builder for "upsert"-ing
// a bulk of UserSession nodes.
type UserSessionUpsertBulk struct {
	create *UserSessionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usersession.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserSessionUpsertBulk) UpdateNewValues() *UserSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usersession.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSession.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserSessionUpsertBulk) Ignore() *UserSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSessionUpsertBulk) DoNothing() *UserSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSessionCreateBulk.OnConflict
// documentation for more info.
func (u *UserSessionUpsertBulk) Update(set func(*UserSessionUpsert)) *UserSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserSessionUpsertBulk) SetUserID(v model.InternalID) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *UserSessionUpsertBulk) AddUserID(v model.InternalID) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserSessionUpsertBulk) UpdateUserID() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateUserID()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *UserSessionUpsertBulk) SetRefreshToken(v string) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *UserSessionUpsertBulk) UpdateRefreshToken() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateRefreshToken()
	})
}

// SetExpireAt sets the "expire_at" field.
func (u *UserSessionUpsertBulk) SetExpireAt(v time.Time) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetExpireAt(v)
	})
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *UserSessionUpsertBulk) UpdateExpireAt() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateExpireAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserSessionUpsertBulk) SetUpdatedAt(v time.Time) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserSessionUpsertBulk) UpdateUpdatedAt() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserSessionUpsertBulk) SetCreatedAt(v time.Time) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserSessionUpsertBulk) UpdateCreatedAt() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *UserSessionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserSessionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserSessionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSessionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
