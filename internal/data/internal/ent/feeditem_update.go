// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditem"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditemcollection"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
	"github.com/tuihub/librarian/internal/model/modelfeed"
)

// FeedItemUpdate is the builder for updating FeedItem entities.
type FeedItemUpdate struct {
	config
	hooks    []Hook
	mutation *FeedItemMutation
}

// Where appends a list predicates to the FeedItemUpdate builder.
func (fiu *FeedItemUpdate) Where(ps ...predicate.FeedItem) *FeedItemUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetTitle sets the "title" field.
func (fiu *FeedItemUpdate) SetTitle(s string) *FeedItemUpdate {
	fiu.mutation.SetTitle(s)
	return fiu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillableTitle(s *string) *FeedItemUpdate {
	if s != nil {
		fiu.SetTitle(*s)
	}
	return fiu
}

// ClearTitle clears the value of the "title" field.
func (fiu *FeedItemUpdate) ClearTitle() *FeedItemUpdate {
	fiu.mutation.ClearTitle()
	return fiu
}

// SetAuthors sets the "authors" field.
func (fiu *FeedItemUpdate) SetAuthors(m []*modelfeed.Person) *FeedItemUpdate {
	fiu.mutation.SetAuthors(m)
	return fiu
}

// AppendAuthors appends m to the "authors" field.
func (fiu *FeedItemUpdate) AppendAuthors(m []*modelfeed.Person) *FeedItemUpdate {
	fiu.mutation.AppendAuthors(m)
	return fiu
}

// ClearAuthors clears the value of the "authors" field.
func (fiu *FeedItemUpdate) ClearAuthors() *FeedItemUpdate {
	fiu.mutation.ClearAuthors()
	return fiu
}

// SetDescription sets the "description" field.
func (fiu *FeedItemUpdate) SetDescription(s string) *FeedItemUpdate {
	fiu.mutation.SetDescription(s)
	return fiu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillableDescription(s *string) *FeedItemUpdate {
	if s != nil {
		fiu.SetDescription(*s)
	}
	return fiu
}

// ClearDescription clears the value of the "description" field.
func (fiu *FeedItemUpdate) ClearDescription() *FeedItemUpdate {
	fiu.mutation.ClearDescription()
	return fiu
}

// SetContent sets the "content" field.
func (fiu *FeedItemUpdate) SetContent(s string) *FeedItemUpdate {
	fiu.mutation.SetContent(s)
	return fiu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillableContent(s *string) *FeedItemUpdate {
	if s != nil {
		fiu.SetContent(*s)
	}
	return fiu
}

// ClearContent clears the value of the "content" field.
func (fiu *FeedItemUpdate) ClearContent() *FeedItemUpdate {
	fiu.mutation.ClearContent()
	return fiu
}

// SetLink sets the "link" field.
func (fiu *FeedItemUpdate) SetLink(s string) *FeedItemUpdate {
	fiu.mutation.SetLink(s)
	return fiu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillableLink(s *string) *FeedItemUpdate {
	if s != nil {
		fiu.SetLink(*s)
	}
	return fiu
}

// ClearLink clears the value of the "link" field.
func (fiu *FeedItemUpdate) ClearLink() *FeedItemUpdate {
	fiu.mutation.ClearLink()
	return fiu
}

// SetImage sets the "image" field.
func (fiu *FeedItemUpdate) SetImage(m *modelfeed.Image) *FeedItemUpdate {
	fiu.mutation.SetImage(m)
	return fiu
}

// ClearImage clears the value of the "image" field.
func (fiu *FeedItemUpdate) ClearImage() *FeedItemUpdate {
	fiu.mutation.ClearImage()
	return fiu
}

// SetPublished sets the "published" field.
func (fiu *FeedItemUpdate) SetPublished(s string) *FeedItemUpdate {
	fiu.mutation.SetPublished(s)
	return fiu
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillablePublished(s *string) *FeedItemUpdate {
	if s != nil {
		fiu.SetPublished(*s)
	}
	return fiu
}

// ClearPublished clears the value of the "published" field.
func (fiu *FeedItemUpdate) ClearPublished() *FeedItemUpdate {
	fiu.mutation.ClearPublished()
	return fiu
}

// SetPublishedParsed sets the "published_parsed" field.
func (fiu *FeedItemUpdate) SetPublishedParsed(t time.Time) *FeedItemUpdate {
	fiu.mutation.SetPublishedParsed(t)
	return fiu
}

// SetNillablePublishedParsed sets the "published_parsed" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillablePublishedParsed(t *time.Time) *FeedItemUpdate {
	if t != nil {
		fiu.SetPublishedParsed(*t)
	}
	return fiu
}

// SetUpdated sets the "updated" field.
func (fiu *FeedItemUpdate) SetUpdated(s string) *FeedItemUpdate {
	fiu.mutation.SetUpdated(s)
	return fiu
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillableUpdated(s *string) *FeedItemUpdate {
	if s != nil {
		fiu.SetUpdated(*s)
	}
	return fiu
}

// ClearUpdated clears the value of the "updated" field.
func (fiu *FeedItemUpdate) ClearUpdated() *FeedItemUpdate {
	fiu.mutation.ClearUpdated()
	return fiu
}

// SetUpdatedParsed sets the "updated_parsed" field.
func (fiu *FeedItemUpdate) SetUpdatedParsed(t time.Time) *FeedItemUpdate {
	fiu.mutation.SetUpdatedParsed(t)
	return fiu
}

// SetNillableUpdatedParsed sets the "updated_parsed" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillableUpdatedParsed(t *time.Time) *FeedItemUpdate {
	if t != nil {
		fiu.SetUpdatedParsed(*t)
	}
	return fiu
}

// ClearUpdatedParsed clears the value of the "updated_parsed" field.
func (fiu *FeedItemUpdate) ClearUpdatedParsed() *FeedItemUpdate {
	fiu.mutation.ClearUpdatedParsed()
	return fiu
}

// SetEnclosures sets the "enclosures" field.
func (fiu *FeedItemUpdate) SetEnclosures(m []*modelfeed.Enclosure) *FeedItemUpdate {
	fiu.mutation.SetEnclosures(m)
	return fiu
}

// AppendEnclosures appends m to the "enclosures" field.
func (fiu *FeedItemUpdate) AppendEnclosures(m []*modelfeed.Enclosure) *FeedItemUpdate {
	fiu.mutation.AppendEnclosures(m)
	return fiu
}

// ClearEnclosures clears the value of the "enclosures" field.
func (fiu *FeedItemUpdate) ClearEnclosures() *FeedItemUpdate {
	fiu.mutation.ClearEnclosures()
	return fiu
}

// SetPublishPlatform sets the "publish_platform" field.
func (fiu *FeedItemUpdate) SetPublishPlatform(s string) *FeedItemUpdate {
	fiu.mutation.SetPublishPlatform(s)
	return fiu
}

// SetNillablePublishPlatform sets the "publish_platform" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillablePublishPlatform(s *string) *FeedItemUpdate {
	if s != nil {
		fiu.SetPublishPlatform(*s)
	}
	return fiu
}

// ClearPublishPlatform clears the value of the "publish_platform" field.
func (fiu *FeedItemUpdate) ClearPublishPlatform() *FeedItemUpdate {
	fiu.mutation.ClearPublishPlatform()
	return fiu
}

// SetReadCount sets the "read_count" field.
func (fiu *FeedItemUpdate) SetReadCount(i int64) *FeedItemUpdate {
	fiu.mutation.ResetReadCount()
	fiu.mutation.SetReadCount(i)
	return fiu
}

// SetNillableReadCount sets the "read_count" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillableReadCount(i *int64) *FeedItemUpdate {
	if i != nil {
		fiu.SetReadCount(*i)
	}
	return fiu
}

// AddReadCount adds i to the "read_count" field.
func (fiu *FeedItemUpdate) AddReadCount(i int64) *FeedItemUpdate {
	fiu.mutation.AddReadCount(i)
	return fiu
}

// SetDigestDescription sets the "digest_description" field.
func (fiu *FeedItemUpdate) SetDigestDescription(s string) *FeedItemUpdate {
	fiu.mutation.SetDigestDescription(s)
	return fiu
}

// SetNillableDigestDescription sets the "digest_description" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillableDigestDescription(s *string) *FeedItemUpdate {
	if s != nil {
		fiu.SetDigestDescription(*s)
	}
	return fiu
}

// ClearDigestDescription clears the value of the "digest_description" field.
func (fiu *FeedItemUpdate) ClearDigestDescription() *FeedItemUpdate {
	fiu.mutation.ClearDigestDescription()
	return fiu
}

// SetDigestImages sets the "digest_images" field.
func (fiu *FeedItemUpdate) SetDigestImages(m []*modelfeed.Image) *FeedItemUpdate {
	fiu.mutation.SetDigestImages(m)
	return fiu
}

// AppendDigestImages appends m to the "digest_images" field.
func (fiu *FeedItemUpdate) AppendDigestImages(m []*modelfeed.Image) *FeedItemUpdate {
	fiu.mutation.AppendDigestImages(m)
	return fiu
}

// ClearDigestImages clears the value of the "digest_images" field.
func (fiu *FeedItemUpdate) ClearDigestImages() *FeedItemUpdate {
	fiu.mutation.ClearDigestImages()
	return fiu
}

// SetUpdatedAt sets the "updated_at" field.
func (fiu *FeedItemUpdate) SetUpdatedAt(t time.Time) *FeedItemUpdate {
	fiu.mutation.SetUpdatedAt(t)
	return fiu
}

// SetCreatedAt sets the "created_at" field.
func (fiu *FeedItemUpdate) SetCreatedAt(t time.Time) *FeedItemUpdate {
	fiu.mutation.SetCreatedAt(t)
	return fiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillableCreatedAt(t *time.Time) *FeedItemUpdate {
	if t != nil {
		fiu.SetCreatedAt(*t)
	}
	return fiu
}

// AddFeedItemCollectionIDs adds the "feed_item_collection" edge to the FeedItemCollection entity by IDs.
func (fiu *FeedItemUpdate) AddFeedItemCollectionIDs(ids ...model.InternalID) *FeedItemUpdate {
	fiu.mutation.AddFeedItemCollectionIDs(ids...)
	return fiu
}

// AddFeedItemCollection adds the "feed_item_collection" edges to the FeedItemCollection entity.
func (fiu *FeedItemUpdate) AddFeedItemCollection(f ...*FeedItemCollection) *FeedItemUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiu.AddFeedItemCollectionIDs(ids...)
}

// Mutation returns the FeedItemMutation object of the builder.
func (fiu *FeedItemUpdate) Mutation() *FeedItemMutation {
	return fiu.mutation
}

// ClearFeedItemCollection clears all "feed_item_collection" edges to the FeedItemCollection entity.
func (fiu *FeedItemUpdate) ClearFeedItemCollection() *FeedItemUpdate {
	fiu.mutation.ClearFeedItemCollection()
	return fiu
}

// RemoveFeedItemCollectionIDs removes the "feed_item_collection" edge to FeedItemCollection entities by IDs.
func (fiu *FeedItemUpdate) RemoveFeedItemCollectionIDs(ids ...model.InternalID) *FeedItemUpdate {
	fiu.mutation.RemoveFeedItemCollectionIDs(ids...)
	return fiu
}

// RemoveFeedItemCollection removes "feed_item_collection" edges to FeedItemCollection entities.
func (fiu *FeedItemUpdate) RemoveFeedItemCollection(f ...*FeedItemCollection) *FeedItemUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiu.RemoveFeedItemCollectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FeedItemUpdate) Save(ctx context.Context) (int, error) {
	fiu.defaults()
	return withHooks(ctx, fiu.sqlSave, fiu.mutation, fiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FeedItemUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FeedItemUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FeedItemUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiu *FeedItemUpdate) defaults() {
	if _, ok := fiu.mutation.UpdatedAt(); !ok {
		v := feeditem.UpdateDefaultUpdatedAt()
		fiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiu *FeedItemUpdate) check() error {
	if fiu.mutation.FeedCleared() && len(fiu.mutation.FeedIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeedItem.feed"`)
	}
	return nil
}

func (fiu *FeedItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feeditem.Table, feeditem.Columns, sqlgraph.NewFieldSpec(feeditem.FieldID, field.TypeInt64))
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.Title(); ok {
		_spec.SetField(feeditem.FieldTitle, field.TypeString, value)
	}
	if fiu.mutation.TitleCleared() {
		_spec.ClearField(feeditem.FieldTitle, field.TypeString)
	}
	if value, ok := fiu.mutation.Authors(); ok {
		_spec.SetField(feeditem.FieldAuthors, field.TypeJSON, value)
	}
	if value, ok := fiu.mutation.AppendedAuthors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldAuthors, value)
		})
	}
	if fiu.mutation.AuthorsCleared() {
		_spec.ClearField(feeditem.FieldAuthors, field.TypeJSON)
	}
	if value, ok := fiu.mutation.Description(); ok {
		_spec.SetField(feeditem.FieldDescription, field.TypeString, value)
	}
	if fiu.mutation.DescriptionCleared() {
		_spec.ClearField(feeditem.FieldDescription, field.TypeString)
	}
	if value, ok := fiu.mutation.Content(); ok {
		_spec.SetField(feeditem.FieldContent, field.TypeString, value)
	}
	if fiu.mutation.ContentCleared() {
		_spec.ClearField(feeditem.FieldContent, field.TypeString)
	}
	if value, ok := fiu.mutation.Link(); ok {
		_spec.SetField(feeditem.FieldLink, field.TypeString, value)
	}
	if fiu.mutation.LinkCleared() {
		_spec.ClearField(feeditem.FieldLink, field.TypeString)
	}
	if value, ok := fiu.mutation.Image(); ok {
		_spec.SetField(feeditem.FieldImage, field.TypeJSON, value)
	}
	if fiu.mutation.ImageCleared() {
		_spec.ClearField(feeditem.FieldImage, field.TypeJSON)
	}
	if value, ok := fiu.mutation.Published(); ok {
		_spec.SetField(feeditem.FieldPublished, field.TypeString, value)
	}
	if fiu.mutation.PublishedCleared() {
		_spec.ClearField(feeditem.FieldPublished, field.TypeString)
	}
	if value, ok := fiu.mutation.PublishedParsed(); ok {
		_spec.SetField(feeditem.FieldPublishedParsed, field.TypeTime, value)
	}
	if value, ok := fiu.mutation.Updated(); ok {
		_spec.SetField(feeditem.FieldUpdated, field.TypeString, value)
	}
	if fiu.mutation.UpdatedCleared() {
		_spec.ClearField(feeditem.FieldUpdated, field.TypeString)
	}
	if value, ok := fiu.mutation.UpdatedParsed(); ok {
		_spec.SetField(feeditem.FieldUpdatedParsed, field.TypeTime, value)
	}
	if fiu.mutation.UpdatedParsedCleared() {
		_spec.ClearField(feeditem.FieldUpdatedParsed, field.TypeTime)
	}
	if value, ok := fiu.mutation.Enclosures(); ok {
		_spec.SetField(feeditem.FieldEnclosures, field.TypeJSON, value)
	}
	if value, ok := fiu.mutation.AppendedEnclosures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldEnclosures, value)
		})
	}
	if fiu.mutation.EnclosuresCleared() {
		_spec.ClearField(feeditem.FieldEnclosures, field.TypeJSON)
	}
	if value, ok := fiu.mutation.PublishPlatform(); ok {
		_spec.SetField(feeditem.FieldPublishPlatform, field.TypeString, value)
	}
	if fiu.mutation.PublishPlatformCleared() {
		_spec.ClearField(feeditem.FieldPublishPlatform, field.TypeString)
	}
	if value, ok := fiu.mutation.ReadCount(); ok {
		_spec.SetField(feeditem.FieldReadCount, field.TypeInt64, value)
	}
	if value, ok := fiu.mutation.AddedReadCount(); ok {
		_spec.AddField(feeditem.FieldReadCount, field.TypeInt64, value)
	}
	if value, ok := fiu.mutation.DigestDescription(); ok {
		_spec.SetField(feeditem.FieldDigestDescription, field.TypeString, value)
	}
	if fiu.mutation.DigestDescriptionCleared() {
		_spec.ClearField(feeditem.FieldDigestDescription, field.TypeString)
	}
	if value, ok := fiu.mutation.DigestImages(); ok {
		_spec.SetField(feeditem.FieldDigestImages, field.TypeJSON, value)
	}
	if value, ok := fiu.mutation.AppendedDigestImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldDigestImages, value)
		})
	}
	if fiu.mutation.DigestImagesCleared() {
		_spec.ClearField(feeditem.FieldDigestImages, field.TypeJSON)
	}
	if value, ok := fiu.mutation.UpdatedAt(); ok {
		_spec.SetField(feeditem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fiu.mutation.CreatedAt(); ok {
		_spec.SetField(feeditem.FieldCreatedAt, field.TypeTime, value)
	}
	if fiu.mutation.FeedItemCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feeditem.FeedItemCollectionTable,
			Columns: feeditem.FeedItemCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.RemovedFeedItemCollectionIDs(); len(nodes) > 0 && !fiu.mutation.FeedItemCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feeditem.FeedItemCollectionTable,
			Columns: feeditem.FeedItemCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.FeedItemCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feeditem.FeedItemCollectionTable,
			Columns: feeditem.FeedItemCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feeditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fiu.mutation.done = true
	return n, nil
}

// FeedItemUpdateOne is the builder for updating a single FeedItem entity.
type FeedItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedItemMutation
}

// SetTitle sets the "title" field.
func (fiuo *FeedItemUpdateOne) SetTitle(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetTitle(s)
	return fiuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillableTitle(s *string) *FeedItemUpdateOne {
	if s != nil {
		fiuo.SetTitle(*s)
	}
	return fiuo
}

// ClearTitle clears the value of the "title" field.
func (fiuo *FeedItemUpdateOne) ClearTitle() *FeedItemUpdateOne {
	fiuo.mutation.ClearTitle()
	return fiuo
}

// SetAuthors sets the "authors" field.
func (fiuo *FeedItemUpdateOne) SetAuthors(m []*modelfeed.Person) *FeedItemUpdateOne {
	fiuo.mutation.SetAuthors(m)
	return fiuo
}

// AppendAuthors appends m to the "authors" field.
func (fiuo *FeedItemUpdateOne) AppendAuthors(m []*modelfeed.Person) *FeedItemUpdateOne {
	fiuo.mutation.AppendAuthors(m)
	return fiuo
}

// ClearAuthors clears the value of the "authors" field.
func (fiuo *FeedItemUpdateOne) ClearAuthors() *FeedItemUpdateOne {
	fiuo.mutation.ClearAuthors()
	return fiuo
}

// SetDescription sets the "description" field.
func (fiuo *FeedItemUpdateOne) SetDescription(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetDescription(s)
	return fiuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillableDescription(s *string) *FeedItemUpdateOne {
	if s != nil {
		fiuo.SetDescription(*s)
	}
	return fiuo
}

// ClearDescription clears the value of the "description" field.
func (fiuo *FeedItemUpdateOne) ClearDescription() *FeedItemUpdateOne {
	fiuo.mutation.ClearDescription()
	return fiuo
}

// SetContent sets the "content" field.
func (fiuo *FeedItemUpdateOne) SetContent(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetContent(s)
	return fiuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillableContent(s *string) *FeedItemUpdateOne {
	if s != nil {
		fiuo.SetContent(*s)
	}
	return fiuo
}

// ClearContent clears the value of the "content" field.
func (fiuo *FeedItemUpdateOne) ClearContent() *FeedItemUpdateOne {
	fiuo.mutation.ClearContent()
	return fiuo
}

// SetLink sets the "link" field.
func (fiuo *FeedItemUpdateOne) SetLink(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetLink(s)
	return fiuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillableLink(s *string) *FeedItemUpdateOne {
	if s != nil {
		fiuo.SetLink(*s)
	}
	return fiuo
}

// ClearLink clears the value of the "link" field.
func (fiuo *FeedItemUpdateOne) ClearLink() *FeedItemUpdateOne {
	fiuo.mutation.ClearLink()
	return fiuo
}

// SetImage sets the "image" field.
func (fiuo *FeedItemUpdateOne) SetImage(m *modelfeed.Image) *FeedItemUpdateOne {
	fiuo.mutation.SetImage(m)
	return fiuo
}

// ClearImage clears the value of the "image" field.
func (fiuo *FeedItemUpdateOne) ClearImage() *FeedItemUpdateOne {
	fiuo.mutation.ClearImage()
	return fiuo
}

// SetPublished sets the "published" field.
func (fiuo *FeedItemUpdateOne) SetPublished(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetPublished(s)
	return fiuo
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillablePublished(s *string) *FeedItemUpdateOne {
	if s != nil {
		fiuo.SetPublished(*s)
	}
	return fiuo
}

// ClearPublished clears the value of the "published" field.
func (fiuo *FeedItemUpdateOne) ClearPublished() *FeedItemUpdateOne {
	fiuo.mutation.ClearPublished()
	return fiuo
}

// SetPublishedParsed sets the "published_parsed" field.
func (fiuo *FeedItemUpdateOne) SetPublishedParsed(t time.Time) *FeedItemUpdateOne {
	fiuo.mutation.SetPublishedParsed(t)
	return fiuo
}

// SetNillablePublishedParsed sets the "published_parsed" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillablePublishedParsed(t *time.Time) *FeedItemUpdateOne {
	if t != nil {
		fiuo.SetPublishedParsed(*t)
	}
	return fiuo
}

// SetUpdated sets the "updated" field.
func (fiuo *FeedItemUpdateOne) SetUpdated(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetUpdated(s)
	return fiuo
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillableUpdated(s *string) *FeedItemUpdateOne {
	if s != nil {
		fiuo.SetUpdated(*s)
	}
	return fiuo
}

// ClearUpdated clears the value of the "updated" field.
func (fiuo *FeedItemUpdateOne) ClearUpdated() *FeedItemUpdateOne {
	fiuo.mutation.ClearUpdated()
	return fiuo
}

// SetUpdatedParsed sets the "updated_parsed" field.
func (fiuo *FeedItemUpdateOne) SetUpdatedParsed(t time.Time) *FeedItemUpdateOne {
	fiuo.mutation.SetUpdatedParsed(t)
	return fiuo
}

// SetNillableUpdatedParsed sets the "updated_parsed" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillableUpdatedParsed(t *time.Time) *FeedItemUpdateOne {
	if t != nil {
		fiuo.SetUpdatedParsed(*t)
	}
	return fiuo
}

// ClearUpdatedParsed clears the value of the "updated_parsed" field.
func (fiuo *FeedItemUpdateOne) ClearUpdatedParsed() *FeedItemUpdateOne {
	fiuo.mutation.ClearUpdatedParsed()
	return fiuo
}

// SetEnclosures sets the "enclosures" field.
func (fiuo *FeedItemUpdateOne) SetEnclosures(m []*modelfeed.Enclosure) *FeedItemUpdateOne {
	fiuo.mutation.SetEnclosures(m)
	return fiuo
}

// AppendEnclosures appends m to the "enclosures" field.
func (fiuo *FeedItemUpdateOne) AppendEnclosures(m []*modelfeed.Enclosure) *FeedItemUpdateOne {
	fiuo.mutation.AppendEnclosures(m)
	return fiuo
}

// ClearEnclosures clears the value of the "enclosures" field.
func (fiuo *FeedItemUpdateOne) ClearEnclosures() *FeedItemUpdateOne {
	fiuo.mutation.ClearEnclosures()
	return fiuo
}

// SetPublishPlatform sets the "publish_platform" field.
func (fiuo *FeedItemUpdateOne) SetPublishPlatform(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetPublishPlatform(s)
	return fiuo
}

// SetNillablePublishPlatform sets the "publish_platform" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillablePublishPlatform(s *string) *FeedItemUpdateOne {
	if s != nil {
		fiuo.SetPublishPlatform(*s)
	}
	return fiuo
}

// ClearPublishPlatform clears the value of the "publish_platform" field.
func (fiuo *FeedItemUpdateOne) ClearPublishPlatform() *FeedItemUpdateOne {
	fiuo.mutation.ClearPublishPlatform()
	return fiuo
}

// SetReadCount sets the "read_count" field.
func (fiuo *FeedItemUpdateOne) SetReadCount(i int64) *FeedItemUpdateOne {
	fiuo.mutation.ResetReadCount()
	fiuo.mutation.SetReadCount(i)
	return fiuo
}

// SetNillableReadCount sets the "read_count" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillableReadCount(i *int64) *FeedItemUpdateOne {
	if i != nil {
		fiuo.SetReadCount(*i)
	}
	return fiuo
}

// AddReadCount adds i to the "read_count" field.
func (fiuo *FeedItemUpdateOne) AddReadCount(i int64) *FeedItemUpdateOne {
	fiuo.mutation.AddReadCount(i)
	return fiuo
}

// SetDigestDescription sets the "digest_description" field.
func (fiuo *FeedItemUpdateOne) SetDigestDescription(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetDigestDescription(s)
	return fiuo
}

// SetNillableDigestDescription sets the "digest_description" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillableDigestDescription(s *string) *FeedItemUpdateOne {
	if s != nil {
		fiuo.SetDigestDescription(*s)
	}
	return fiuo
}

// ClearDigestDescription clears the value of the "digest_description" field.
func (fiuo *FeedItemUpdateOne) ClearDigestDescription() *FeedItemUpdateOne {
	fiuo.mutation.ClearDigestDescription()
	return fiuo
}

// SetDigestImages sets the "digest_images" field.
func (fiuo *FeedItemUpdateOne) SetDigestImages(m []*modelfeed.Image) *FeedItemUpdateOne {
	fiuo.mutation.SetDigestImages(m)
	return fiuo
}

// AppendDigestImages appends m to the "digest_images" field.
func (fiuo *FeedItemUpdateOne) AppendDigestImages(m []*modelfeed.Image) *FeedItemUpdateOne {
	fiuo.mutation.AppendDigestImages(m)
	return fiuo
}

// ClearDigestImages clears the value of the "digest_images" field.
func (fiuo *FeedItemUpdateOne) ClearDigestImages() *FeedItemUpdateOne {
	fiuo.mutation.ClearDigestImages()
	return fiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fiuo *FeedItemUpdateOne) SetUpdatedAt(t time.Time) *FeedItemUpdateOne {
	fiuo.mutation.SetUpdatedAt(t)
	return fiuo
}

// SetCreatedAt sets the "created_at" field.
func (fiuo *FeedItemUpdateOne) SetCreatedAt(t time.Time) *FeedItemUpdateOne {
	fiuo.mutation.SetCreatedAt(t)
	return fiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillableCreatedAt(t *time.Time) *FeedItemUpdateOne {
	if t != nil {
		fiuo.SetCreatedAt(*t)
	}
	return fiuo
}

// AddFeedItemCollectionIDs adds the "feed_item_collection" edge to the FeedItemCollection entity by IDs.
func (fiuo *FeedItemUpdateOne) AddFeedItemCollectionIDs(ids ...model.InternalID) *FeedItemUpdateOne {
	fiuo.mutation.AddFeedItemCollectionIDs(ids...)
	return fiuo
}

// AddFeedItemCollection adds the "feed_item_collection" edges to the FeedItemCollection entity.
func (fiuo *FeedItemUpdateOne) AddFeedItemCollection(f ...*FeedItemCollection) *FeedItemUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiuo.AddFeedItemCollectionIDs(ids...)
}

// Mutation returns the FeedItemMutation object of the builder.
func (fiuo *FeedItemUpdateOne) Mutation() *FeedItemMutation {
	return fiuo.mutation
}

// ClearFeedItemCollection clears all "feed_item_collection" edges to the FeedItemCollection entity.
func (fiuo *FeedItemUpdateOne) ClearFeedItemCollection() *FeedItemUpdateOne {
	fiuo.mutation.ClearFeedItemCollection()
	return fiuo
}

// RemoveFeedItemCollectionIDs removes the "feed_item_collection" edge to FeedItemCollection entities by IDs.
func (fiuo *FeedItemUpdateOne) RemoveFeedItemCollectionIDs(ids ...model.InternalID) *FeedItemUpdateOne {
	fiuo.mutation.RemoveFeedItemCollectionIDs(ids...)
	return fiuo
}

// RemoveFeedItemCollection removes "feed_item_collection" edges to FeedItemCollection entities.
func (fiuo *FeedItemUpdateOne) RemoveFeedItemCollection(f ...*FeedItemCollection) *FeedItemUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiuo.RemoveFeedItemCollectionIDs(ids...)
}

// Where appends a list predicates to the FeedItemUpdate builder.
func (fiuo *FeedItemUpdateOne) Where(ps ...predicate.FeedItem) *FeedItemUpdateOne {
	fiuo.mutation.Where(ps...)
	return fiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FeedItemUpdateOne) Select(field string, fields ...string) *FeedItemUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FeedItem entity.
func (fiuo *FeedItemUpdateOne) Save(ctx context.Context) (*FeedItem, error) {
	fiuo.defaults()
	return withHooks(ctx, fiuo.sqlSave, fiuo.mutation, fiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FeedItemUpdateOne) SaveX(ctx context.Context) *FeedItem {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FeedItemUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FeedItemUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiuo *FeedItemUpdateOne) defaults() {
	if _, ok := fiuo.mutation.UpdatedAt(); !ok {
		v := feeditem.UpdateDefaultUpdatedAt()
		fiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiuo *FeedItemUpdateOne) check() error {
	if fiuo.mutation.FeedCleared() && len(fiuo.mutation.FeedIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeedItem.feed"`)
	}
	return nil
}

func (fiuo *FeedItemUpdateOne) sqlSave(ctx context.Context) (_node *FeedItem, err error) {
	if err := fiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feeditem.Table, feeditem.Columns, sqlgraph.NewFieldSpec(feeditem.FieldID, field.TypeInt64))
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeedItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feeditem.FieldID)
		for _, f := range fields {
			if !feeditem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feeditem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.Title(); ok {
		_spec.SetField(feeditem.FieldTitle, field.TypeString, value)
	}
	if fiuo.mutation.TitleCleared() {
		_spec.ClearField(feeditem.FieldTitle, field.TypeString)
	}
	if value, ok := fiuo.mutation.Authors(); ok {
		_spec.SetField(feeditem.FieldAuthors, field.TypeJSON, value)
	}
	if value, ok := fiuo.mutation.AppendedAuthors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldAuthors, value)
		})
	}
	if fiuo.mutation.AuthorsCleared() {
		_spec.ClearField(feeditem.FieldAuthors, field.TypeJSON)
	}
	if value, ok := fiuo.mutation.Description(); ok {
		_spec.SetField(feeditem.FieldDescription, field.TypeString, value)
	}
	if fiuo.mutation.DescriptionCleared() {
		_spec.ClearField(feeditem.FieldDescription, field.TypeString)
	}
	if value, ok := fiuo.mutation.Content(); ok {
		_spec.SetField(feeditem.FieldContent, field.TypeString, value)
	}
	if fiuo.mutation.ContentCleared() {
		_spec.ClearField(feeditem.FieldContent, field.TypeString)
	}
	if value, ok := fiuo.mutation.Link(); ok {
		_spec.SetField(feeditem.FieldLink, field.TypeString, value)
	}
	if fiuo.mutation.LinkCleared() {
		_spec.ClearField(feeditem.FieldLink, field.TypeString)
	}
	if value, ok := fiuo.mutation.Image(); ok {
		_spec.SetField(feeditem.FieldImage, field.TypeJSON, value)
	}
	if fiuo.mutation.ImageCleared() {
		_spec.ClearField(feeditem.FieldImage, field.TypeJSON)
	}
	if value, ok := fiuo.mutation.Published(); ok {
		_spec.SetField(feeditem.FieldPublished, field.TypeString, value)
	}
	if fiuo.mutation.PublishedCleared() {
		_spec.ClearField(feeditem.FieldPublished, field.TypeString)
	}
	if value, ok := fiuo.mutation.PublishedParsed(); ok {
		_spec.SetField(feeditem.FieldPublishedParsed, field.TypeTime, value)
	}
	if value, ok := fiuo.mutation.Updated(); ok {
		_spec.SetField(feeditem.FieldUpdated, field.TypeString, value)
	}
	if fiuo.mutation.UpdatedCleared() {
		_spec.ClearField(feeditem.FieldUpdated, field.TypeString)
	}
	if value, ok := fiuo.mutation.UpdatedParsed(); ok {
		_spec.SetField(feeditem.FieldUpdatedParsed, field.TypeTime, value)
	}
	if fiuo.mutation.UpdatedParsedCleared() {
		_spec.ClearField(feeditem.FieldUpdatedParsed, field.TypeTime)
	}
	if value, ok := fiuo.mutation.Enclosures(); ok {
		_spec.SetField(feeditem.FieldEnclosures, field.TypeJSON, value)
	}
	if value, ok := fiuo.mutation.AppendedEnclosures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldEnclosures, value)
		})
	}
	if fiuo.mutation.EnclosuresCleared() {
		_spec.ClearField(feeditem.FieldEnclosures, field.TypeJSON)
	}
	if value, ok := fiuo.mutation.PublishPlatform(); ok {
		_spec.SetField(feeditem.FieldPublishPlatform, field.TypeString, value)
	}
	if fiuo.mutation.PublishPlatformCleared() {
		_spec.ClearField(feeditem.FieldPublishPlatform, field.TypeString)
	}
	if value, ok := fiuo.mutation.ReadCount(); ok {
		_spec.SetField(feeditem.FieldReadCount, field.TypeInt64, value)
	}
	if value, ok := fiuo.mutation.AddedReadCount(); ok {
		_spec.AddField(feeditem.FieldReadCount, field.TypeInt64, value)
	}
	if value, ok := fiuo.mutation.DigestDescription(); ok {
		_spec.SetField(feeditem.FieldDigestDescription, field.TypeString, value)
	}
	if fiuo.mutation.DigestDescriptionCleared() {
		_spec.ClearField(feeditem.FieldDigestDescription, field.TypeString)
	}
	if value, ok := fiuo.mutation.DigestImages(); ok {
		_spec.SetField(feeditem.FieldDigestImages, field.TypeJSON, value)
	}
	if value, ok := fiuo.mutation.AppendedDigestImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldDigestImages, value)
		})
	}
	if fiuo.mutation.DigestImagesCleared() {
		_spec.ClearField(feeditem.FieldDigestImages, field.TypeJSON)
	}
	if value, ok := fiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(feeditem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fiuo.mutation.CreatedAt(); ok {
		_spec.SetField(feeditem.FieldCreatedAt, field.TypeTime, value)
	}
	if fiuo.mutation.FeedItemCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feeditem.FeedItemCollectionTable,
			Columns: feeditem.FeedItemCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.RemovedFeedItemCollectionIDs(); len(nodes) > 0 && !fiuo.mutation.FeedItemCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feeditem.FeedItemCollectionTable,
			Columns: feeditem.FeedItemCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.FeedItemCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feeditem.FeedItemCollectionTable,
			Columns: feeditem.FeedItemCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FeedItem{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feeditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fiuo.mutation.done = true
	return _node, nil
}
