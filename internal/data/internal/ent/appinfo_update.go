// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/account"
	"github.com/tuihub/librarian/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/internal/data/internal/ent/appbinary"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinfo"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// AppInfoUpdate is the builder for updating AppInfo entities.
type AppInfoUpdate struct {
	config
	hooks    []Hook
	mutation *AppInfoMutation
}

// Where appends a list predicates to the AppInfoUpdate builder.
func (aiu *AppInfoUpdate) Where(ps ...predicate.AppInfo) *AppInfoUpdate {
	aiu.mutation.Where(ps...)
	return aiu
}

// SetInternal sets the "internal" field.
func (aiu *AppInfoUpdate) SetInternal(b bool) *AppInfoUpdate {
	aiu.mutation.SetInternal(b)
	return aiu
}

// SetNillableInternal sets the "internal" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableInternal(b *bool) *AppInfoUpdate {
	if b != nil {
		aiu.SetInternal(*b)
	}
	return aiu
}

// SetSource sets the "source" field.
func (aiu *AppInfoUpdate) SetSource(s string) *AppInfoUpdate {
	aiu.mutation.SetSource(s)
	return aiu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableSource(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetSource(*s)
	}
	return aiu
}

// SetSourceAppID sets the "source_app_id" field.
func (aiu *AppInfoUpdate) SetSourceAppID(s string) *AppInfoUpdate {
	aiu.mutation.SetSourceAppID(s)
	return aiu
}

// SetNillableSourceAppID sets the "source_app_id" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableSourceAppID(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetSourceAppID(*s)
	}
	return aiu
}

// SetSourceURL sets the "source_url" field.
func (aiu *AppInfoUpdate) SetSourceURL(s string) *AppInfoUpdate {
	aiu.mutation.SetSourceURL(s)
	return aiu
}

// SetNillableSourceURL sets the "source_url" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableSourceURL(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetSourceURL(*s)
	}
	return aiu
}

// ClearSourceURL clears the value of the "source_url" field.
func (aiu *AppInfoUpdate) ClearSourceURL() *AppInfoUpdate {
	aiu.mutation.ClearSourceURL()
	return aiu
}

// SetName sets the "name" field.
func (aiu *AppInfoUpdate) SetName(s string) *AppInfoUpdate {
	aiu.mutation.SetName(s)
	return aiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableName(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetName(*s)
	}
	return aiu
}

// SetType sets the "type" field.
func (aiu *AppInfoUpdate) SetType(a appinfo.Type) *AppInfoUpdate {
	aiu.mutation.SetType(a)
	return aiu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableType(a *appinfo.Type) *AppInfoUpdate {
	if a != nil {
		aiu.SetType(*a)
	}
	return aiu
}

// SetShortDescription sets the "short_description" field.
func (aiu *AppInfoUpdate) SetShortDescription(s string) *AppInfoUpdate {
	aiu.mutation.SetShortDescription(s)
	return aiu
}

// SetNillableShortDescription sets the "short_description" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableShortDescription(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetShortDescription(*s)
	}
	return aiu
}

// ClearShortDescription clears the value of the "short_description" field.
func (aiu *AppInfoUpdate) ClearShortDescription() *AppInfoUpdate {
	aiu.mutation.ClearShortDescription()
	return aiu
}

// SetDescription sets the "description" field.
func (aiu *AppInfoUpdate) SetDescription(s string) *AppInfoUpdate {
	aiu.mutation.SetDescription(s)
	return aiu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableDescription(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetDescription(*s)
	}
	return aiu
}

// ClearDescription clears the value of the "description" field.
func (aiu *AppInfoUpdate) ClearDescription() *AppInfoUpdate {
	aiu.mutation.ClearDescription()
	return aiu
}

// SetIconImageURL sets the "icon_image_url" field.
func (aiu *AppInfoUpdate) SetIconImageURL(s string) *AppInfoUpdate {
	aiu.mutation.SetIconImageURL(s)
	return aiu
}

// SetNillableIconImageURL sets the "icon_image_url" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableIconImageURL(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetIconImageURL(*s)
	}
	return aiu
}

// ClearIconImageURL clears the value of the "icon_image_url" field.
func (aiu *AppInfoUpdate) ClearIconImageURL() *AppInfoUpdate {
	aiu.mutation.ClearIconImageURL()
	return aiu
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (aiu *AppInfoUpdate) SetBackgroundImageURL(s string) *AppInfoUpdate {
	aiu.mutation.SetBackgroundImageURL(s)
	return aiu
}

// SetNillableBackgroundImageURL sets the "background_image_url" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableBackgroundImageURL(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetBackgroundImageURL(*s)
	}
	return aiu
}

// ClearBackgroundImageURL clears the value of the "background_image_url" field.
func (aiu *AppInfoUpdate) ClearBackgroundImageURL() *AppInfoUpdate {
	aiu.mutation.ClearBackgroundImageURL()
	return aiu
}

// SetCoverImageURL sets the "cover_image_url" field.
func (aiu *AppInfoUpdate) SetCoverImageURL(s string) *AppInfoUpdate {
	aiu.mutation.SetCoverImageURL(s)
	return aiu
}

// SetNillableCoverImageURL sets the "cover_image_url" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableCoverImageURL(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetCoverImageURL(*s)
	}
	return aiu
}

// ClearCoverImageURL clears the value of the "cover_image_url" field.
func (aiu *AppInfoUpdate) ClearCoverImageURL() *AppInfoUpdate {
	aiu.mutation.ClearCoverImageURL()
	return aiu
}

// SetReleaseDate sets the "release_date" field.
func (aiu *AppInfoUpdate) SetReleaseDate(s string) *AppInfoUpdate {
	aiu.mutation.SetReleaseDate(s)
	return aiu
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableReleaseDate(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetReleaseDate(*s)
	}
	return aiu
}

// ClearReleaseDate clears the value of the "release_date" field.
func (aiu *AppInfoUpdate) ClearReleaseDate() *AppInfoUpdate {
	aiu.mutation.ClearReleaseDate()
	return aiu
}

// SetDeveloper sets the "developer" field.
func (aiu *AppInfoUpdate) SetDeveloper(s string) *AppInfoUpdate {
	aiu.mutation.SetDeveloper(s)
	return aiu
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableDeveloper(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetDeveloper(*s)
	}
	return aiu
}

// ClearDeveloper clears the value of the "developer" field.
func (aiu *AppInfoUpdate) ClearDeveloper() *AppInfoUpdate {
	aiu.mutation.ClearDeveloper()
	return aiu
}

// SetPublisher sets the "publisher" field.
func (aiu *AppInfoUpdate) SetPublisher(s string) *AppInfoUpdate {
	aiu.mutation.SetPublisher(s)
	return aiu
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillablePublisher(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetPublisher(*s)
	}
	return aiu
}

// ClearPublisher clears the value of the "publisher" field.
func (aiu *AppInfoUpdate) ClearPublisher() *AppInfoUpdate {
	aiu.mutation.ClearPublisher()
	return aiu
}

// SetVersion sets the "version" field.
func (aiu *AppInfoUpdate) SetVersion(s string) *AppInfoUpdate {
	aiu.mutation.SetVersion(s)
	return aiu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableVersion(s *string) *AppInfoUpdate {
	if s != nil {
		aiu.SetVersion(*s)
	}
	return aiu
}

// ClearVersion clears the value of the "version" field.
func (aiu *AppInfoUpdate) ClearVersion() *AppInfoUpdate {
	aiu.mutation.ClearVersion()
	return aiu
}

// SetUpdatedAt sets the "updated_at" field.
func (aiu *AppInfoUpdate) SetUpdatedAt(t time.Time) *AppInfoUpdate {
	aiu.mutation.SetUpdatedAt(t)
	return aiu
}

// SetCreatedAt sets the "created_at" field.
func (aiu *AppInfoUpdate) SetCreatedAt(t time.Time) *AppInfoUpdate {
	aiu.mutation.SetCreatedAt(t)
	return aiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableCreatedAt(t *time.Time) *AppInfoUpdate {
	if t != nil {
		aiu.SetCreatedAt(*t)
	}
	return aiu
}

// AddPurchasedByAccountIDs adds the "purchased_by_account" edge to the Account entity by IDs.
func (aiu *AppInfoUpdate) AddPurchasedByAccountIDs(ids ...model.InternalID) *AppInfoUpdate {
	aiu.mutation.AddPurchasedByAccountIDs(ids...)
	return aiu
}

// AddPurchasedByAccount adds the "purchased_by_account" edges to the Account entity.
func (aiu *AppInfoUpdate) AddPurchasedByAccount(a ...*Account) *AppInfoUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiu.AddPurchasedByAccountIDs(ids...)
}

// AddPurchasedByUserIDs adds the "purchased_by_user" edge to the User entity by IDs.
func (aiu *AppInfoUpdate) AddPurchasedByUserIDs(ids ...model.InternalID) *AppInfoUpdate {
	aiu.mutation.AddPurchasedByUserIDs(ids...)
	return aiu
}

// AddPurchasedByUser adds the "purchased_by_user" edges to the User entity.
func (aiu *AppInfoUpdate) AddPurchasedByUser(u ...*User) *AppInfoUpdate {
	ids := make([]model.InternalID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return aiu.AddPurchasedByUserIDs(ids...)
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (aiu *AppInfoUpdate) AddAppIDs(ids ...model.InternalID) *AppInfoUpdate {
	aiu.mutation.AddAppIDs(ids...)
	return aiu
}

// AddApp adds the "app" edges to the App entity.
func (aiu *AppInfoUpdate) AddApp(a ...*App) *AppInfoUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiu.AddAppIDs(ids...)
}

// AddAppBinaryIDs adds the "app_binary" edge to the AppBinary entity by IDs.
func (aiu *AppInfoUpdate) AddAppBinaryIDs(ids ...model.InternalID) *AppInfoUpdate {
	aiu.mutation.AddAppBinaryIDs(ids...)
	return aiu
}

// AddAppBinary adds the "app_binary" edges to the AppBinary entity.
func (aiu *AppInfoUpdate) AddAppBinary(a ...*AppBinary) *AppInfoUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiu.AddAppBinaryIDs(ids...)
}

// SetBindInternalID sets the "bind_internal" edge to the AppInfo entity by ID.
func (aiu *AppInfoUpdate) SetBindInternalID(id model.InternalID) *AppInfoUpdate {
	aiu.mutation.SetBindInternalID(id)
	return aiu
}

// SetNillableBindInternalID sets the "bind_internal" edge to the AppInfo entity by ID if the given value is not nil.
func (aiu *AppInfoUpdate) SetNillableBindInternalID(id *model.InternalID) *AppInfoUpdate {
	if id != nil {
		aiu = aiu.SetBindInternalID(*id)
	}
	return aiu
}

// SetBindInternal sets the "bind_internal" edge to the AppInfo entity.
func (aiu *AppInfoUpdate) SetBindInternal(a *AppInfo) *AppInfoUpdate {
	return aiu.SetBindInternalID(a.ID)
}

// AddBindExternalIDs adds the "bind_external" edge to the AppInfo entity by IDs.
func (aiu *AppInfoUpdate) AddBindExternalIDs(ids ...model.InternalID) *AppInfoUpdate {
	aiu.mutation.AddBindExternalIDs(ids...)
	return aiu
}

// AddBindExternal adds the "bind_external" edges to the AppInfo entity.
func (aiu *AppInfoUpdate) AddBindExternal(a ...*AppInfo) *AppInfoUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiu.AddBindExternalIDs(ids...)
}

// Mutation returns the AppInfoMutation object of the builder.
func (aiu *AppInfoUpdate) Mutation() *AppInfoMutation {
	return aiu.mutation
}

// ClearPurchasedByAccount clears all "purchased_by_account" edges to the Account entity.
func (aiu *AppInfoUpdate) ClearPurchasedByAccount() *AppInfoUpdate {
	aiu.mutation.ClearPurchasedByAccount()
	return aiu
}

// RemovePurchasedByAccountIDs removes the "purchased_by_account" edge to Account entities by IDs.
func (aiu *AppInfoUpdate) RemovePurchasedByAccountIDs(ids ...model.InternalID) *AppInfoUpdate {
	aiu.mutation.RemovePurchasedByAccountIDs(ids...)
	return aiu
}

// RemovePurchasedByAccount removes "purchased_by_account" edges to Account entities.
func (aiu *AppInfoUpdate) RemovePurchasedByAccount(a ...*Account) *AppInfoUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiu.RemovePurchasedByAccountIDs(ids...)
}

// ClearPurchasedByUser clears all "purchased_by_user" edges to the User entity.
func (aiu *AppInfoUpdate) ClearPurchasedByUser() *AppInfoUpdate {
	aiu.mutation.ClearPurchasedByUser()
	return aiu
}

// RemovePurchasedByUserIDs removes the "purchased_by_user" edge to User entities by IDs.
func (aiu *AppInfoUpdate) RemovePurchasedByUserIDs(ids ...model.InternalID) *AppInfoUpdate {
	aiu.mutation.RemovePurchasedByUserIDs(ids...)
	return aiu
}

// RemovePurchasedByUser removes "purchased_by_user" edges to User entities.
func (aiu *AppInfoUpdate) RemovePurchasedByUser(u ...*User) *AppInfoUpdate {
	ids := make([]model.InternalID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return aiu.RemovePurchasedByUserIDs(ids...)
}

// ClearApp clears all "app" edges to the App entity.
func (aiu *AppInfoUpdate) ClearApp() *AppInfoUpdate {
	aiu.mutation.ClearApp()
	return aiu
}

// RemoveAppIDs removes the "app" edge to App entities by IDs.
func (aiu *AppInfoUpdate) RemoveAppIDs(ids ...model.InternalID) *AppInfoUpdate {
	aiu.mutation.RemoveAppIDs(ids...)
	return aiu
}

// RemoveApp removes "app" edges to App entities.
func (aiu *AppInfoUpdate) RemoveApp(a ...*App) *AppInfoUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiu.RemoveAppIDs(ids...)
}

// ClearAppBinary clears all "app_binary" edges to the AppBinary entity.
func (aiu *AppInfoUpdate) ClearAppBinary() *AppInfoUpdate {
	aiu.mutation.ClearAppBinary()
	return aiu
}

// RemoveAppBinaryIDs removes the "app_binary" edge to AppBinary entities by IDs.
func (aiu *AppInfoUpdate) RemoveAppBinaryIDs(ids ...model.InternalID) *AppInfoUpdate {
	aiu.mutation.RemoveAppBinaryIDs(ids...)
	return aiu
}

// RemoveAppBinary removes "app_binary" edges to AppBinary entities.
func (aiu *AppInfoUpdate) RemoveAppBinary(a ...*AppBinary) *AppInfoUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiu.RemoveAppBinaryIDs(ids...)
}

// ClearBindInternal clears the "bind_internal" edge to the AppInfo entity.
func (aiu *AppInfoUpdate) ClearBindInternal() *AppInfoUpdate {
	aiu.mutation.ClearBindInternal()
	return aiu
}

// ClearBindExternal clears all "bind_external" edges to the AppInfo entity.
func (aiu *AppInfoUpdate) ClearBindExternal() *AppInfoUpdate {
	aiu.mutation.ClearBindExternal()
	return aiu
}

// RemoveBindExternalIDs removes the "bind_external" edge to AppInfo entities by IDs.
func (aiu *AppInfoUpdate) RemoveBindExternalIDs(ids ...model.InternalID) *AppInfoUpdate {
	aiu.mutation.RemoveBindExternalIDs(ids...)
	return aiu
}

// RemoveBindExternal removes "bind_external" edges to AppInfo entities.
func (aiu *AppInfoUpdate) RemoveBindExternal(a ...*AppInfo) *AppInfoUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiu.RemoveBindExternalIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *AppInfoUpdate) Save(ctx context.Context) (int, error) {
	aiu.defaults()
	return withHooks(ctx, aiu.sqlSave, aiu.mutation, aiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *AppInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *AppInfoUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *AppInfoUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiu *AppInfoUpdate) defaults() {
	if _, ok := aiu.mutation.UpdatedAt(); !ok {
		v := appinfo.UpdateDefaultUpdatedAt()
		aiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiu *AppInfoUpdate) check() error {
	if v, ok := aiu.mutation.GetType(); ok {
		if err := appinfo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AppInfo.type": %w`, err)}
		}
	}
	return nil
}

func (aiu *AppInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appinfo.Table, appinfo.Columns, sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64))
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.Internal(); ok {
		_spec.SetField(appinfo.FieldInternal, field.TypeBool, value)
	}
	if value, ok := aiu.mutation.Source(); ok {
		_spec.SetField(appinfo.FieldSource, field.TypeString, value)
	}
	if value, ok := aiu.mutation.SourceAppID(); ok {
		_spec.SetField(appinfo.FieldSourceAppID, field.TypeString, value)
	}
	if value, ok := aiu.mutation.SourceURL(); ok {
		_spec.SetField(appinfo.FieldSourceURL, field.TypeString, value)
	}
	if aiu.mutation.SourceURLCleared() {
		_spec.ClearField(appinfo.FieldSourceURL, field.TypeString)
	}
	if value, ok := aiu.mutation.Name(); ok {
		_spec.SetField(appinfo.FieldName, field.TypeString, value)
	}
	if value, ok := aiu.mutation.GetType(); ok {
		_spec.SetField(appinfo.FieldType, field.TypeEnum, value)
	}
	if value, ok := aiu.mutation.ShortDescription(); ok {
		_spec.SetField(appinfo.FieldShortDescription, field.TypeString, value)
	}
	if aiu.mutation.ShortDescriptionCleared() {
		_spec.ClearField(appinfo.FieldShortDescription, field.TypeString)
	}
	if value, ok := aiu.mutation.Description(); ok {
		_spec.SetField(appinfo.FieldDescription, field.TypeString, value)
	}
	if aiu.mutation.DescriptionCleared() {
		_spec.ClearField(appinfo.FieldDescription, field.TypeString)
	}
	if value, ok := aiu.mutation.IconImageURL(); ok {
		_spec.SetField(appinfo.FieldIconImageURL, field.TypeString, value)
	}
	if aiu.mutation.IconImageURLCleared() {
		_spec.ClearField(appinfo.FieldIconImageURL, field.TypeString)
	}
	if value, ok := aiu.mutation.BackgroundImageURL(); ok {
		_spec.SetField(appinfo.FieldBackgroundImageURL, field.TypeString, value)
	}
	if aiu.mutation.BackgroundImageURLCleared() {
		_spec.ClearField(appinfo.FieldBackgroundImageURL, field.TypeString)
	}
	if value, ok := aiu.mutation.CoverImageURL(); ok {
		_spec.SetField(appinfo.FieldCoverImageURL, field.TypeString, value)
	}
	if aiu.mutation.CoverImageURLCleared() {
		_spec.ClearField(appinfo.FieldCoverImageURL, field.TypeString)
	}
	if value, ok := aiu.mutation.ReleaseDate(); ok {
		_spec.SetField(appinfo.FieldReleaseDate, field.TypeString, value)
	}
	if aiu.mutation.ReleaseDateCleared() {
		_spec.ClearField(appinfo.FieldReleaseDate, field.TypeString)
	}
	if value, ok := aiu.mutation.Developer(); ok {
		_spec.SetField(appinfo.FieldDeveloper, field.TypeString, value)
	}
	if aiu.mutation.DeveloperCleared() {
		_spec.ClearField(appinfo.FieldDeveloper, field.TypeString)
	}
	if value, ok := aiu.mutation.Publisher(); ok {
		_spec.SetField(appinfo.FieldPublisher, field.TypeString, value)
	}
	if aiu.mutation.PublisherCleared() {
		_spec.ClearField(appinfo.FieldPublisher, field.TypeString)
	}
	if value, ok := aiu.mutation.Version(); ok {
		_spec.SetField(appinfo.FieldVersion, field.TypeString, value)
	}
	if aiu.mutation.VersionCleared() {
		_spec.ClearField(appinfo.FieldVersion, field.TypeString)
	}
	if value, ok := aiu.mutation.UpdatedAt(); ok {
		_spec.SetField(appinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aiu.mutation.CreatedAt(); ok {
		_spec.SetField(appinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if aiu.mutation.PurchasedByAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByAccountTable,
			Columns: appinfo.PurchasedByAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.RemovedPurchasedByAccountIDs(); len(nodes) > 0 && !aiu.mutation.PurchasedByAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByAccountTable,
			Columns: appinfo.PurchasedByAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.PurchasedByAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByAccountTable,
			Columns: appinfo.PurchasedByAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.PurchasedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByUserTable,
			Columns: appinfo.PurchasedByUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.RemovedPurchasedByUserIDs(); len(nodes) > 0 && !aiu.mutation.PurchasedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByUserTable,
			Columns: appinfo.PurchasedByUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.PurchasedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByUserTable,
			Columns: appinfo.PurchasedByUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppTable,
			Columns: []string{appinfo.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.RemovedAppIDs(); len(nodes) > 0 && !aiu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppTable,
			Columns: []string{appinfo.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppTable,
			Columns: []string{appinfo.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.AppBinaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppBinaryTable,
			Columns: []string{appinfo.AppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appbinary.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.RemovedAppBinaryIDs(); len(nodes) > 0 && !aiu.mutation.AppBinaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppBinaryTable,
			Columns: []string{appinfo.AppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appbinary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.AppBinaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppBinaryTable,
			Columns: []string{appinfo.AppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appbinary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.BindInternalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appinfo.BindInternalTable,
			Columns: []string{appinfo.BindInternalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.BindInternalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appinfo.BindInternalTable,
			Columns: []string{appinfo.BindInternalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.BindExternalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.BindExternalTable,
			Columns: []string{appinfo.BindExternalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.RemovedBindExternalIDs(); len(nodes) > 0 && !aiu.mutation.BindExternalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.BindExternalTable,
			Columns: []string{appinfo.BindExternalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.BindExternalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.BindExternalTable,
			Columns: []string{appinfo.BindExternalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aiu.mutation.done = true
	return n, nil
}

// AppInfoUpdateOne is the builder for updating a single AppInfo entity.
type AppInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppInfoMutation
}

// SetInternal sets the "internal" field.
func (aiuo *AppInfoUpdateOne) SetInternal(b bool) *AppInfoUpdateOne {
	aiuo.mutation.SetInternal(b)
	return aiuo
}

// SetNillableInternal sets the "internal" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableInternal(b *bool) *AppInfoUpdateOne {
	if b != nil {
		aiuo.SetInternal(*b)
	}
	return aiuo
}

// SetSource sets the "source" field.
func (aiuo *AppInfoUpdateOne) SetSource(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetSource(s)
	return aiuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableSource(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetSource(*s)
	}
	return aiuo
}

// SetSourceAppID sets the "source_app_id" field.
func (aiuo *AppInfoUpdateOne) SetSourceAppID(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetSourceAppID(s)
	return aiuo
}

// SetNillableSourceAppID sets the "source_app_id" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableSourceAppID(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetSourceAppID(*s)
	}
	return aiuo
}

// SetSourceURL sets the "source_url" field.
func (aiuo *AppInfoUpdateOne) SetSourceURL(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetSourceURL(s)
	return aiuo
}

// SetNillableSourceURL sets the "source_url" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableSourceURL(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetSourceURL(*s)
	}
	return aiuo
}

// ClearSourceURL clears the value of the "source_url" field.
func (aiuo *AppInfoUpdateOne) ClearSourceURL() *AppInfoUpdateOne {
	aiuo.mutation.ClearSourceURL()
	return aiuo
}

// SetName sets the "name" field.
func (aiuo *AppInfoUpdateOne) SetName(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetName(s)
	return aiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableName(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetName(*s)
	}
	return aiuo
}

// SetType sets the "type" field.
func (aiuo *AppInfoUpdateOne) SetType(a appinfo.Type) *AppInfoUpdateOne {
	aiuo.mutation.SetType(a)
	return aiuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableType(a *appinfo.Type) *AppInfoUpdateOne {
	if a != nil {
		aiuo.SetType(*a)
	}
	return aiuo
}

// SetShortDescription sets the "short_description" field.
func (aiuo *AppInfoUpdateOne) SetShortDescription(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetShortDescription(s)
	return aiuo
}

// SetNillableShortDescription sets the "short_description" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableShortDescription(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetShortDescription(*s)
	}
	return aiuo
}

// ClearShortDescription clears the value of the "short_description" field.
func (aiuo *AppInfoUpdateOne) ClearShortDescription() *AppInfoUpdateOne {
	aiuo.mutation.ClearShortDescription()
	return aiuo
}

// SetDescription sets the "description" field.
func (aiuo *AppInfoUpdateOne) SetDescription(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetDescription(s)
	return aiuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableDescription(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetDescription(*s)
	}
	return aiuo
}

// ClearDescription clears the value of the "description" field.
func (aiuo *AppInfoUpdateOne) ClearDescription() *AppInfoUpdateOne {
	aiuo.mutation.ClearDescription()
	return aiuo
}

// SetIconImageURL sets the "icon_image_url" field.
func (aiuo *AppInfoUpdateOne) SetIconImageURL(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetIconImageURL(s)
	return aiuo
}

// SetNillableIconImageURL sets the "icon_image_url" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableIconImageURL(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetIconImageURL(*s)
	}
	return aiuo
}

// ClearIconImageURL clears the value of the "icon_image_url" field.
func (aiuo *AppInfoUpdateOne) ClearIconImageURL() *AppInfoUpdateOne {
	aiuo.mutation.ClearIconImageURL()
	return aiuo
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (aiuo *AppInfoUpdateOne) SetBackgroundImageURL(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetBackgroundImageURL(s)
	return aiuo
}

// SetNillableBackgroundImageURL sets the "background_image_url" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableBackgroundImageURL(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetBackgroundImageURL(*s)
	}
	return aiuo
}

// ClearBackgroundImageURL clears the value of the "background_image_url" field.
func (aiuo *AppInfoUpdateOne) ClearBackgroundImageURL() *AppInfoUpdateOne {
	aiuo.mutation.ClearBackgroundImageURL()
	return aiuo
}

// SetCoverImageURL sets the "cover_image_url" field.
func (aiuo *AppInfoUpdateOne) SetCoverImageURL(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetCoverImageURL(s)
	return aiuo
}

// SetNillableCoverImageURL sets the "cover_image_url" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableCoverImageURL(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetCoverImageURL(*s)
	}
	return aiuo
}

// ClearCoverImageURL clears the value of the "cover_image_url" field.
func (aiuo *AppInfoUpdateOne) ClearCoverImageURL() *AppInfoUpdateOne {
	aiuo.mutation.ClearCoverImageURL()
	return aiuo
}

// SetReleaseDate sets the "release_date" field.
func (aiuo *AppInfoUpdateOne) SetReleaseDate(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetReleaseDate(s)
	return aiuo
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableReleaseDate(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetReleaseDate(*s)
	}
	return aiuo
}

// ClearReleaseDate clears the value of the "release_date" field.
func (aiuo *AppInfoUpdateOne) ClearReleaseDate() *AppInfoUpdateOne {
	aiuo.mutation.ClearReleaseDate()
	return aiuo
}

// SetDeveloper sets the "developer" field.
func (aiuo *AppInfoUpdateOne) SetDeveloper(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetDeveloper(s)
	return aiuo
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableDeveloper(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetDeveloper(*s)
	}
	return aiuo
}

// ClearDeveloper clears the value of the "developer" field.
func (aiuo *AppInfoUpdateOne) ClearDeveloper() *AppInfoUpdateOne {
	aiuo.mutation.ClearDeveloper()
	return aiuo
}

// SetPublisher sets the "publisher" field.
func (aiuo *AppInfoUpdateOne) SetPublisher(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetPublisher(s)
	return aiuo
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillablePublisher(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetPublisher(*s)
	}
	return aiuo
}

// ClearPublisher clears the value of the "publisher" field.
func (aiuo *AppInfoUpdateOne) ClearPublisher() *AppInfoUpdateOne {
	aiuo.mutation.ClearPublisher()
	return aiuo
}

// SetVersion sets the "version" field.
func (aiuo *AppInfoUpdateOne) SetVersion(s string) *AppInfoUpdateOne {
	aiuo.mutation.SetVersion(s)
	return aiuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableVersion(s *string) *AppInfoUpdateOne {
	if s != nil {
		aiuo.SetVersion(*s)
	}
	return aiuo
}

// ClearVersion clears the value of the "version" field.
func (aiuo *AppInfoUpdateOne) ClearVersion() *AppInfoUpdateOne {
	aiuo.mutation.ClearVersion()
	return aiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (aiuo *AppInfoUpdateOne) SetUpdatedAt(t time.Time) *AppInfoUpdateOne {
	aiuo.mutation.SetUpdatedAt(t)
	return aiuo
}

// SetCreatedAt sets the "created_at" field.
func (aiuo *AppInfoUpdateOne) SetCreatedAt(t time.Time) *AppInfoUpdateOne {
	aiuo.mutation.SetCreatedAt(t)
	return aiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableCreatedAt(t *time.Time) *AppInfoUpdateOne {
	if t != nil {
		aiuo.SetCreatedAt(*t)
	}
	return aiuo
}

// AddPurchasedByAccountIDs adds the "purchased_by_account" edge to the Account entity by IDs.
func (aiuo *AppInfoUpdateOne) AddPurchasedByAccountIDs(ids ...model.InternalID) *AppInfoUpdateOne {
	aiuo.mutation.AddPurchasedByAccountIDs(ids...)
	return aiuo
}

// AddPurchasedByAccount adds the "purchased_by_account" edges to the Account entity.
func (aiuo *AppInfoUpdateOne) AddPurchasedByAccount(a ...*Account) *AppInfoUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiuo.AddPurchasedByAccountIDs(ids...)
}

// AddPurchasedByUserIDs adds the "purchased_by_user" edge to the User entity by IDs.
func (aiuo *AppInfoUpdateOne) AddPurchasedByUserIDs(ids ...model.InternalID) *AppInfoUpdateOne {
	aiuo.mutation.AddPurchasedByUserIDs(ids...)
	return aiuo
}

// AddPurchasedByUser adds the "purchased_by_user" edges to the User entity.
func (aiuo *AppInfoUpdateOne) AddPurchasedByUser(u ...*User) *AppInfoUpdateOne {
	ids := make([]model.InternalID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return aiuo.AddPurchasedByUserIDs(ids...)
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (aiuo *AppInfoUpdateOne) AddAppIDs(ids ...model.InternalID) *AppInfoUpdateOne {
	aiuo.mutation.AddAppIDs(ids...)
	return aiuo
}

// AddApp adds the "app" edges to the App entity.
func (aiuo *AppInfoUpdateOne) AddApp(a ...*App) *AppInfoUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiuo.AddAppIDs(ids...)
}

// AddAppBinaryIDs adds the "app_binary" edge to the AppBinary entity by IDs.
func (aiuo *AppInfoUpdateOne) AddAppBinaryIDs(ids ...model.InternalID) *AppInfoUpdateOne {
	aiuo.mutation.AddAppBinaryIDs(ids...)
	return aiuo
}

// AddAppBinary adds the "app_binary" edges to the AppBinary entity.
func (aiuo *AppInfoUpdateOne) AddAppBinary(a ...*AppBinary) *AppInfoUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiuo.AddAppBinaryIDs(ids...)
}

// SetBindInternalID sets the "bind_internal" edge to the AppInfo entity by ID.
func (aiuo *AppInfoUpdateOne) SetBindInternalID(id model.InternalID) *AppInfoUpdateOne {
	aiuo.mutation.SetBindInternalID(id)
	return aiuo
}

// SetNillableBindInternalID sets the "bind_internal" edge to the AppInfo entity by ID if the given value is not nil.
func (aiuo *AppInfoUpdateOne) SetNillableBindInternalID(id *model.InternalID) *AppInfoUpdateOne {
	if id != nil {
		aiuo = aiuo.SetBindInternalID(*id)
	}
	return aiuo
}

// SetBindInternal sets the "bind_internal" edge to the AppInfo entity.
func (aiuo *AppInfoUpdateOne) SetBindInternal(a *AppInfo) *AppInfoUpdateOne {
	return aiuo.SetBindInternalID(a.ID)
}

// AddBindExternalIDs adds the "bind_external" edge to the AppInfo entity by IDs.
func (aiuo *AppInfoUpdateOne) AddBindExternalIDs(ids ...model.InternalID) *AppInfoUpdateOne {
	aiuo.mutation.AddBindExternalIDs(ids...)
	return aiuo
}

// AddBindExternal adds the "bind_external" edges to the AppInfo entity.
func (aiuo *AppInfoUpdateOne) AddBindExternal(a ...*AppInfo) *AppInfoUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiuo.AddBindExternalIDs(ids...)
}

// Mutation returns the AppInfoMutation object of the builder.
func (aiuo *AppInfoUpdateOne) Mutation() *AppInfoMutation {
	return aiuo.mutation
}

// ClearPurchasedByAccount clears all "purchased_by_account" edges to the Account entity.
func (aiuo *AppInfoUpdateOne) ClearPurchasedByAccount() *AppInfoUpdateOne {
	aiuo.mutation.ClearPurchasedByAccount()
	return aiuo
}

// RemovePurchasedByAccountIDs removes the "purchased_by_account" edge to Account entities by IDs.
func (aiuo *AppInfoUpdateOne) RemovePurchasedByAccountIDs(ids ...model.InternalID) *AppInfoUpdateOne {
	aiuo.mutation.RemovePurchasedByAccountIDs(ids...)
	return aiuo
}

// RemovePurchasedByAccount removes "purchased_by_account" edges to Account entities.
func (aiuo *AppInfoUpdateOne) RemovePurchasedByAccount(a ...*Account) *AppInfoUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiuo.RemovePurchasedByAccountIDs(ids...)
}

// ClearPurchasedByUser clears all "purchased_by_user" edges to the User entity.
func (aiuo *AppInfoUpdateOne) ClearPurchasedByUser() *AppInfoUpdateOne {
	aiuo.mutation.ClearPurchasedByUser()
	return aiuo
}

// RemovePurchasedByUserIDs removes the "purchased_by_user" edge to User entities by IDs.
func (aiuo *AppInfoUpdateOne) RemovePurchasedByUserIDs(ids ...model.InternalID) *AppInfoUpdateOne {
	aiuo.mutation.RemovePurchasedByUserIDs(ids...)
	return aiuo
}

// RemovePurchasedByUser removes "purchased_by_user" edges to User entities.
func (aiuo *AppInfoUpdateOne) RemovePurchasedByUser(u ...*User) *AppInfoUpdateOne {
	ids := make([]model.InternalID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return aiuo.RemovePurchasedByUserIDs(ids...)
}

// ClearApp clears all "app" edges to the App entity.
func (aiuo *AppInfoUpdateOne) ClearApp() *AppInfoUpdateOne {
	aiuo.mutation.ClearApp()
	return aiuo
}

// RemoveAppIDs removes the "app" edge to App entities by IDs.
func (aiuo *AppInfoUpdateOne) RemoveAppIDs(ids ...model.InternalID) *AppInfoUpdateOne {
	aiuo.mutation.RemoveAppIDs(ids...)
	return aiuo
}

// RemoveApp removes "app" edges to App entities.
func (aiuo *AppInfoUpdateOne) RemoveApp(a ...*App) *AppInfoUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiuo.RemoveAppIDs(ids...)
}

// ClearAppBinary clears all "app_binary" edges to the AppBinary entity.
func (aiuo *AppInfoUpdateOne) ClearAppBinary() *AppInfoUpdateOne {
	aiuo.mutation.ClearAppBinary()
	return aiuo
}

// RemoveAppBinaryIDs removes the "app_binary" edge to AppBinary entities by IDs.
func (aiuo *AppInfoUpdateOne) RemoveAppBinaryIDs(ids ...model.InternalID) *AppInfoUpdateOne {
	aiuo.mutation.RemoveAppBinaryIDs(ids...)
	return aiuo
}

// RemoveAppBinary removes "app_binary" edges to AppBinary entities.
func (aiuo *AppInfoUpdateOne) RemoveAppBinary(a ...*AppBinary) *AppInfoUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiuo.RemoveAppBinaryIDs(ids...)
}

// ClearBindInternal clears the "bind_internal" edge to the AppInfo entity.
func (aiuo *AppInfoUpdateOne) ClearBindInternal() *AppInfoUpdateOne {
	aiuo.mutation.ClearBindInternal()
	return aiuo
}

// ClearBindExternal clears all "bind_external" edges to the AppInfo entity.
func (aiuo *AppInfoUpdateOne) ClearBindExternal() *AppInfoUpdateOne {
	aiuo.mutation.ClearBindExternal()
	return aiuo
}

// RemoveBindExternalIDs removes the "bind_external" edge to AppInfo entities by IDs.
func (aiuo *AppInfoUpdateOne) RemoveBindExternalIDs(ids ...model.InternalID) *AppInfoUpdateOne {
	aiuo.mutation.RemoveBindExternalIDs(ids...)
	return aiuo
}

// RemoveBindExternal removes "bind_external" edges to AppInfo entities.
func (aiuo *AppInfoUpdateOne) RemoveBindExternal(a ...*AppInfo) *AppInfoUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiuo.RemoveBindExternalIDs(ids...)
}

// Where appends a list predicates to the AppInfoUpdate builder.
func (aiuo *AppInfoUpdateOne) Where(ps ...predicate.AppInfo) *AppInfoUpdateOne {
	aiuo.mutation.Where(ps...)
	return aiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiuo *AppInfoUpdateOne) Select(field string, fields ...string) *AppInfoUpdateOne {
	aiuo.fields = append([]string{field}, fields...)
	return aiuo
}

// Save executes the query and returns the updated AppInfo entity.
func (aiuo *AppInfoUpdateOne) Save(ctx context.Context) (*AppInfo, error) {
	aiuo.defaults()
	return withHooks(ctx, aiuo.sqlSave, aiuo.mutation, aiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *AppInfoUpdateOne) SaveX(ctx context.Context) *AppInfo {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *AppInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *AppInfoUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiuo *AppInfoUpdateOne) defaults() {
	if _, ok := aiuo.mutation.UpdatedAt(); !ok {
		v := appinfo.UpdateDefaultUpdatedAt()
		aiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiuo *AppInfoUpdateOne) check() error {
	if v, ok := aiuo.mutation.GetType(); ok {
		if err := appinfo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AppInfo.type": %w`, err)}
		}
	}
	return nil
}

func (aiuo *AppInfoUpdateOne) sqlSave(ctx context.Context) (_node *AppInfo, err error) {
	if err := aiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appinfo.Table, appinfo.Columns, sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64))
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appinfo.FieldID)
		for _, f := range fields {
			if !appinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.Internal(); ok {
		_spec.SetField(appinfo.FieldInternal, field.TypeBool, value)
	}
	if value, ok := aiuo.mutation.Source(); ok {
		_spec.SetField(appinfo.FieldSource, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.SourceAppID(); ok {
		_spec.SetField(appinfo.FieldSourceAppID, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.SourceURL(); ok {
		_spec.SetField(appinfo.FieldSourceURL, field.TypeString, value)
	}
	if aiuo.mutation.SourceURLCleared() {
		_spec.ClearField(appinfo.FieldSourceURL, field.TypeString)
	}
	if value, ok := aiuo.mutation.Name(); ok {
		_spec.SetField(appinfo.FieldName, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.GetType(); ok {
		_spec.SetField(appinfo.FieldType, field.TypeEnum, value)
	}
	if value, ok := aiuo.mutation.ShortDescription(); ok {
		_spec.SetField(appinfo.FieldShortDescription, field.TypeString, value)
	}
	if aiuo.mutation.ShortDescriptionCleared() {
		_spec.ClearField(appinfo.FieldShortDescription, field.TypeString)
	}
	if value, ok := aiuo.mutation.Description(); ok {
		_spec.SetField(appinfo.FieldDescription, field.TypeString, value)
	}
	if aiuo.mutation.DescriptionCleared() {
		_spec.ClearField(appinfo.FieldDescription, field.TypeString)
	}
	if value, ok := aiuo.mutation.IconImageURL(); ok {
		_spec.SetField(appinfo.FieldIconImageURL, field.TypeString, value)
	}
	if aiuo.mutation.IconImageURLCleared() {
		_spec.ClearField(appinfo.FieldIconImageURL, field.TypeString)
	}
	if value, ok := aiuo.mutation.BackgroundImageURL(); ok {
		_spec.SetField(appinfo.FieldBackgroundImageURL, field.TypeString, value)
	}
	if aiuo.mutation.BackgroundImageURLCleared() {
		_spec.ClearField(appinfo.FieldBackgroundImageURL, field.TypeString)
	}
	if value, ok := aiuo.mutation.CoverImageURL(); ok {
		_spec.SetField(appinfo.FieldCoverImageURL, field.TypeString, value)
	}
	if aiuo.mutation.CoverImageURLCleared() {
		_spec.ClearField(appinfo.FieldCoverImageURL, field.TypeString)
	}
	if value, ok := aiuo.mutation.ReleaseDate(); ok {
		_spec.SetField(appinfo.FieldReleaseDate, field.TypeString, value)
	}
	if aiuo.mutation.ReleaseDateCleared() {
		_spec.ClearField(appinfo.FieldReleaseDate, field.TypeString)
	}
	if value, ok := aiuo.mutation.Developer(); ok {
		_spec.SetField(appinfo.FieldDeveloper, field.TypeString, value)
	}
	if aiuo.mutation.DeveloperCleared() {
		_spec.ClearField(appinfo.FieldDeveloper, field.TypeString)
	}
	if value, ok := aiuo.mutation.Publisher(); ok {
		_spec.SetField(appinfo.FieldPublisher, field.TypeString, value)
	}
	if aiuo.mutation.PublisherCleared() {
		_spec.ClearField(appinfo.FieldPublisher, field.TypeString)
	}
	if value, ok := aiuo.mutation.Version(); ok {
		_spec.SetField(appinfo.FieldVersion, field.TypeString, value)
	}
	if aiuo.mutation.VersionCleared() {
		_spec.ClearField(appinfo.FieldVersion, field.TypeString)
	}
	if value, ok := aiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aiuo.mutation.CreatedAt(); ok {
		_spec.SetField(appinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if aiuo.mutation.PurchasedByAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByAccountTable,
			Columns: appinfo.PurchasedByAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.RemovedPurchasedByAccountIDs(); len(nodes) > 0 && !aiuo.mutation.PurchasedByAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByAccountTable,
			Columns: appinfo.PurchasedByAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.PurchasedByAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByAccountTable,
			Columns: appinfo.PurchasedByAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.PurchasedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByUserTable,
			Columns: appinfo.PurchasedByUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.RemovedPurchasedByUserIDs(); len(nodes) > 0 && !aiuo.mutation.PurchasedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByUserTable,
			Columns: appinfo.PurchasedByUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.PurchasedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appinfo.PurchasedByUserTable,
			Columns: appinfo.PurchasedByUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppTable,
			Columns: []string{appinfo.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.RemovedAppIDs(); len(nodes) > 0 && !aiuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppTable,
			Columns: []string{appinfo.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppTable,
			Columns: []string{appinfo.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.AppBinaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppBinaryTable,
			Columns: []string{appinfo.AppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appbinary.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.RemovedAppBinaryIDs(); len(nodes) > 0 && !aiuo.mutation.AppBinaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppBinaryTable,
			Columns: []string{appinfo.AppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appbinary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.AppBinaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.AppBinaryTable,
			Columns: []string{appinfo.AppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appbinary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.BindInternalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appinfo.BindInternalTable,
			Columns: []string{appinfo.BindInternalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.BindInternalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appinfo.BindInternalTable,
			Columns: []string{appinfo.BindInternalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.BindExternalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.BindExternalTable,
			Columns: []string{appinfo.BindExternalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.RemovedBindExternalIDs(); len(nodes) > 0 && !aiuo.mutation.BindExternalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.BindExternalTable,
			Columns: []string{appinfo.BindExternalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.BindExternalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appinfo.BindExternalTable,
			Columns: []string{appinfo.BindExternalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppInfo{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aiuo.mutation.done = true
	return _node, nil
}
