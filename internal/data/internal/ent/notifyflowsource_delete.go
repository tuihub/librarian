// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflowsource"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
)

// NotifyFlowSourceDelete is the builder for deleting a NotifyFlowSource entity.
type NotifyFlowSourceDelete struct {
	config
	hooks    []Hook
	mutation *NotifyFlowSourceMutation
}

// Where appends a list predicates to the NotifyFlowSourceDelete builder.
func (nfsd *NotifyFlowSourceDelete) Where(ps ...predicate.NotifyFlowSource) *NotifyFlowSourceDelete {
	nfsd.mutation.Where(ps...)
	return nfsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nfsd *NotifyFlowSourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nfsd.sqlExec, nfsd.mutation, nfsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nfsd *NotifyFlowSourceDelete) ExecX(ctx context.Context) int {
	n, err := nfsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nfsd *NotifyFlowSourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(notifyflowsource.Table, sqlgraph.NewFieldSpec(notifyflowsource.FieldID, field.TypeInt))
	if ps := nfsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nfsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nfsd.mutation.done = true
	return affected, err
}

// NotifyFlowSourceDeleteOne is the builder for deleting a single NotifyFlowSource entity.
type NotifyFlowSourceDeleteOne struct {
	nfsd *NotifyFlowSourceDelete
}

// Where appends a list predicates to the NotifyFlowSourceDelete builder.
func (nfsdo *NotifyFlowSourceDeleteOne) Where(ps ...predicate.NotifyFlowSource) *NotifyFlowSourceDeleteOne {
	nfsdo.nfsd.mutation.Where(ps...)
	return nfsdo
}

// Exec executes the deletion query.
func (nfsdo *NotifyFlowSourceDeleteOne) Exec(ctx context.Context) error {
	n, err := nfsdo.nfsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{notifyflowsource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nfsdo *NotifyFlowSourceDeleteOne) ExecX(ctx context.Context) {
	if err := nfsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
