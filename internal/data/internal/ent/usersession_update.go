// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/deviceinfo"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/usersession"
	"github.com/tuihub/librarian/internal/model"
)

// UserSessionUpdate is the builder for updating UserSession entities.
type UserSessionUpdate struct {
	config
	hooks    []Hook
	mutation *UserSessionMutation
}

// Where appends a list predicates to the UserSessionUpdate builder.
func (usu *UserSessionUpdate) Where(ps ...predicate.UserSession) *UserSessionUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetUserID sets the "user_id" field.
func (usu *UserSessionUpdate) SetUserID(mi model.InternalID) *UserSessionUpdate {
	usu.mutation.ResetUserID()
	usu.mutation.SetUserID(mi)
	return usu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usu *UserSessionUpdate) SetNillableUserID(mi *model.InternalID) *UserSessionUpdate {
	if mi != nil {
		usu.SetUserID(*mi)
	}
	return usu
}

// AddUserID adds mi to the "user_id" field.
func (usu *UserSessionUpdate) AddUserID(mi model.InternalID) *UserSessionUpdate {
	usu.mutation.AddUserID(mi)
	return usu
}

// SetRefreshToken sets the "refresh_token" field.
func (usu *UserSessionUpdate) SetRefreshToken(s string) *UserSessionUpdate {
	usu.mutation.SetRefreshToken(s)
	return usu
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (usu *UserSessionUpdate) SetNillableRefreshToken(s *string) *UserSessionUpdate {
	if s != nil {
		usu.SetRefreshToken(*s)
	}
	return usu
}

// SetExpireAt sets the "expire_at" field.
func (usu *UserSessionUpdate) SetExpireAt(t time.Time) *UserSessionUpdate {
	usu.mutation.SetExpireAt(t)
	return usu
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (usu *UserSessionUpdate) SetNillableExpireAt(t *time.Time) *UserSessionUpdate {
	if t != nil {
		usu.SetExpireAt(*t)
	}
	return usu
}

// SetUpdatedAt sets the "updated_at" field.
func (usu *UserSessionUpdate) SetUpdatedAt(t time.Time) *UserSessionUpdate {
	usu.mutation.SetUpdatedAt(t)
	return usu
}

// SetCreatedAt sets the "created_at" field.
func (usu *UserSessionUpdate) SetCreatedAt(t time.Time) *UserSessionUpdate {
	usu.mutation.SetCreatedAt(t)
	return usu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usu *UserSessionUpdate) SetNillableCreatedAt(t *time.Time) *UserSessionUpdate {
	if t != nil {
		usu.SetCreatedAt(*t)
	}
	return usu
}

// SetDeviceInfoID sets the "device_info" edge to the DeviceInfo entity by ID.
func (usu *UserSessionUpdate) SetDeviceInfoID(id model.InternalID) *UserSessionUpdate {
	usu.mutation.SetDeviceInfoID(id)
	return usu
}

// SetNillableDeviceInfoID sets the "device_info" edge to the DeviceInfo entity by ID if the given value is not nil.
func (usu *UserSessionUpdate) SetNillableDeviceInfoID(id *model.InternalID) *UserSessionUpdate {
	if id != nil {
		usu = usu.SetDeviceInfoID(*id)
	}
	return usu
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (usu *UserSessionUpdate) SetDeviceInfo(d *DeviceInfo) *UserSessionUpdate {
	return usu.SetDeviceInfoID(d.ID)
}

// Mutation returns the UserSessionMutation object of the builder.
func (usu *UserSessionUpdate) Mutation() *UserSessionMutation {
	return usu.mutation
}

// ClearDeviceInfo clears the "device_info" edge to the DeviceInfo entity.
func (usu *UserSessionUpdate) ClearDeviceInfo() *UserSessionUpdate {
	usu.mutation.ClearDeviceInfo()
	return usu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSessionUpdate) Save(ctx context.Context) (int, error) {
	usu.defaults()
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSessionUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSessionUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usu *UserSessionUpdate) defaults() {
	if _, ok := usu.mutation.UpdatedAt(); !ok {
		v := usersession.UpdateDefaultUpdatedAt()
		usu.mutation.SetUpdatedAt(v)
	}
}

func (usu *UserSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usersession.Table, usersession.Columns, sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeInt64))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.UserID(); ok {
		_spec.SetField(usersession.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.AddedUserID(); ok {
		_spec.AddField(usersession.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.RefreshToken(); ok {
		_spec.SetField(usersession.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := usu.mutation.ExpireAt(); ok {
		_spec.SetField(usersession.FieldExpireAt, field.TypeTime, value)
	}
	if value, ok := usu.mutation.UpdatedAt(); ok {
		_spec.SetField(usersession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := usu.mutation.CreatedAt(); ok {
		_spec.SetField(usersession.FieldCreatedAt, field.TypeTime, value)
	}
	if usu.mutation.DeviceInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.DeviceInfoTable,
			Columns: []string{usersession.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.DeviceInfoTable,
			Columns: []string{usersession.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSessionUpdateOne is the builder for updating a single UserSession entity.
type UserSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSessionMutation
}

// SetUserID sets the "user_id" field.
func (usuo *UserSessionUpdateOne) SetUserID(mi model.InternalID) *UserSessionUpdateOne {
	usuo.mutation.ResetUserID()
	usuo.mutation.SetUserID(mi)
	return usuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usuo *UserSessionUpdateOne) SetNillableUserID(mi *model.InternalID) *UserSessionUpdateOne {
	if mi != nil {
		usuo.SetUserID(*mi)
	}
	return usuo
}

// AddUserID adds mi to the "user_id" field.
func (usuo *UserSessionUpdateOne) AddUserID(mi model.InternalID) *UserSessionUpdateOne {
	usuo.mutation.AddUserID(mi)
	return usuo
}

// SetRefreshToken sets the "refresh_token" field.
func (usuo *UserSessionUpdateOne) SetRefreshToken(s string) *UserSessionUpdateOne {
	usuo.mutation.SetRefreshToken(s)
	return usuo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (usuo *UserSessionUpdateOne) SetNillableRefreshToken(s *string) *UserSessionUpdateOne {
	if s != nil {
		usuo.SetRefreshToken(*s)
	}
	return usuo
}

// SetExpireAt sets the "expire_at" field.
func (usuo *UserSessionUpdateOne) SetExpireAt(t time.Time) *UserSessionUpdateOne {
	usuo.mutation.SetExpireAt(t)
	return usuo
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (usuo *UserSessionUpdateOne) SetNillableExpireAt(t *time.Time) *UserSessionUpdateOne {
	if t != nil {
		usuo.SetExpireAt(*t)
	}
	return usuo
}

// SetUpdatedAt sets the "updated_at" field.
func (usuo *UserSessionUpdateOne) SetUpdatedAt(t time.Time) *UserSessionUpdateOne {
	usuo.mutation.SetUpdatedAt(t)
	return usuo
}

// SetCreatedAt sets the "created_at" field.
func (usuo *UserSessionUpdateOne) SetCreatedAt(t time.Time) *UserSessionUpdateOne {
	usuo.mutation.SetCreatedAt(t)
	return usuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usuo *UserSessionUpdateOne) SetNillableCreatedAt(t *time.Time) *UserSessionUpdateOne {
	if t != nil {
		usuo.SetCreatedAt(*t)
	}
	return usuo
}

// SetDeviceInfoID sets the "device_info" edge to the DeviceInfo entity by ID.
func (usuo *UserSessionUpdateOne) SetDeviceInfoID(id model.InternalID) *UserSessionUpdateOne {
	usuo.mutation.SetDeviceInfoID(id)
	return usuo
}

// SetNillableDeviceInfoID sets the "device_info" edge to the DeviceInfo entity by ID if the given value is not nil.
func (usuo *UserSessionUpdateOne) SetNillableDeviceInfoID(id *model.InternalID) *UserSessionUpdateOne {
	if id != nil {
		usuo = usuo.SetDeviceInfoID(*id)
	}
	return usuo
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (usuo *UserSessionUpdateOne) SetDeviceInfo(d *DeviceInfo) *UserSessionUpdateOne {
	return usuo.SetDeviceInfoID(d.ID)
}

// Mutation returns the UserSessionMutation object of the builder.
func (usuo *UserSessionUpdateOne) Mutation() *UserSessionMutation {
	return usuo.mutation
}

// ClearDeviceInfo clears the "device_info" edge to the DeviceInfo entity.
func (usuo *UserSessionUpdateOne) ClearDeviceInfo() *UserSessionUpdateOne {
	usuo.mutation.ClearDeviceInfo()
	return usuo
}

// Where appends a list predicates to the UserSessionUpdate builder.
func (usuo *UserSessionUpdateOne) Where(ps ...predicate.UserSession) *UserSessionUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSessionUpdateOne) Select(field string, fields ...string) *UserSessionUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSession entity.
func (usuo *UserSessionUpdateOne) Save(ctx context.Context) (*UserSession, error) {
	usuo.defaults()
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSessionUpdateOne) SaveX(ctx context.Context) *UserSession {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSessionUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usuo *UserSessionUpdateOne) defaults() {
	if _, ok := usuo.mutation.UpdatedAt(); !ok {
		v := usersession.UpdateDefaultUpdatedAt()
		usuo.mutation.SetUpdatedAt(v)
	}
}

func (usuo *UserSessionUpdateOne) sqlSave(ctx context.Context) (_node *UserSession, err error) {
	_spec := sqlgraph.NewUpdateSpec(usersession.Table, usersession.Columns, sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeInt64))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersession.FieldID)
		for _, f := range fields {
			if !usersession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usersession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.UserID(); ok {
		_spec.SetField(usersession.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.AddedUserID(); ok {
		_spec.AddField(usersession.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.RefreshToken(); ok {
		_spec.SetField(usersession.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := usuo.mutation.ExpireAt(); ok {
		_spec.SetField(usersession.FieldExpireAt, field.TypeTime, value)
	}
	if value, ok := usuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usersession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := usuo.mutation.CreatedAt(); ok {
		_spec.SetField(usersession.FieldCreatedAt, field.TypeTime, value)
	}
	if usuo.mutation.DeviceInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.DeviceInfoTable,
			Columns: []string{usersession.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.DeviceInfoTable,
			Columns: []string{usersession.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserSession{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
