// Code generated by ent, DO NOT EDIT.

package porterinstance

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the porterinstance type in the database.
	Label = "porter_instance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSourceCodeAddress holds the string denoting the source_code_address field in the database.
	FieldSourceCodeAddress = "source_code_address"
	// FieldBuildVersion holds the string denoting the build_version field in the database.
	FieldBuildVersion = "build_version"
	// FieldBuildDate holds the string denoting the build_date field in the database.
	FieldBuildDate = "build_date"
	// FieldGlobalName holds the string denoting the global_name field in the database.
	FieldGlobalName = "global_name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// FieldFeatureSummary holds the string denoting the feature_summary field in the database.
	FieldFeatureSummary = "feature_summary"
	// FieldContextJSONSchema holds the string denoting the context_json_schema field in the database.
	FieldContextJSONSchema = "context_json_schema"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the porterinstance in the database.
	Table = "porter_instances"
)

// Columns holds all SQL columns for porterinstance fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldVersion,
	FieldDescription,
	FieldSourceCodeAddress,
	FieldBuildVersion,
	FieldBuildDate,
	FieldGlobalName,
	FieldAddress,
	FieldRegion,
	FieldFeatureSummary,
	FieldContextJSONSchema,
	FieldStatus,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusActive  Status = "active"
	StatusBlocked Status = "blocked"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusBlocked:
		return nil
	default:
		return fmt.Errorf("porterinstance: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the PorterInstance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// BySourceCodeAddress orders the results by the source_code_address field.
func BySourceCodeAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceCodeAddress, opts...).ToFunc()
}

// ByBuildVersion orders the results by the build_version field.
func ByBuildVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildVersion, opts...).ToFunc()
}

// ByBuildDate orders the results by the build_date field.
func ByBuildDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildDate, opts...).ToFunc()
}

// ByGlobalName orders the results by the global_name field.
func ByGlobalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGlobalName, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByRegion orders the results by the region field.
func ByRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegion, opts...).ToFunc()
}

// ByContextJSONSchema orders the results by the context_json_schema field.
func ByContextJSONSchema(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContextJSONSchema, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
