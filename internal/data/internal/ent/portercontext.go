// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/portercontext"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// PorterContext is the model entity for the PorterContext schema.
type PorterContext struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// GlobalName holds the value of the "global_name" field.
	GlobalName string `json:"global_name,omitempty"`
	// Region holds the value of the "region" field.
	Region string `json:"region,omitempty"`
	// ContextJSON holds the value of the "context_json" field.
	ContextJSON string `json:"context_json,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Status holds the value of the "status" field.
	Status portercontext.Status `json:"status,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PorterContextQuery when eager-loading is set.
	Edges               PorterContextEdges `json:"edges"`
	user_porter_context *model.InternalID
	selectValues        sql.SelectValues
}

// PorterContextEdges holds the relations/edges for other nodes in the graph.
type PorterContextEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PorterContextEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PorterContext) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case portercontext.FieldID:
			values[i] = new(sql.NullInt64)
		case portercontext.FieldGlobalName, portercontext.FieldRegion, portercontext.FieldContextJSON, portercontext.FieldName, portercontext.FieldDescription, portercontext.FieldStatus:
			values[i] = new(sql.NullString)
		case portercontext.FieldUpdatedAt, portercontext.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case portercontext.ForeignKeys[0]: // user_porter_context
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PorterContext fields.
func (pc *PorterContext) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portercontext.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pc.ID = model.InternalID(value.Int64)
			}
		case portercontext.FieldGlobalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field global_name", values[i])
			} else if value.Valid {
				pc.GlobalName = value.String
			}
		case portercontext.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				pc.Region = value.String
			}
		case portercontext.FieldContextJSON:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field context_json", values[i])
			} else if value.Valid {
				pc.ContextJSON = value.String
			}
		case portercontext.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pc.Name = value.String
			}
		case portercontext.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pc.Description = value.String
			}
		case portercontext.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pc.Status = portercontext.Status(value.String)
			}
		case portercontext.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = value.Time
			}
		case portercontext.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pc.CreatedAt = value.Time
			}
		case portercontext.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_porter_context", values[i])
			} else if value.Valid {
				pc.user_porter_context = new(model.InternalID)
				*pc.user_porter_context = model.InternalID(value.Int64)
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PorterContext.
// This includes values selected through modifiers, order, etc.
func (pc *PorterContext) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the PorterContext entity.
func (pc *PorterContext) QueryOwner() *UserQuery {
	return NewPorterContextClient(pc.config).QueryOwner(pc)
}

// Update returns a builder for updating this PorterContext.
// Note that you need to call PorterContext.Unwrap() before calling this method if this PorterContext
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PorterContext) Update() *PorterContextUpdateOne {
	return NewPorterContextClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PorterContext entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PorterContext) Unwrap() *PorterContext {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PorterContext is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PorterContext) String() string {
	var builder strings.Builder
	builder.WriteString("PorterContext(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("global_name=")
	builder.WriteString(pc.GlobalName)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(pc.Region)
	builder.WriteString(", ")
	builder.WriteString("context_json=")
	builder.WriteString(pc.ContextJSON)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pc.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pc.Status))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pc.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PorterContexts is a parsable slice of PorterContext.
type PorterContexts []*PorterContext
