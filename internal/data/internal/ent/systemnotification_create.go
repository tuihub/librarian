// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/systemnotification"
	"github.com/tuihub/librarian/internal/model"
)

// SystemNotificationCreate is the builder for creating a SystemNotification entity.
type SystemNotificationCreate struct {
	config
	mutation *SystemNotificationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (snc *SystemNotificationCreate) SetUserID(mi model.InternalID) *SystemNotificationCreate {
	snc.mutation.SetUserID(mi)
	return snc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (snc *SystemNotificationCreate) SetNillableUserID(mi *model.InternalID) *SystemNotificationCreate {
	if mi != nil {
		snc.SetUserID(*mi)
	}
	return snc
}

// SetType sets the "type" field.
func (snc *SystemNotificationCreate) SetType(s systemnotification.Type) *SystemNotificationCreate {
	snc.mutation.SetType(s)
	return snc
}

// SetLevel sets the "level" field.
func (snc *SystemNotificationCreate) SetLevel(s systemnotification.Level) *SystemNotificationCreate {
	snc.mutation.SetLevel(s)
	return snc
}

// SetStatus sets the "status" field.
func (snc *SystemNotificationCreate) SetStatus(s systemnotification.Status) *SystemNotificationCreate {
	snc.mutation.SetStatus(s)
	return snc
}

// SetTitle sets the "title" field.
func (snc *SystemNotificationCreate) SetTitle(s string) *SystemNotificationCreate {
	snc.mutation.SetTitle(s)
	return snc
}

// SetContent sets the "content" field.
func (snc *SystemNotificationCreate) SetContent(s string) *SystemNotificationCreate {
	snc.mutation.SetContent(s)
	return snc
}

// SetUpdatedAt sets the "updated_at" field.
func (snc *SystemNotificationCreate) SetUpdatedAt(t time.Time) *SystemNotificationCreate {
	snc.mutation.SetUpdatedAt(t)
	return snc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (snc *SystemNotificationCreate) SetNillableUpdatedAt(t *time.Time) *SystemNotificationCreate {
	if t != nil {
		snc.SetUpdatedAt(*t)
	}
	return snc
}

// SetCreatedAt sets the "created_at" field.
func (snc *SystemNotificationCreate) SetCreatedAt(t time.Time) *SystemNotificationCreate {
	snc.mutation.SetCreatedAt(t)
	return snc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (snc *SystemNotificationCreate) SetNillableCreatedAt(t *time.Time) *SystemNotificationCreate {
	if t != nil {
		snc.SetCreatedAt(*t)
	}
	return snc
}

// SetID sets the "id" field.
func (snc *SystemNotificationCreate) SetID(mi model.InternalID) *SystemNotificationCreate {
	snc.mutation.SetID(mi)
	return snc
}

// Mutation returns the SystemNotificationMutation object of the builder.
func (snc *SystemNotificationCreate) Mutation() *SystemNotificationMutation {
	return snc.mutation
}

// Save creates the SystemNotification in the database.
func (snc *SystemNotificationCreate) Save(ctx context.Context) (*SystemNotification, error) {
	snc.defaults()
	return withHooks(ctx, snc.sqlSave, snc.mutation, snc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (snc *SystemNotificationCreate) SaveX(ctx context.Context) *SystemNotification {
	v, err := snc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (snc *SystemNotificationCreate) Exec(ctx context.Context) error {
	_, err := snc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snc *SystemNotificationCreate) ExecX(ctx context.Context) {
	if err := snc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snc *SystemNotificationCreate) defaults() {
	if _, ok := snc.mutation.UpdatedAt(); !ok {
		v := systemnotification.DefaultUpdatedAt()
		snc.mutation.SetUpdatedAt(v)
	}
	if _, ok := snc.mutation.CreatedAt(); !ok {
		v := systemnotification.DefaultCreatedAt()
		snc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snc *SystemNotificationCreate) check() error {
	if _, ok := snc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SystemNotification.type"`)}
	}
	if v, ok := snc.mutation.GetType(); ok {
		if err := systemnotification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemNotification.type": %w`, err)}
		}
	}
	if _, ok := snc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "SystemNotification.level"`)}
	}
	if v, ok := snc.mutation.Level(); ok {
		if err := systemnotification.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "SystemNotification.level": %w`, err)}
		}
	}
	if _, ok := snc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SystemNotification.status"`)}
	}
	if v, ok := snc.mutation.Status(); ok {
		if err := systemnotification.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemNotification.status": %w`, err)}
		}
	}
	if _, ok := snc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "SystemNotification.title"`)}
	}
	if _, ok := snc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "SystemNotification.content"`)}
	}
	if _, ok := snc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SystemNotification.updated_at"`)}
	}
	if _, ok := snc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemNotification.created_at"`)}
	}
	return nil
}

func (snc *SystemNotificationCreate) sqlSave(ctx context.Context) (*SystemNotification, error) {
	if err := snc.check(); err != nil {
		return nil, err
	}
	_node, _spec := snc.createSpec()
	if err := sqlgraph.CreateNode(ctx, snc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	snc.mutation.id = &_node.ID
	snc.mutation.done = true
	return _node, nil
}

func (snc *SystemNotificationCreate) createSpec() (*SystemNotification, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemNotification{config: snc.config}
		_spec = sqlgraph.NewCreateSpec(systemnotification.Table, sqlgraph.NewFieldSpec(systemnotification.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = snc.conflict
	if id, ok := snc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := snc.mutation.UserID(); ok {
		_spec.SetField(systemnotification.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := snc.mutation.GetType(); ok {
		_spec.SetField(systemnotification.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := snc.mutation.Level(); ok {
		_spec.SetField(systemnotification.FieldLevel, field.TypeEnum, value)
		_node.Level = value
	}
	if value, ok := snc.mutation.Status(); ok {
		_spec.SetField(systemnotification.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := snc.mutation.Title(); ok {
		_spec.SetField(systemnotification.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := snc.mutation.Content(); ok {
		_spec.SetField(systemnotification.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := snc.mutation.UpdatedAt(); ok {
		_spec.SetField(systemnotification.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := snc.mutation.CreatedAt(); ok {
		_spec.SetField(systemnotification.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemNotification.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemNotificationUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (snc *SystemNotificationCreate) OnConflict(opts ...sql.ConflictOption) *SystemNotificationUpsertOne {
	snc.conflict = opts
	return &SystemNotificationUpsertOne{
		create: snc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemNotification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (snc *SystemNotificationCreate) OnConflictColumns(columns ...string) *SystemNotificationUpsertOne {
	snc.conflict = append(snc.conflict, sql.ConflictColumns(columns...))
	return &SystemNotificationUpsertOne{
		create: snc,
	}
}

type (
	// SystemNotificationUpsertOne is the builder for "upsert"-ing
	//  one SystemNotification node.
	SystemNotificationUpsertOne struct {
		create *SystemNotificationCreate
	}

	// SystemNotificationUpsert is the "OnConflict" setter.
	SystemNotificationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *SystemNotificationUpsert) SetUserID(v model.InternalID) *SystemNotificationUpsert {
	u.Set(systemnotification.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SystemNotificationUpsert) UpdateUserID() *SystemNotificationUpsert {
	u.SetExcluded(systemnotification.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *SystemNotificationUpsert) AddUserID(v model.InternalID) *SystemNotificationUpsert {
	u.Add(systemnotification.FieldUserID, v)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *SystemNotificationUpsert) ClearUserID() *SystemNotificationUpsert {
	u.SetNull(systemnotification.FieldUserID)
	return u
}

// SetType sets the "type" field.
func (u *SystemNotificationUpsert) SetType(v systemnotification.Type) *SystemNotificationUpsert {
	u.Set(systemnotification.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemNotificationUpsert) UpdateType() *SystemNotificationUpsert {
	u.SetExcluded(systemnotification.FieldType)
	return u
}

// SetLevel sets the "level" field.
func (u *SystemNotificationUpsert) SetLevel(v systemnotification.Level) *SystemNotificationUpsert {
	u.Set(systemnotification.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SystemNotificationUpsert) UpdateLevel() *SystemNotificationUpsert {
	u.SetExcluded(systemnotification.FieldLevel)
	return u
}

// SetStatus sets the "status" field.
func (u *SystemNotificationUpsert) SetStatus(v systemnotification.Status) *SystemNotificationUpsert {
	u.Set(systemnotification.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemNotificationUpsert) UpdateStatus() *SystemNotificationUpsert {
	u.SetExcluded(systemnotification.FieldStatus)
	return u
}

// SetTitle sets the "title" field.
func (u *SystemNotificationUpsert) SetTitle(v string) *SystemNotificationUpsert {
	u.Set(systemnotification.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SystemNotificationUpsert) UpdateTitle() *SystemNotificationUpsert {
	u.SetExcluded(systemnotification.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *SystemNotificationUpsert) SetContent(v string) *SystemNotificationUpsert {
	u.Set(systemnotification.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SystemNotificationUpsert) UpdateContent() *SystemNotificationUpsert {
	u.SetExcluded(systemnotification.FieldContent)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemNotificationUpsert) SetUpdatedAt(v time.Time) *SystemNotificationUpsert {
	u.Set(systemnotification.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemNotificationUpsert) UpdateUpdatedAt() *SystemNotificationUpsert {
	u.SetExcluded(systemnotification.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemNotificationUpsert) SetCreatedAt(v time.Time) *SystemNotificationUpsert {
	u.Set(systemnotification.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemNotificationUpsert) UpdateCreatedAt() *SystemNotificationUpsert {
	u.SetExcluded(systemnotification.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemNotification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemnotification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemNotificationUpsertOne) UpdateNewValues() *SystemNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemnotification.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemNotification.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemNotificationUpsertOne) Ignore() *SystemNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemNotificationUpsertOne) DoNothing() *SystemNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemNotificationCreate.OnConflict
// documentation for more info.
func (u *SystemNotificationUpsertOne) Update(set func(*SystemNotificationUpsert)) *SystemNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemNotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *SystemNotificationUpsertOne) SetUserID(v model.InternalID) *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *SystemNotificationUpsertOne) AddUserID(v model.InternalID) *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SystemNotificationUpsertOne) UpdateUserID() *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SystemNotificationUpsertOne) ClearUserID() *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.ClearUserID()
	})
}

// SetType sets the "type" field.
func (u *SystemNotificationUpsertOne) SetType(v systemnotification.Type) *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemNotificationUpsertOne) UpdateType() *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateType()
	})
}

// SetLevel sets the "level" field.
func (u *SystemNotificationUpsertOne) SetLevel(v systemnotification.Level) *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SystemNotificationUpsertOne) UpdateLevel() *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateLevel()
	})
}

// SetStatus sets the "status" field.
func (u *SystemNotificationUpsertOne) SetStatus(v systemnotification.Status) *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemNotificationUpsertOne) UpdateStatus() *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateStatus()
	})
}

// SetTitle sets the "title" field.
func (u *SystemNotificationUpsertOne) SetTitle(v string) *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SystemNotificationUpsertOne) UpdateTitle() *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *SystemNotificationUpsertOne) SetContent(v string) *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SystemNotificationUpsertOne) UpdateContent() *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateContent()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemNotificationUpsertOne) SetUpdatedAt(v time.Time) *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemNotificationUpsertOne) UpdateUpdatedAt() *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemNotificationUpsertOne) SetCreatedAt(v time.Time) *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemNotificationUpsertOne) UpdateCreatedAt() *SystemNotificationUpsertOne {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemNotificationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemNotificationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemNotificationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemNotificationUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemNotificationUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemNotificationCreateBulk is the builder for creating many SystemNotification entities in bulk.
type SystemNotificationCreateBulk struct {
	config
	err      error
	builders []*SystemNotificationCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemNotification entities in the database.
func (sncb *SystemNotificationCreateBulk) Save(ctx context.Context) ([]*SystemNotification, error) {
	if sncb.err != nil {
		return nil, sncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sncb.builders))
	nodes := make([]*SystemNotification, len(sncb.builders))
	mutators := make([]Mutator, len(sncb.builders))
	for i := range sncb.builders {
		func(i int, root context.Context) {
			builder := sncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemNotificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sncb *SystemNotificationCreateBulk) SaveX(ctx context.Context) []*SystemNotification {
	v, err := sncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sncb *SystemNotificationCreateBulk) Exec(ctx context.Context) error {
	_, err := sncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sncb *SystemNotificationCreateBulk) ExecX(ctx context.Context) {
	if err := sncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemNotification.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemNotificationUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (sncb *SystemNotificationCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemNotificationUpsertBulk {
	sncb.conflict = opts
	return &SystemNotificationUpsertBulk{
		create: sncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemNotification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sncb *SystemNotificationCreateBulk) OnConflictColumns(columns ...string) *SystemNotificationUpsertBulk {
	sncb.conflict = append(sncb.conflict, sql.ConflictColumns(columns...))
	return &SystemNotificationUpsertBulk{
		create: sncb,
	}
}

// SystemNotificationUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemNotification nodes.
type SystemNotificationUpsertBulk struct {
	create *SystemNotificationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemNotification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemnotification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemNotificationUpsertBulk) UpdateNewValues() *SystemNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemnotification.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemNotification.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemNotificationUpsertBulk) Ignore() *SystemNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemNotificationUpsertBulk) DoNothing() *SystemNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemNotificationCreateBulk.OnConflict
// documentation for more info.
func (u *SystemNotificationUpsertBulk) Update(set func(*SystemNotificationUpsert)) *SystemNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemNotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *SystemNotificationUpsertBulk) SetUserID(v model.InternalID) *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *SystemNotificationUpsertBulk) AddUserID(v model.InternalID) *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SystemNotificationUpsertBulk) UpdateUserID() *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SystemNotificationUpsertBulk) ClearUserID() *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.ClearUserID()
	})
}

// SetType sets the "type" field.
func (u *SystemNotificationUpsertBulk) SetType(v systemnotification.Type) *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemNotificationUpsertBulk) UpdateType() *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateType()
	})
}

// SetLevel sets the "level" field.
func (u *SystemNotificationUpsertBulk) SetLevel(v systemnotification.Level) *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SystemNotificationUpsertBulk) UpdateLevel() *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateLevel()
	})
}

// SetStatus sets the "status" field.
func (u *SystemNotificationUpsertBulk) SetStatus(v systemnotification.Status) *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemNotificationUpsertBulk) UpdateStatus() *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateStatus()
	})
}

// SetTitle sets the "title" field.
func (u *SystemNotificationUpsertBulk) SetTitle(v string) *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SystemNotificationUpsertBulk) UpdateTitle() *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *SystemNotificationUpsertBulk) SetContent(v string) *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SystemNotificationUpsertBulk) UpdateContent() *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateContent()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemNotificationUpsertBulk) SetUpdatedAt(v time.Time) *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemNotificationUpsertBulk) UpdateUpdatedAt() *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemNotificationUpsertBulk) SetCreatedAt(v time.Time) *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemNotificationUpsertBulk) UpdateCreatedAt() *SystemNotificationUpsertBulk {
	return u.Update(func(s *SystemNotificationUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemNotificationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemNotificationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemNotificationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemNotificationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
