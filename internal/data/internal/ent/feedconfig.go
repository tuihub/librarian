// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/feed"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
	"github.com/tuihub/librarian/internal/model/modelsupervisor"
)

// FeedConfig is the model entity for the FeedConfig schema.
type FeedConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// UserFeedConfig holds the value of the "user_feed_config" field.
	UserFeedConfig model.InternalID `json:"user_feed_config,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Source holds the value of the "source" field.
	Source *modelsupervisor.FeatureRequest `json:"source,omitempty"`
	// Status holds the value of the "status" field.
	Status feedconfig.Status `json:"status,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// PullInterval holds the value of the "pull_interval" field.
	PullInterval time.Duration `json:"pull_interval,omitempty"`
	// HideItems holds the value of the "hide_items" field.
	HideItems bool `json:"hide_items,omitempty"`
	// LatestPullAt holds the value of the "latest_pull_at" field.
	LatestPullAt time.Time `json:"latest_pull_at,omitempty"`
	// LatestPullStatus holds the value of the "latest_pull_status" field.
	LatestPullStatus feedconfig.LatestPullStatus `json:"latest_pull_status,omitempty"`
	// LatestPullMessage holds the value of the "latest_pull_message" field.
	LatestPullMessage string `json:"latest_pull_message,omitempty"`
	// NextPullBeginAt holds the value of the "next_pull_begin_at" field.
	NextPullBeginAt time.Time `json:"next_pull_begin_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedConfigQuery when eager-loading is set.
	Edges        FeedConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FeedConfigEdges holds the relations/edges for other nodes in the graph.
type FeedConfigEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Feed holds the value of the feed edge.
	Feed *Feed `json:"feed,omitempty"`
	// NotifySource holds the value of the notify_source edge.
	NotifySource []*NotifySource `json:"notify_source,omitempty"`
	// FeedActionSet holds the value of the feed_action_set edge.
	FeedActionSet []*FeedActionSet `json:"feed_action_set,omitempty"`
	// FeedConfigAction holds the value of the feed_config_action edge.
	FeedConfigAction []*FeedConfigAction `json:"feed_config_action,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeedConfigEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// FeedOrErr returns the Feed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeedConfigEdges) FeedOrErr() (*Feed, error) {
	if e.Feed != nil {
		return e.Feed, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: feed.Label}
	}
	return nil, &NotLoadedError{edge: "feed"}
}

// NotifySourceOrErr returns the NotifySource value or an error if the edge
// was not loaded in eager-loading.
func (e FeedConfigEdges) NotifySourceOrErr() ([]*NotifySource, error) {
	if e.loadedTypes[2] {
		return e.NotifySource, nil
	}
	return nil, &NotLoadedError{edge: "notify_source"}
}

// FeedActionSetOrErr returns the FeedActionSet value or an error if the edge
// was not loaded in eager-loading.
func (e FeedConfigEdges) FeedActionSetOrErr() ([]*FeedActionSet, error) {
	if e.loadedTypes[3] {
		return e.FeedActionSet, nil
	}
	return nil, &NotLoadedError{edge: "feed_action_set"}
}

// FeedConfigActionOrErr returns the FeedConfigAction value or an error if the edge
// was not loaded in eager-loading.
func (e FeedConfigEdges) FeedConfigActionOrErr() ([]*FeedConfigAction, error) {
	if e.loadedTypes[4] {
		return e.FeedConfigAction, nil
	}
	return nil, &NotLoadedError{edge: "feed_config_action"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeedConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feedconfig.FieldSource:
			values[i] = new([]byte)
		case feedconfig.FieldHideItems:
			values[i] = new(sql.NullBool)
		case feedconfig.FieldID, feedconfig.FieldUserFeedConfig, feedconfig.FieldPullInterval:
			values[i] = new(sql.NullInt64)
		case feedconfig.FieldName, feedconfig.FieldDescription, feedconfig.FieldStatus, feedconfig.FieldCategory, feedconfig.FieldLatestPullStatus, feedconfig.FieldLatestPullMessage:
			values[i] = new(sql.NullString)
		case feedconfig.FieldLatestPullAt, feedconfig.FieldNextPullBeginAt, feedconfig.FieldUpdatedAt, feedconfig.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeedConfig fields.
func (fc *FeedConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feedconfig.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				fc.ID = model.InternalID(value.Int64)
			}
		case feedconfig.FieldUserFeedConfig:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_feed_config", values[i])
			} else if value.Valid {
				fc.UserFeedConfig = model.InternalID(value.Int64)
			}
		case feedconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fc.Name = value.String
			}
		case feedconfig.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fc.Description = value.String
			}
		case feedconfig.FieldSource:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fc.Source); err != nil {
					return fmt.Errorf("unmarshal field source: %w", err)
				}
			}
		case feedconfig.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fc.Status = feedconfig.Status(value.String)
			}
		case feedconfig.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				fc.Category = value.String
			}
		case feedconfig.FieldPullInterval:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pull_interval", values[i])
			} else if value.Valid {
				fc.PullInterval = time.Duration(value.Int64)
			}
		case feedconfig.FieldHideItems:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hide_items", values[i])
			} else if value.Valid {
				fc.HideItems = value.Bool
			}
		case feedconfig.FieldLatestPullAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field latest_pull_at", values[i])
			} else if value.Valid {
				fc.LatestPullAt = value.Time
			}
		case feedconfig.FieldLatestPullStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field latest_pull_status", values[i])
			} else if value.Valid {
				fc.LatestPullStatus = feedconfig.LatestPullStatus(value.String)
			}
		case feedconfig.FieldLatestPullMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field latest_pull_message", values[i])
			} else if value.Valid {
				fc.LatestPullMessage = value.String
			}
		case feedconfig.FieldNextPullBeginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_pull_begin_at", values[i])
			} else if value.Valid {
				fc.NextPullBeginAt = value.Time
			}
		case feedconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fc.UpdatedAt = value.Time
			}
		case feedconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fc.CreatedAt = value.Time
			}
		default:
			fc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FeedConfig.
// This includes values selected through modifiers, order, etc.
func (fc *FeedConfig) Value(name string) (ent.Value, error) {
	return fc.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the FeedConfig entity.
func (fc *FeedConfig) QueryOwner() *UserQuery {
	return NewFeedConfigClient(fc.config).QueryOwner(fc)
}

// QueryFeed queries the "feed" edge of the FeedConfig entity.
func (fc *FeedConfig) QueryFeed() *FeedQuery {
	return NewFeedConfigClient(fc.config).QueryFeed(fc)
}

// QueryNotifySource queries the "notify_source" edge of the FeedConfig entity.
func (fc *FeedConfig) QueryNotifySource() *NotifySourceQuery {
	return NewFeedConfigClient(fc.config).QueryNotifySource(fc)
}

// QueryFeedActionSet queries the "feed_action_set" edge of the FeedConfig entity.
func (fc *FeedConfig) QueryFeedActionSet() *FeedActionSetQuery {
	return NewFeedConfigClient(fc.config).QueryFeedActionSet(fc)
}

// QueryFeedConfigAction queries the "feed_config_action" edge of the FeedConfig entity.
func (fc *FeedConfig) QueryFeedConfigAction() *FeedConfigActionQuery {
	return NewFeedConfigClient(fc.config).QueryFeedConfigAction(fc)
}

// Update returns a builder for updating this FeedConfig.
// Note that you need to call FeedConfig.Unwrap() before calling this method if this FeedConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (fc *FeedConfig) Update() *FeedConfigUpdateOne {
	return NewFeedConfigClient(fc.config).UpdateOne(fc)
}

// Unwrap unwraps the FeedConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fc *FeedConfig) Unwrap() *FeedConfig {
	_tx, ok := fc.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeedConfig is not a transactional entity")
	}
	fc.config.driver = _tx.drv
	return fc
}

// String implements the fmt.Stringer.
func (fc *FeedConfig) String() string {
	var builder strings.Builder
	builder.WriteString("FeedConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fc.ID))
	builder.WriteString("user_feed_config=")
	builder.WriteString(fmt.Sprintf("%v", fc.UserFeedConfig))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fc.Description)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", fc.Source))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", fc.Status))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fc.Category)
	builder.WriteString(", ")
	builder.WriteString("pull_interval=")
	builder.WriteString(fmt.Sprintf("%v", fc.PullInterval))
	builder.WriteString(", ")
	builder.WriteString("hide_items=")
	builder.WriteString(fmt.Sprintf("%v", fc.HideItems))
	builder.WriteString(", ")
	builder.WriteString("latest_pull_at=")
	builder.WriteString(fc.LatestPullAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("latest_pull_status=")
	builder.WriteString(fmt.Sprintf("%v", fc.LatestPullStatus))
	builder.WriteString(", ")
	builder.WriteString("latest_pull_message=")
	builder.WriteString(fc.LatestPullMessage)
	builder.WriteString(", ")
	builder.WriteString("next_pull_begin_at=")
	builder.WriteString(fc.NextPullBeginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fc.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FeedConfigs is a parsable slice of FeedConfig.
type FeedConfigs []*FeedConfig
