// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditem"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditemcollection"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifysource"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// FeedItemCollectionQuery is the builder for querying FeedItemCollection entities.
type FeedItemCollectionQuery struct {
	config
	ctx              *QueryContext
	order            []feeditemcollection.OrderOption
	inters           []Interceptor
	predicates       []predicate.FeedItemCollection
	withOwner        *UserQuery
	withFeedItem     *FeedItemQuery
	withNotifySource *NotifySourceQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FeedItemCollectionQuery builder.
func (ficq *FeedItemCollectionQuery) Where(ps ...predicate.FeedItemCollection) *FeedItemCollectionQuery {
	ficq.predicates = append(ficq.predicates, ps...)
	return ficq
}

// Limit the number of records to be returned by this query.
func (ficq *FeedItemCollectionQuery) Limit(limit int) *FeedItemCollectionQuery {
	ficq.ctx.Limit = &limit
	return ficq
}

// Offset to start from.
func (ficq *FeedItemCollectionQuery) Offset(offset int) *FeedItemCollectionQuery {
	ficq.ctx.Offset = &offset
	return ficq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ficq *FeedItemCollectionQuery) Unique(unique bool) *FeedItemCollectionQuery {
	ficq.ctx.Unique = &unique
	return ficq
}

// Order specifies how the records should be ordered.
func (ficq *FeedItemCollectionQuery) Order(o ...feeditemcollection.OrderOption) *FeedItemCollectionQuery {
	ficq.order = append(ficq.order, o...)
	return ficq
}

// QueryOwner chains the current query on the "owner" edge.
func (ficq *FeedItemCollectionQuery) QueryOwner() *UserQuery {
	query := (&UserClient{config: ficq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ficq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ficq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditemcollection.Table, feeditemcollection.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feeditemcollection.OwnerTable, feeditemcollection.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ficq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeedItem chains the current query on the "feed_item" edge.
func (ficq *FeedItemCollectionQuery) QueryFeedItem() *FeedItemQuery {
	query := (&FeedItemClient{config: ficq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ficq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ficq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditemcollection.Table, feeditemcollection.FieldID, selector),
			sqlgraph.To(feeditem.Table, feeditem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, feeditemcollection.FeedItemTable, feeditemcollection.FeedItemPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ficq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotifySource chains the current query on the "notify_source" edge.
func (ficq *FeedItemCollectionQuery) QueryNotifySource() *NotifySourceQuery {
	query := (&NotifySourceClient{config: ficq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ficq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ficq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditemcollection.Table, feeditemcollection.FieldID, selector),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feeditemcollection.NotifySourceTable, feeditemcollection.NotifySourceColumn),
		)
		fromU = sqlgraph.SetNeighbors(ficq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FeedItemCollection entity from the query.
// Returns a *NotFoundError when no FeedItemCollection was found.
func (ficq *FeedItemCollectionQuery) First(ctx context.Context) (*FeedItemCollection, error) {
	nodes, err := ficq.Limit(1).All(setContextOp(ctx, ficq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{feeditemcollection.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ficq *FeedItemCollectionQuery) FirstX(ctx context.Context) *FeedItemCollection {
	node, err := ficq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FeedItemCollection ID from the query.
// Returns a *NotFoundError when no FeedItemCollection ID was found.
func (ficq *FeedItemCollectionQuery) FirstID(ctx context.Context) (id model.InternalID, err error) {
	var ids []model.InternalID
	if ids, err = ficq.Limit(1).IDs(setContextOp(ctx, ficq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{feeditemcollection.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ficq *FeedItemCollectionQuery) FirstIDX(ctx context.Context) model.InternalID {
	id, err := ficq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FeedItemCollection entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FeedItemCollection entity is found.
// Returns a *NotFoundError when no FeedItemCollection entities are found.
func (ficq *FeedItemCollectionQuery) Only(ctx context.Context) (*FeedItemCollection, error) {
	nodes, err := ficq.Limit(2).All(setContextOp(ctx, ficq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{feeditemcollection.Label}
	default:
		return nil, &NotSingularError{feeditemcollection.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ficq *FeedItemCollectionQuery) OnlyX(ctx context.Context) *FeedItemCollection {
	node, err := ficq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FeedItemCollection ID in the query.
// Returns a *NotSingularError when more than one FeedItemCollection ID is found.
// Returns a *NotFoundError when no entities are found.
func (ficq *FeedItemCollectionQuery) OnlyID(ctx context.Context) (id model.InternalID, err error) {
	var ids []model.InternalID
	if ids, err = ficq.Limit(2).IDs(setContextOp(ctx, ficq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{feeditemcollection.Label}
	default:
		err = &NotSingularError{feeditemcollection.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ficq *FeedItemCollectionQuery) OnlyIDX(ctx context.Context) model.InternalID {
	id, err := ficq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FeedItemCollections.
func (ficq *FeedItemCollectionQuery) All(ctx context.Context) ([]*FeedItemCollection, error) {
	ctx = setContextOp(ctx, ficq.ctx, ent.OpQueryAll)
	if err := ficq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FeedItemCollection, *FeedItemCollectionQuery]()
	return withInterceptors[[]*FeedItemCollection](ctx, ficq, qr, ficq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ficq *FeedItemCollectionQuery) AllX(ctx context.Context) []*FeedItemCollection {
	nodes, err := ficq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FeedItemCollection IDs.
func (ficq *FeedItemCollectionQuery) IDs(ctx context.Context) (ids []model.InternalID, err error) {
	if ficq.ctx.Unique == nil && ficq.path != nil {
		ficq.Unique(true)
	}
	ctx = setContextOp(ctx, ficq.ctx, ent.OpQueryIDs)
	if err = ficq.Select(feeditemcollection.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ficq *FeedItemCollectionQuery) IDsX(ctx context.Context) []model.InternalID {
	ids, err := ficq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ficq *FeedItemCollectionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ficq.ctx, ent.OpQueryCount)
	if err := ficq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ficq, querierCount[*FeedItemCollectionQuery](), ficq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ficq *FeedItemCollectionQuery) CountX(ctx context.Context) int {
	count, err := ficq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ficq *FeedItemCollectionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ficq.ctx, ent.OpQueryExist)
	switch _, err := ficq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ficq *FeedItemCollectionQuery) ExistX(ctx context.Context) bool {
	exist, err := ficq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FeedItemCollectionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ficq *FeedItemCollectionQuery) Clone() *FeedItemCollectionQuery {
	if ficq == nil {
		return nil
	}
	return &FeedItemCollectionQuery{
		config:           ficq.config,
		ctx:              ficq.ctx.Clone(),
		order:            append([]feeditemcollection.OrderOption{}, ficq.order...),
		inters:           append([]Interceptor{}, ficq.inters...),
		predicates:       append([]predicate.FeedItemCollection{}, ficq.predicates...),
		withOwner:        ficq.withOwner.Clone(),
		withFeedItem:     ficq.withFeedItem.Clone(),
		withNotifySource: ficq.withNotifySource.Clone(),
		// clone intermediate query.
		sql:  ficq.sql.Clone(),
		path: ficq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (ficq *FeedItemCollectionQuery) WithOwner(opts ...func(*UserQuery)) *FeedItemCollectionQuery {
	query := (&UserClient{config: ficq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ficq.withOwner = query
	return ficq
}

// WithFeedItem tells the query-builder to eager-load the nodes that are connected to
// the "feed_item" edge. The optional arguments are used to configure the query builder of the edge.
func (ficq *FeedItemCollectionQuery) WithFeedItem(opts ...func(*FeedItemQuery)) *FeedItemCollectionQuery {
	query := (&FeedItemClient{config: ficq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ficq.withFeedItem = query
	return ficq
}

// WithNotifySource tells the query-builder to eager-load the nodes that are connected to
// the "notify_source" edge. The optional arguments are used to configure the query builder of the edge.
func (ficq *FeedItemCollectionQuery) WithNotifySource(opts ...func(*NotifySourceQuery)) *FeedItemCollectionQuery {
	query := (&NotifySourceClient{config: ficq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ficq.withNotifySource = query
	return ficq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FeedItemCollection.Query().
//		GroupBy(feeditemcollection.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ficq *FeedItemCollectionQuery) GroupBy(field string, fields ...string) *FeedItemCollectionGroupBy {
	ficq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FeedItemCollectionGroupBy{build: ficq}
	grbuild.flds = &ficq.ctx.Fields
	grbuild.label = feeditemcollection.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.FeedItemCollection.Query().
//		Select(feeditemcollection.FieldName).
//		Scan(ctx, &v)
func (ficq *FeedItemCollectionQuery) Select(fields ...string) *FeedItemCollectionSelect {
	ficq.ctx.Fields = append(ficq.ctx.Fields, fields...)
	sbuild := &FeedItemCollectionSelect{FeedItemCollectionQuery: ficq}
	sbuild.label = feeditemcollection.Label
	sbuild.flds, sbuild.scan = &ficq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FeedItemCollectionSelect configured with the given aggregations.
func (ficq *FeedItemCollectionQuery) Aggregate(fns ...AggregateFunc) *FeedItemCollectionSelect {
	return ficq.Select().Aggregate(fns...)
}

func (ficq *FeedItemCollectionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ficq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ficq); err != nil {
				return err
			}
		}
	}
	for _, f := range ficq.ctx.Fields {
		if !feeditemcollection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ficq.path != nil {
		prev, err := ficq.path(ctx)
		if err != nil {
			return err
		}
		ficq.sql = prev
	}
	return nil
}

func (ficq *FeedItemCollectionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FeedItemCollection, error) {
	var (
		nodes       = []*FeedItemCollection{}
		withFKs     = ficq.withFKs
		_spec       = ficq.querySpec()
		loadedTypes = [3]bool{
			ficq.withOwner != nil,
			ficq.withFeedItem != nil,
			ficq.withNotifySource != nil,
		}
	)
	if ficq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, feeditemcollection.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FeedItemCollection).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FeedItemCollection{config: ficq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ficq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ficq.withOwner; query != nil {
		if err := ficq.loadOwner(ctx, query, nodes, nil,
			func(n *FeedItemCollection, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := ficq.withFeedItem; query != nil {
		if err := ficq.loadFeedItem(ctx, query, nodes,
			func(n *FeedItemCollection) { n.Edges.FeedItem = []*FeedItem{} },
			func(n *FeedItemCollection, e *FeedItem) { n.Edges.FeedItem = append(n.Edges.FeedItem, e) }); err != nil {
			return nil, err
		}
	}
	if query := ficq.withNotifySource; query != nil {
		if err := ficq.loadNotifySource(ctx, query, nodes,
			func(n *FeedItemCollection) { n.Edges.NotifySource = []*NotifySource{} },
			func(n *FeedItemCollection, e *NotifySource) { n.Edges.NotifySource = append(n.Edges.NotifySource, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ficq *FeedItemCollectionQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*FeedItemCollection, init func(*FeedItemCollection), assign func(*FeedItemCollection, *User)) error {
	ids := make([]model.InternalID, 0, len(nodes))
	nodeids := make(map[model.InternalID][]*FeedItemCollection)
	for i := range nodes {
		if nodes[i].user_feed_item_collection == nil {
			continue
		}
		fk := *nodes[i].user_feed_item_collection
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_feed_item_collection" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ficq *FeedItemCollectionQuery) loadFeedItem(ctx context.Context, query *FeedItemQuery, nodes []*FeedItemCollection, init func(*FeedItemCollection), assign func(*FeedItemCollection, *FeedItem)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[model.InternalID]*FeedItemCollection)
	nids := make(map[model.InternalID]map[*FeedItemCollection]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(feeditemcollection.FeedItemTable)
		s.Join(joinT).On(s.C(feeditem.FieldID), joinT.C(feeditemcollection.FeedItemPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(feeditemcollection.FeedItemPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(feeditemcollection.FeedItemPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := model.InternalID(values[0].(*sql.NullInt64).Int64)
				inValue := model.InternalID(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*FeedItemCollection]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*FeedItem](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "feed_item" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ficq *FeedItemCollectionQuery) loadNotifySource(ctx context.Context, query *NotifySourceQuery, nodes []*FeedItemCollection, init func(*FeedItemCollection), assign func(*FeedItemCollection, *NotifySource)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[model.InternalID]*FeedItemCollection)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(notifysource.FieldFeedItemCollectionID)
	}
	query.Where(predicate.NotifySource(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(feeditemcollection.NotifySourceColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.FeedItemCollectionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "feed_item_collection_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ficq *FeedItemCollectionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ficq.querySpec()
	_spec.Node.Columns = ficq.ctx.Fields
	if len(ficq.ctx.Fields) > 0 {
		_spec.Unique = ficq.ctx.Unique != nil && *ficq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ficq.driver, _spec)
}

func (ficq *FeedItemCollectionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(feeditemcollection.Table, feeditemcollection.Columns, sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64))
	_spec.From = ficq.sql
	if unique := ficq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ficq.path != nil {
		_spec.Unique = true
	}
	if fields := ficq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feeditemcollection.FieldID)
		for i := range fields {
			if fields[i] != feeditemcollection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ficq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ficq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ficq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ficq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ficq *FeedItemCollectionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ficq.driver.Dialect())
	t1 := builder.Table(feeditemcollection.Table)
	columns := ficq.ctx.Fields
	if len(columns) == 0 {
		columns = feeditemcollection.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ficq.sql != nil {
		selector = ficq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ficq.ctx.Unique != nil && *ficq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ficq.predicates {
		p(selector)
	}
	for _, p := range ficq.order {
		p(selector)
	}
	if offset := ficq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ficq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FeedItemCollectionGroupBy is the group-by builder for FeedItemCollection entities.
type FeedItemCollectionGroupBy struct {
	selector
	build *FeedItemCollectionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ficgb *FeedItemCollectionGroupBy) Aggregate(fns ...AggregateFunc) *FeedItemCollectionGroupBy {
	ficgb.fns = append(ficgb.fns, fns...)
	return ficgb
}

// Scan applies the selector query and scans the result into the given value.
func (ficgb *FeedItemCollectionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ficgb.build.ctx, ent.OpQueryGroupBy)
	if err := ficgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeedItemCollectionQuery, *FeedItemCollectionGroupBy](ctx, ficgb.build, ficgb, ficgb.build.inters, v)
}

func (ficgb *FeedItemCollectionGroupBy) sqlScan(ctx context.Context, root *FeedItemCollectionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ficgb.fns))
	for _, fn := range ficgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ficgb.flds)+len(ficgb.fns))
		for _, f := range *ficgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ficgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ficgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FeedItemCollectionSelect is the builder for selecting fields of FeedItemCollection entities.
type FeedItemCollectionSelect struct {
	*FeedItemCollectionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fics *FeedItemCollectionSelect) Aggregate(fns ...AggregateFunc) *FeedItemCollectionSelect {
	fics.fns = append(fics.fns, fns...)
	return fics
}

// Scan applies the selector query and scans the result into the given value.
func (fics *FeedItemCollectionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fics.ctx, ent.OpQuerySelect)
	if err := fics.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeedItemCollectionQuery, *FeedItemCollectionSelect](ctx, fics.FeedItemCollectionQuery, fics, fics.inters, v)
}

func (fics *FeedItemCollectionSelect) sqlScan(ctx context.Context, root *FeedItemCollectionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fics.fns))
	for _, fn := range fics.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fics.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fics.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
