// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/internal/data/internal/ent/appappcategory"
	"github.com/tuihub/librarian/internal/data/internal/ent/appcategory"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// AppAppCategoryQuery is the builder for querying AppAppCategory entities.
type AppAppCategoryQuery struct {
	config
	ctx             *QueryContext
	order           []appappcategory.OrderOption
	inters          []Interceptor
	predicates      []predicate.AppAppCategory
	withAppCategory *AppCategoryQuery
	withApp         *AppQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppAppCategoryQuery builder.
func (aacq *AppAppCategoryQuery) Where(ps ...predicate.AppAppCategory) *AppAppCategoryQuery {
	aacq.predicates = append(aacq.predicates, ps...)
	return aacq
}

// Limit the number of records to be returned by this query.
func (aacq *AppAppCategoryQuery) Limit(limit int) *AppAppCategoryQuery {
	aacq.ctx.Limit = &limit
	return aacq
}

// Offset to start from.
func (aacq *AppAppCategoryQuery) Offset(offset int) *AppAppCategoryQuery {
	aacq.ctx.Offset = &offset
	return aacq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aacq *AppAppCategoryQuery) Unique(unique bool) *AppAppCategoryQuery {
	aacq.ctx.Unique = &unique
	return aacq
}

// Order specifies how the records should be ordered.
func (aacq *AppAppCategoryQuery) Order(o ...appappcategory.OrderOption) *AppAppCategoryQuery {
	aacq.order = append(aacq.order, o...)
	return aacq
}

// QueryAppCategory chains the current query on the "app_category" edge.
func (aacq *AppAppCategoryQuery) QueryAppCategory() *AppCategoryQuery {
	query := (&AppCategoryClient{config: aacq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aacq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aacq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appappcategory.Table, appappcategory.FieldID, selector),
			sqlgraph.To(appcategory.Table, appcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, appappcategory.AppCategoryTable, appappcategory.AppCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(aacq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApp chains the current query on the "app" edge.
func (aacq *AppAppCategoryQuery) QueryApp() *AppQuery {
	query := (&AppClient{config: aacq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aacq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aacq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appappcategory.Table, appappcategory.FieldID, selector),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, appappcategory.AppTable, appappcategory.AppColumn),
		)
		fromU = sqlgraph.SetNeighbors(aacq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AppAppCategory entity from the query.
// Returns a *NotFoundError when no AppAppCategory was found.
func (aacq *AppAppCategoryQuery) First(ctx context.Context) (*AppAppCategory, error) {
	nodes, err := aacq.Limit(1).All(setContextOp(ctx, aacq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{appappcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aacq *AppAppCategoryQuery) FirstX(ctx context.Context) *AppAppCategory {
	node, err := aacq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AppAppCategory ID from the query.
// Returns a *NotFoundError when no AppAppCategory ID was found.
func (aacq *AppAppCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aacq.Limit(1).IDs(setContextOp(ctx, aacq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{appappcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aacq *AppAppCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := aacq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AppAppCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AppAppCategory entity is found.
// Returns a *NotFoundError when no AppAppCategory entities are found.
func (aacq *AppAppCategoryQuery) Only(ctx context.Context) (*AppAppCategory, error) {
	nodes, err := aacq.Limit(2).All(setContextOp(ctx, aacq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{appappcategory.Label}
	default:
		return nil, &NotSingularError{appappcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aacq *AppAppCategoryQuery) OnlyX(ctx context.Context) *AppAppCategory {
	node, err := aacq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AppAppCategory ID in the query.
// Returns a *NotSingularError when more than one AppAppCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (aacq *AppAppCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aacq.Limit(2).IDs(setContextOp(ctx, aacq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{appappcategory.Label}
	default:
		err = &NotSingularError{appappcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aacq *AppAppCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := aacq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AppAppCategories.
func (aacq *AppAppCategoryQuery) All(ctx context.Context) ([]*AppAppCategory, error) {
	ctx = setContextOp(ctx, aacq.ctx, ent.OpQueryAll)
	if err := aacq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AppAppCategory, *AppAppCategoryQuery]()
	return withInterceptors[[]*AppAppCategory](ctx, aacq, qr, aacq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aacq *AppAppCategoryQuery) AllX(ctx context.Context) []*AppAppCategory {
	nodes, err := aacq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AppAppCategory IDs.
func (aacq *AppAppCategoryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if aacq.ctx.Unique == nil && aacq.path != nil {
		aacq.Unique(true)
	}
	ctx = setContextOp(ctx, aacq.ctx, ent.OpQueryIDs)
	if err = aacq.Select(appappcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aacq *AppAppCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := aacq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aacq *AppAppCategoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aacq.ctx, ent.OpQueryCount)
	if err := aacq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aacq, querierCount[*AppAppCategoryQuery](), aacq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aacq *AppAppCategoryQuery) CountX(ctx context.Context) int {
	count, err := aacq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aacq *AppAppCategoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aacq.ctx, ent.OpQueryExist)
	switch _, err := aacq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aacq *AppAppCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := aacq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppAppCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aacq *AppAppCategoryQuery) Clone() *AppAppCategoryQuery {
	if aacq == nil {
		return nil
	}
	return &AppAppCategoryQuery{
		config:          aacq.config,
		ctx:             aacq.ctx.Clone(),
		order:           append([]appappcategory.OrderOption{}, aacq.order...),
		inters:          append([]Interceptor{}, aacq.inters...),
		predicates:      append([]predicate.AppAppCategory{}, aacq.predicates...),
		withAppCategory: aacq.withAppCategory.Clone(),
		withApp:         aacq.withApp.Clone(),
		// clone intermediate query.
		sql:  aacq.sql.Clone(),
		path: aacq.path,
	}
}

// WithAppCategory tells the query-builder to eager-load the nodes that are connected to
// the "app_category" edge. The optional arguments are used to configure the query builder of the edge.
func (aacq *AppAppCategoryQuery) WithAppCategory(opts ...func(*AppCategoryQuery)) *AppAppCategoryQuery {
	query := (&AppCategoryClient{config: aacq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aacq.withAppCategory = query
	return aacq
}

// WithApp tells the query-builder to eager-load the nodes that are connected to
// the "app" edge. The optional arguments are used to configure the query builder of the edge.
func (aacq *AppAppCategoryQuery) WithApp(opts ...func(*AppQuery)) *AppAppCategoryQuery {
	query := (&AppClient{config: aacq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aacq.withApp = query
	return aacq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AppCategoryID model.InternalID `json:"app_category_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AppAppCategory.Query().
//		GroupBy(appappcategory.FieldAppCategoryID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aacq *AppAppCategoryQuery) GroupBy(field string, fields ...string) *AppAppCategoryGroupBy {
	aacq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AppAppCategoryGroupBy{build: aacq}
	grbuild.flds = &aacq.ctx.Fields
	grbuild.label = appappcategory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AppCategoryID model.InternalID `json:"app_category_id,omitempty"`
//	}
//
//	client.AppAppCategory.Query().
//		Select(appappcategory.FieldAppCategoryID).
//		Scan(ctx, &v)
func (aacq *AppAppCategoryQuery) Select(fields ...string) *AppAppCategorySelect {
	aacq.ctx.Fields = append(aacq.ctx.Fields, fields...)
	sbuild := &AppAppCategorySelect{AppAppCategoryQuery: aacq}
	sbuild.label = appappcategory.Label
	sbuild.flds, sbuild.scan = &aacq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AppAppCategorySelect configured with the given aggregations.
func (aacq *AppAppCategoryQuery) Aggregate(fns ...AggregateFunc) *AppAppCategorySelect {
	return aacq.Select().Aggregate(fns...)
}

func (aacq *AppAppCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aacq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aacq); err != nil {
				return err
			}
		}
	}
	for _, f := range aacq.ctx.Fields {
		if !appappcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aacq.path != nil {
		prev, err := aacq.path(ctx)
		if err != nil {
			return err
		}
		aacq.sql = prev
	}
	return nil
}

func (aacq *AppAppCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AppAppCategory, error) {
	var (
		nodes       = []*AppAppCategory{}
		_spec       = aacq.querySpec()
		loadedTypes = [2]bool{
			aacq.withAppCategory != nil,
			aacq.withApp != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AppAppCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AppAppCategory{config: aacq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aacq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aacq.withAppCategory; query != nil {
		if err := aacq.loadAppCategory(ctx, query, nodes, nil,
			func(n *AppAppCategory, e *AppCategory) { n.Edges.AppCategory = e }); err != nil {
			return nil, err
		}
	}
	if query := aacq.withApp; query != nil {
		if err := aacq.loadApp(ctx, query, nodes, nil,
			func(n *AppAppCategory, e *App) { n.Edges.App = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aacq *AppAppCategoryQuery) loadAppCategory(ctx context.Context, query *AppCategoryQuery, nodes []*AppAppCategory, init func(*AppAppCategory), assign func(*AppAppCategory, *AppCategory)) error {
	ids := make([]model.InternalID, 0, len(nodes))
	nodeids := make(map[model.InternalID][]*AppAppCategory)
	for i := range nodes {
		fk := nodes[i].AppCategoryID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(appcategory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "app_category_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aacq *AppAppCategoryQuery) loadApp(ctx context.Context, query *AppQuery, nodes []*AppAppCategory, init func(*AppAppCategory), assign func(*AppAppCategory, *App)) error {
	ids := make([]model.InternalID, 0, len(nodes))
	nodeids := make(map[model.InternalID][]*AppAppCategory)
	for i := range nodes {
		fk := nodes[i].AppID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(app.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "app_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (aacq *AppAppCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aacq.querySpec()
	_spec.Node.Columns = aacq.ctx.Fields
	if len(aacq.ctx.Fields) > 0 {
		_spec.Unique = aacq.ctx.Unique != nil && *aacq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aacq.driver, _spec)
}

func (aacq *AppAppCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(appappcategory.Table, appappcategory.Columns, sqlgraph.NewFieldSpec(appappcategory.FieldID, field.TypeInt))
	_spec.From = aacq.sql
	if unique := aacq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aacq.path != nil {
		_spec.Unique = true
	}
	if fields := aacq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appappcategory.FieldID)
		for i := range fields {
			if fields[i] != appappcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if aacq.withAppCategory != nil {
			_spec.Node.AddColumnOnce(appappcategory.FieldAppCategoryID)
		}
		if aacq.withApp != nil {
			_spec.Node.AddColumnOnce(appappcategory.FieldAppID)
		}
	}
	if ps := aacq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aacq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aacq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aacq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aacq *AppAppCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aacq.driver.Dialect())
	t1 := builder.Table(appappcategory.Table)
	columns := aacq.ctx.Fields
	if len(columns) == 0 {
		columns = appappcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aacq.sql != nil {
		selector = aacq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aacq.ctx.Unique != nil && *aacq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range aacq.predicates {
		p(selector)
	}
	for _, p := range aacq.order {
		p(selector)
	}
	if offset := aacq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aacq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AppAppCategoryGroupBy is the group-by builder for AppAppCategory entities.
type AppAppCategoryGroupBy struct {
	selector
	build *AppAppCategoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aacgb *AppAppCategoryGroupBy) Aggregate(fns ...AggregateFunc) *AppAppCategoryGroupBy {
	aacgb.fns = append(aacgb.fns, fns...)
	return aacgb
}

// Scan applies the selector query and scans the result into the given value.
func (aacgb *AppAppCategoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aacgb.build.ctx, ent.OpQueryGroupBy)
	if err := aacgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppAppCategoryQuery, *AppAppCategoryGroupBy](ctx, aacgb.build, aacgb, aacgb.build.inters, v)
}

func (aacgb *AppAppCategoryGroupBy) sqlScan(ctx context.Context, root *AppAppCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(aacgb.fns))
	for _, fn := range aacgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*aacgb.flds)+len(aacgb.fns))
		for _, f := range *aacgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*aacgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aacgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AppAppCategorySelect is the builder for selecting fields of AppAppCategory entities.
type AppAppCategorySelect struct {
	*AppAppCategoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (aacs *AppAppCategorySelect) Aggregate(fns ...AggregateFunc) *AppAppCategorySelect {
	aacs.fns = append(aacs.fns, fns...)
	return aacs
}

// Scan applies the selector query and scans the result into the given value.
func (aacs *AppAppCategorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aacs.ctx, ent.OpQuerySelect)
	if err := aacs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppAppCategoryQuery, *AppAppCategorySelect](ctx, aacs.AppAppCategoryQuery, aacs, aacs.inters, v)
}

func (aacs *AppAppCategorySelect) sqlScan(ctx context.Context, root *AppAppCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(aacs.fns))
	for _, fn := range aacs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*aacs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aacs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
