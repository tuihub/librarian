// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedactionset"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfigaction"
	"github.com/tuihub/librarian/internal/model"
)

// FeedConfigAction is the model entity for the FeedConfigAction schema.
type FeedConfigAction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FeedConfigID holds the value of the "feed_config_id" field.
	FeedConfigID model.InternalID `json:"feed_config_id,omitempty"`
	// FeedActionSetID holds the value of the "feed_action_set_id" field.
	FeedActionSetID model.InternalID `json:"feed_action_set_id,omitempty"`
	// Index holds the value of the "index" field.
	Index int64 `json:"index,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedConfigActionQuery when eager-loading is set.
	Edges        FeedConfigActionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FeedConfigActionEdges holds the relations/edges for other nodes in the graph.
type FeedConfigActionEdges struct {
	// FeedConfig holds the value of the feed_config edge.
	FeedConfig *FeedConfig `json:"feed_config,omitempty"`
	// FeedActionSet holds the value of the feed_action_set edge.
	FeedActionSet *FeedActionSet `json:"feed_action_set,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FeedConfigOrErr returns the FeedConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeedConfigActionEdges) FeedConfigOrErr() (*FeedConfig, error) {
	if e.FeedConfig != nil {
		return e.FeedConfig, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: feedconfig.Label}
	}
	return nil, &NotLoadedError{edge: "feed_config"}
}

// FeedActionSetOrErr returns the FeedActionSet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeedConfigActionEdges) FeedActionSetOrErr() (*FeedActionSet, error) {
	if e.FeedActionSet != nil {
		return e.FeedActionSet, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: feedactionset.Label}
	}
	return nil, &NotLoadedError{edge: "feed_action_set"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeedConfigAction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feedconfigaction.FieldID, feedconfigaction.FieldFeedConfigID, feedconfigaction.FieldFeedActionSetID, feedconfigaction.FieldIndex:
			values[i] = new(sql.NullInt64)
		case feedconfigaction.FieldUpdatedAt, feedconfigaction.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeedConfigAction fields.
func (fca *FeedConfigAction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feedconfigaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fca.ID = int(value.Int64)
		case feedconfigaction.FieldFeedConfigID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feed_config_id", values[i])
			} else if value.Valid {
				fca.FeedConfigID = model.InternalID(value.Int64)
			}
		case feedconfigaction.FieldFeedActionSetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feed_action_set_id", values[i])
			} else if value.Valid {
				fca.FeedActionSetID = model.InternalID(value.Int64)
			}
		case feedconfigaction.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				fca.Index = value.Int64
			}
		case feedconfigaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fca.UpdatedAt = value.Time
			}
		case feedconfigaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fca.CreatedAt = value.Time
			}
		default:
			fca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FeedConfigAction.
// This includes values selected through modifiers, order, etc.
func (fca *FeedConfigAction) Value(name string) (ent.Value, error) {
	return fca.selectValues.Get(name)
}

// QueryFeedConfig queries the "feed_config" edge of the FeedConfigAction entity.
func (fca *FeedConfigAction) QueryFeedConfig() *FeedConfigQuery {
	return NewFeedConfigActionClient(fca.config).QueryFeedConfig(fca)
}

// QueryFeedActionSet queries the "feed_action_set" edge of the FeedConfigAction entity.
func (fca *FeedConfigAction) QueryFeedActionSet() *FeedActionSetQuery {
	return NewFeedConfigActionClient(fca.config).QueryFeedActionSet(fca)
}

// Update returns a builder for updating this FeedConfigAction.
// Note that you need to call FeedConfigAction.Unwrap() before calling this method if this FeedConfigAction
// was returned from a transaction, and the transaction was committed or rolled back.
func (fca *FeedConfigAction) Update() *FeedConfigActionUpdateOne {
	return NewFeedConfigActionClient(fca.config).UpdateOne(fca)
}

// Unwrap unwraps the FeedConfigAction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fca *FeedConfigAction) Unwrap() *FeedConfigAction {
	_tx, ok := fca.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeedConfigAction is not a transactional entity")
	}
	fca.config.driver = _tx.drv
	return fca
}

// String implements the fmt.Stringer.
func (fca *FeedConfigAction) String() string {
	var builder strings.Builder
	builder.WriteString("FeedConfigAction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fca.ID))
	builder.WriteString("feed_config_id=")
	builder.WriteString(fmt.Sprintf("%v", fca.FeedConfigID))
	builder.WriteString(", ")
	builder.WriteString("feed_action_set_id=")
	builder.WriteString(fmt.Sprintf("%v", fca.FeedActionSetID))
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", fca.Index))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fca.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fca.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FeedConfigActions is a parsable slice of FeedConfigAction.
type FeedConfigActions []*FeedConfigAction
