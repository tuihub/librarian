// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinstruntime"
	"github.com/tuihub/librarian/internal/model"
)

// AppInstRunTime is the model entity for the AppInstRunTime schema.
type AppInstRunTime struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID model.InternalID `json:"user_id,omitempty"`
	// AppInstID holds the value of the "app_inst_id" field.
	AppInstID model.InternalID `json:"app_inst_id,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// RunDuration holds the value of the "run_duration" field.
	RunDuration time.Duration `json:"run_duration,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppInstRunTime) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appinstruntime.FieldID, appinstruntime.FieldUserID, appinstruntime.FieldAppInstID, appinstruntime.FieldRunDuration:
			values[i] = new(sql.NullInt64)
		case appinstruntime.FieldStartTime, appinstruntime.FieldUpdatedAt, appinstruntime.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppInstRunTime fields.
func (airt *AppInstRunTime) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appinstruntime.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			airt.ID = int(value.Int64)
		case appinstruntime.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				airt.UserID = model.InternalID(value.Int64)
			}
		case appinstruntime.FieldAppInstID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_inst_id", values[i])
			} else if value.Valid {
				airt.AppInstID = model.InternalID(value.Int64)
			}
		case appinstruntime.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				airt.StartTime = value.Time
			}
		case appinstruntime.FieldRunDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field run_duration", values[i])
			} else if value.Valid {
				airt.RunDuration = time.Duration(value.Int64)
			}
		case appinstruntime.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				airt.UpdatedAt = value.Time
			}
		case appinstruntime.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				airt.CreatedAt = value.Time
			}
		default:
			airt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppInstRunTime.
// This includes values selected through modifiers, order, etc.
func (airt *AppInstRunTime) Value(name string) (ent.Value, error) {
	return airt.selectValues.Get(name)
}

// Update returns a builder for updating this AppInstRunTime.
// Note that you need to call AppInstRunTime.Unwrap() before calling this method if this AppInstRunTime
// was returned from a transaction, and the transaction was committed or rolled back.
func (airt *AppInstRunTime) Update() *AppInstRunTimeUpdateOne {
	return NewAppInstRunTimeClient(airt.config).UpdateOne(airt)
}

// Unwrap unwraps the AppInstRunTime entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (airt *AppInstRunTime) Unwrap() *AppInstRunTime {
	_tx, ok := airt.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppInstRunTime is not a transactional entity")
	}
	airt.config.driver = _tx.drv
	return airt
}

// String implements the fmt.Stringer.
func (airt *AppInstRunTime) String() string {
	var builder strings.Builder
	builder.WriteString("AppInstRunTime(")
	builder.WriteString(fmt.Sprintf("id=%v, ", airt.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", airt.UserID))
	builder.WriteString(", ")
	builder.WriteString("app_inst_id=")
	builder.WriteString(fmt.Sprintf("%v", airt.AppInstID))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(airt.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("run_duration=")
	builder.WriteString(fmt.Sprintf("%v", airt.RunDuration))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(airt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(airt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppInstRunTimes is a parsable slice of AppInstRunTime.
type AppInstRunTimes []*AppInstRunTime
