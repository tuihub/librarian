// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/appappcategory"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
)

// AppAppCategoryDelete is the builder for deleting a AppAppCategory entity.
type AppAppCategoryDelete struct {
	config
	hooks    []Hook
	mutation *AppAppCategoryMutation
}

// Where appends a list predicates to the AppAppCategoryDelete builder.
func (aacd *AppAppCategoryDelete) Where(ps ...predicate.AppAppCategory) *AppAppCategoryDelete {
	aacd.mutation.Where(ps...)
	return aacd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aacd *AppAppCategoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, aacd.sqlExec, aacd.mutation, aacd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aacd *AppAppCategoryDelete) ExecX(ctx context.Context) int {
	n, err := aacd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aacd *AppAppCategoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appappcategory.Table, sqlgraph.NewFieldSpec(appappcategory.FieldID, field.TypeInt))
	if ps := aacd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aacd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aacd.mutation.done = true
	return affected, err
}

// AppAppCategoryDeleteOne is the builder for deleting a single AppAppCategory entity.
type AppAppCategoryDeleteOne struct {
	aacd *AppAppCategoryDelete
}

// Where appends a list predicates to the AppAppCategoryDelete builder.
func (aacdo *AppAppCategoryDeleteOne) Where(ps ...predicate.AppAppCategory) *AppAppCategoryDeleteOne {
	aacdo.aacd.mutation.Where(ps...)
	return aacdo
}

// Exec executes the deletion query.
func (aacdo *AppAppCategoryDeleteOne) Exec(ctx context.Context) error {
	n, err := aacdo.aacd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appappcategory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aacdo *AppAppCategoryDeleteOne) ExecX(ctx context.Context) {
	if err := aacdo.Exec(ctx); err != nil {
		panic(err)
	}
}
