// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinst"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// AppInstCreate is the builder for creating a AppInst entity.
type AppInstCreate struct {
	config
	mutation *AppInstMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeviceID sets the "device_id" field.
func (aic *AppInstCreate) SetDeviceID(mi model.InternalID) *AppInstCreate {
	aic.mutation.SetDeviceID(mi)
	return aic
}

// SetAppID sets the "app_id" field.
func (aic *AppInstCreate) SetAppID(mi model.InternalID) *AppInstCreate {
	aic.mutation.SetAppID(mi)
	return aic
}

// SetUpdatedAt sets the "updated_at" field.
func (aic *AppInstCreate) SetUpdatedAt(t time.Time) *AppInstCreate {
	aic.mutation.SetUpdatedAt(t)
	return aic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aic *AppInstCreate) SetNillableUpdatedAt(t *time.Time) *AppInstCreate {
	if t != nil {
		aic.SetUpdatedAt(*t)
	}
	return aic
}

// SetCreatedAt sets the "created_at" field.
func (aic *AppInstCreate) SetCreatedAt(t time.Time) *AppInstCreate {
	aic.mutation.SetCreatedAt(t)
	return aic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aic *AppInstCreate) SetNillableCreatedAt(t *time.Time) *AppInstCreate {
	if t != nil {
		aic.SetCreatedAt(*t)
	}
	return aic
}

// SetID sets the "id" field.
func (aic *AppInstCreate) SetID(mi model.InternalID) *AppInstCreate {
	aic.mutation.SetID(mi)
	return aic
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (aic *AppInstCreate) SetOwnerID(id model.InternalID) *AppInstCreate {
	aic.mutation.SetOwnerID(id)
	return aic
}

// SetOwner sets the "owner" edge to the User entity.
func (aic *AppInstCreate) SetOwner(u *User) *AppInstCreate {
	return aic.SetOwnerID(u.ID)
}

// Mutation returns the AppInstMutation object of the builder.
func (aic *AppInstCreate) Mutation() *AppInstMutation {
	return aic.mutation
}

// Save creates the AppInst in the database.
func (aic *AppInstCreate) Save(ctx context.Context) (*AppInst, error) {
	aic.defaults()
	return withHooks(ctx, aic.sqlSave, aic.mutation, aic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aic *AppInstCreate) SaveX(ctx context.Context) *AppInst {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *AppInstCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *AppInstCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aic *AppInstCreate) defaults() {
	if _, ok := aic.mutation.UpdatedAt(); !ok {
		v := appinst.DefaultUpdatedAt()
		aic.mutation.SetUpdatedAt(v)
	}
	if _, ok := aic.mutation.CreatedAt(); !ok {
		v := appinst.DefaultCreatedAt()
		aic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *AppInstCreate) check() error {
	if _, ok := aic.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "AppInst.device_id"`)}
	}
	if _, ok := aic.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppInst.app_id"`)}
	}
	if _, ok := aic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppInst.updated_at"`)}
	}
	if _, ok := aic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppInst.created_at"`)}
	}
	if len(aic.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "AppInst.owner"`)}
	}
	return nil
}

func (aic *AppInstCreate) sqlSave(ctx context.Context) (*AppInst, error) {
	if err := aic.check(); err != nil {
		return nil, err
	}
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	aic.mutation.id = &_node.ID
	aic.mutation.done = true
	return _node, nil
}

func (aic *AppInstCreate) createSpec() (*AppInst, *sqlgraph.CreateSpec) {
	var (
		_node = &AppInst{config: aic.config}
		_spec = sqlgraph.NewCreateSpec(appinst.Table, sqlgraph.NewFieldSpec(appinst.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = aic.conflict
	if id, ok := aic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aic.mutation.DeviceID(); ok {
		_spec.SetField(appinst.FieldDeviceID, field.TypeInt64, value)
		_node.DeviceID = value
	}
	if value, ok := aic.mutation.AppID(); ok {
		_spec.SetField(appinst.FieldAppID, field.TypeInt64, value)
		_node.AppID = value
	}
	if value, ok := aic.mutation.UpdatedAt(); ok {
		_spec.SetField(appinst.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aic.mutation.CreatedAt(); ok {
		_spec.SetField(appinst.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := aic.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appinst.OwnerTable,
			Columns: []string{appinst.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_app_inst = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppInst.Create().
//		SetDeviceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppInstUpsert) {
//			SetDeviceID(v+v).
//		}).
//		Exec(ctx)
func (aic *AppInstCreate) OnConflict(opts ...sql.ConflictOption) *AppInstUpsertOne {
	aic.conflict = opts
	return &AppInstUpsertOne{
		create: aic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppInst.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aic *AppInstCreate) OnConflictColumns(columns ...string) *AppInstUpsertOne {
	aic.conflict = append(aic.conflict, sql.ConflictColumns(columns...))
	return &AppInstUpsertOne{
		create: aic,
	}
}

type (
	// AppInstUpsertOne is the builder for "upsert"-ing
	//  one AppInst node.
	AppInstUpsertOne struct {
		create *AppInstCreate
	}

	// AppInstUpsert is the "OnConflict" setter.
	AppInstUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeviceID sets the "device_id" field.
func (u *AppInstUpsert) SetDeviceID(v model.InternalID) *AppInstUpsert {
	u.Set(appinst.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *AppInstUpsert) UpdateDeviceID() *AppInstUpsert {
	u.SetExcluded(appinst.FieldDeviceID)
	return u
}

// AddDeviceID adds v to the "device_id" field.
func (u *AppInstUpsert) AddDeviceID(v model.InternalID) *AppInstUpsert {
	u.Add(appinst.FieldDeviceID, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppInstUpsert) SetAppID(v model.InternalID) *AppInstUpsert {
	u.Set(appinst.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppInstUpsert) UpdateAppID() *AppInstUpsert {
	u.SetExcluded(appinst.FieldAppID)
	return u
}

// AddAppID adds v to the "app_id" field.
func (u *AppInstUpsert) AddAppID(v model.InternalID) *AppInstUpsert {
	u.Add(appinst.FieldAppID, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppInstUpsert) SetUpdatedAt(v time.Time) *AppInstUpsert {
	u.Set(appinst.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppInstUpsert) UpdateUpdatedAt() *AppInstUpsert {
	u.SetExcluded(appinst.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppInstUpsert) SetCreatedAt(v time.Time) *AppInstUpsert {
	u.Set(appinst.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppInstUpsert) UpdateCreatedAt() *AppInstUpsert {
	u.SetExcluded(appinst.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppInst.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appinst.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppInstUpsertOne) UpdateNewValues() *AppInstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appinst.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppInst.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppInstUpsertOne) Ignore() *AppInstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppInstUpsertOne) DoNothing() *AppInstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppInstCreate.OnConflict
// documentation for more info.
func (u *AppInstUpsertOne) Update(set func(*AppInstUpsert)) *AppInstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppInstUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *AppInstUpsertOne) SetDeviceID(v model.InternalID) *AppInstUpsertOne {
	return u.Update(func(s *AppInstUpsert) {
		s.SetDeviceID(v)
	})
}

// AddDeviceID adds v to the "device_id" field.
func (u *AppInstUpsertOne) AddDeviceID(v model.InternalID) *AppInstUpsertOne {
	return u.Update(func(s *AppInstUpsert) {
		s.AddDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *AppInstUpsertOne) UpdateDeviceID() *AppInstUpsertOne {
	return u.Update(func(s *AppInstUpsert) {
		s.UpdateDeviceID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppInstUpsertOne) SetAppID(v model.InternalID) *AppInstUpsertOne {
	return u.Update(func(s *AppInstUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *AppInstUpsertOne) AddAppID(v model.InternalID) *AppInstUpsertOne {
	return u.Update(func(s *AppInstUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppInstUpsertOne) UpdateAppID() *AppInstUpsertOne {
	return u.Update(func(s *AppInstUpsert) {
		s.UpdateAppID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppInstUpsertOne) SetUpdatedAt(v time.Time) *AppInstUpsertOne {
	return u.Update(func(s *AppInstUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppInstUpsertOne) UpdateUpdatedAt() *AppInstUpsertOne {
	return u.Update(func(s *AppInstUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppInstUpsertOne) SetCreatedAt(v time.Time) *AppInstUpsertOne {
	return u.Update(func(s *AppInstUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppInstUpsertOne) UpdateCreatedAt() *AppInstUpsertOne {
	return u.Update(func(s *AppInstUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *AppInstUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppInstCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppInstUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppInstUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppInstUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppInstCreateBulk is the builder for creating many AppInst entities in bulk.
type AppInstCreateBulk struct {
	config
	err      error
	builders []*AppInstCreate
	conflict []sql.ConflictOption
}

// Save creates the AppInst entities in the database.
func (aicb *AppInstCreateBulk) Save(ctx context.Context) ([]*AppInst, error) {
	if aicb.err != nil {
		return nil, aicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*AppInst, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppInstMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *AppInstCreateBulk) SaveX(ctx context.Context) []*AppInst {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *AppInstCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *AppInstCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppInst.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppInstUpsert) {
//			SetDeviceID(v+v).
//		}).
//		Exec(ctx)
func (aicb *AppInstCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppInstUpsertBulk {
	aicb.conflict = opts
	return &AppInstUpsertBulk{
		create: aicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppInst.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aicb *AppInstCreateBulk) OnConflictColumns(columns ...string) *AppInstUpsertBulk {
	aicb.conflict = append(aicb.conflict, sql.ConflictColumns(columns...))
	return &AppInstUpsertBulk{
		create: aicb,
	}
}

// AppInstUpsertBulk is the builder for "upsert"-ing
// a bulk of AppInst nodes.
type AppInstUpsertBulk struct {
	create *AppInstCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppInst.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appinst.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppInstUpsertBulk) UpdateNewValues() *AppInstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appinst.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppInst.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppInstUpsertBulk) Ignore() *AppInstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppInstUpsertBulk) DoNothing() *AppInstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppInstCreateBulk.OnConflict
// documentation for more info.
func (u *AppInstUpsertBulk) Update(set func(*AppInstUpsert)) *AppInstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppInstUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *AppInstUpsertBulk) SetDeviceID(v model.InternalID) *AppInstUpsertBulk {
	return u.Update(func(s *AppInstUpsert) {
		s.SetDeviceID(v)
	})
}

// AddDeviceID adds v to the "device_id" field.
func (u *AppInstUpsertBulk) AddDeviceID(v model.InternalID) *AppInstUpsertBulk {
	return u.Update(func(s *AppInstUpsert) {
		s.AddDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *AppInstUpsertBulk) UpdateDeviceID() *AppInstUpsertBulk {
	return u.Update(func(s *AppInstUpsert) {
		s.UpdateDeviceID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppInstUpsertBulk) SetAppID(v model.InternalID) *AppInstUpsertBulk {
	return u.Update(func(s *AppInstUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *AppInstUpsertBulk) AddAppID(v model.InternalID) *AppInstUpsertBulk {
	return u.Update(func(s *AppInstUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppInstUpsertBulk) UpdateAppID() *AppInstUpsertBulk {
	return u.Update(func(s *AppInstUpsert) {
		s.UpdateAppID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppInstUpsertBulk) SetUpdatedAt(v time.Time) *AppInstUpsertBulk {
	return u.Update(func(s *AppInstUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppInstUpsertBulk) UpdateUpdatedAt() *AppInstUpsertBulk {
	return u.Update(func(s *AppInstUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppInstUpsertBulk) SetCreatedAt(v time.Time) *AppInstUpsertBulk {
	return u.Update(func(s *AppInstUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppInstUpsertBulk) UpdateCreatedAt() *AppInstUpsertBulk {
	return u.Update(func(s *AppInstUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *AppInstUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppInstCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppInstCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppInstUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
