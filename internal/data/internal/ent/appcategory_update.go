// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/internal/data/internal/ent/appappcategory"
	"github.com/tuihub/librarian/internal/data/internal/ent/appcategory"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// AppCategoryUpdate is the builder for updating AppCategory entities.
type AppCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *AppCategoryMutation
}

// Where appends a list predicates to the AppCategoryUpdate builder.
func (acu *AppCategoryUpdate) Where(ps ...predicate.AppCategory) *AppCategoryUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetUserID sets the "user_id" field.
func (acu *AppCategoryUpdate) SetUserID(mi model.InternalID) *AppCategoryUpdate {
	acu.mutation.ResetUserID()
	acu.mutation.SetUserID(mi)
	return acu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (acu *AppCategoryUpdate) SetNillableUserID(mi *model.InternalID) *AppCategoryUpdate {
	if mi != nil {
		acu.SetUserID(*mi)
	}
	return acu
}

// AddUserID adds mi to the "user_id" field.
func (acu *AppCategoryUpdate) AddUserID(mi model.InternalID) *AppCategoryUpdate {
	acu.mutation.AddUserID(mi)
	return acu
}

// SetVersionNumber sets the "version_number" field.
func (acu *AppCategoryUpdate) SetVersionNumber(u uint64) *AppCategoryUpdate {
	acu.mutation.ResetVersionNumber()
	acu.mutation.SetVersionNumber(u)
	return acu
}

// SetNillableVersionNumber sets the "version_number" field if the given value is not nil.
func (acu *AppCategoryUpdate) SetNillableVersionNumber(u *uint64) *AppCategoryUpdate {
	if u != nil {
		acu.SetVersionNumber(*u)
	}
	return acu
}

// AddVersionNumber adds u to the "version_number" field.
func (acu *AppCategoryUpdate) AddVersionNumber(u int64) *AppCategoryUpdate {
	acu.mutation.AddVersionNumber(u)
	return acu
}

// SetVersionDate sets the "version_date" field.
func (acu *AppCategoryUpdate) SetVersionDate(t time.Time) *AppCategoryUpdate {
	acu.mutation.SetVersionDate(t)
	return acu
}

// SetNillableVersionDate sets the "version_date" field if the given value is not nil.
func (acu *AppCategoryUpdate) SetNillableVersionDate(t *time.Time) *AppCategoryUpdate {
	if t != nil {
		acu.SetVersionDate(*t)
	}
	return acu
}

// SetName sets the "name" field.
func (acu *AppCategoryUpdate) SetName(s string) *AppCategoryUpdate {
	acu.mutation.SetName(s)
	return acu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acu *AppCategoryUpdate) SetNillableName(s *string) *AppCategoryUpdate {
	if s != nil {
		acu.SetName(*s)
	}
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AppCategoryUpdate) SetUpdatedAt(t time.Time) *AppCategoryUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// SetCreatedAt sets the "created_at" field.
func (acu *AppCategoryUpdate) SetCreatedAt(t time.Time) *AppCategoryUpdate {
	acu.mutation.SetCreatedAt(t)
	return acu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acu *AppCategoryUpdate) SetNillableCreatedAt(t *time.Time) *AppCategoryUpdate {
	if t != nil {
		acu.SetCreatedAt(*t)
	}
	return acu
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (acu *AppCategoryUpdate) AddAppIDs(ids ...model.InternalID) *AppCategoryUpdate {
	acu.mutation.AddAppIDs(ids...)
	return acu
}

// AddApp adds the "app" edges to the App entity.
func (acu *AppCategoryUpdate) AddApp(a ...*App) *AppCategoryUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.AddAppIDs(ids...)
}

// AddAppAppCategoryIDs adds the "app_app_category" edge to the AppAppCategory entity by IDs.
func (acu *AppCategoryUpdate) AddAppAppCategoryIDs(ids ...int) *AppCategoryUpdate {
	acu.mutation.AddAppAppCategoryIDs(ids...)
	return acu
}

// AddAppAppCategory adds the "app_app_category" edges to the AppAppCategory entity.
func (acu *AppCategoryUpdate) AddAppAppCategory(a ...*AppAppCategory) *AppCategoryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.AddAppAppCategoryIDs(ids...)
}

// Mutation returns the AppCategoryMutation object of the builder.
func (acu *AppCategoryUpdate) Mutation() *AppCategoryMutation {
	return acu.mutation
}

// ClearApp clears all "app" edges to the App entity.
func (acu *AppCategoryUpdate) ClearApp() *AppCategoryUpdate {
	acu.mutation.ClearApp()
	return acu
}

// RemoveAppIDs removes the "app" edge to App entities by IDs.
func (acu *AppCategoryUpdate) RemoveAppIDs(ids ...model.InternalID) *AppCategoryUpdate {
	acu.mutation.RemoveAppIDs(ids...)
	return acu
}

// RemoveApp removes "app" edges to App entities.
func (acu *AppCategoryUpdate) RemoveApp(a ...*App) *AppCategoryUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.RemoveAppIDs(ids...)
}

// ClearAppAppCategory clears all "app_app_category" edges to the AppAppCategory entity.
func (acu *AppCategoryUpdate) ClearAppAppCategory() *AppCategoryUpdate {
	acu.mutation.ClearAppAppCategory()
	return acu
}

// RemoveAppAppCategoryIDs removes the "app_app_category" edge to AppAppCategory entities by IDs.
func (acu *AppCategoryUpdate) RemoveAppAppCategoryIDs(ids ...int) *AppCategoryUpdate {
	acu.mutation.RemoveAppAppCategoryIDs(ids...)
	return acu
}

// RemoveAppAppCategory removes "app_app_category" edges to AppAppCategory entities.
func (acu *AppCategoryUpdate) RemoveAppAppCategory(a ...*AppAppCategory) *AppCategoryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.RemoveAppAppCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AppCategoryUpdate) Save(ctx context.Context) (int, error) {
	acu.defaults()
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AppCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AppCategoryUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AppCategoryUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AppCategoryUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := appcategory.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

func (acu *AppCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appcategory.Table, appcategory.Columns, sqlgraph.NewFieldSpec(appcategory.FieldID, field.TypeInt64))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.UserID(); ok {
		_spec.SetField(appcategory.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := acu.mutation.AddedUserID(); ok {
		_spec.AddField(appcategory.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := acu.mutation.VersionNumber(); ok {
		_spec.SetField(appcategory.FieldVersionNumber, field.TypeUint64, value)
	}
	if value, ok := acu.mutation.AddedVersionNumber(); ok {
		_spec.AddField(appcategory.FieldVersionNumber, field.TypeUint64, value)
	}
	if value, ok := acu.mutation.VersionDate(); ok {
		_spec.SetField(appcategory.FieldVersionDate, field.TypeTime, value)
	}
	if value, ok := acu.mutation.Name(); ok {
		_spec.SetField(appcategory.FieldName, field.TypeString, value)
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(appcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acu.mutation.CreatedAt(); ok {
		_spec.SetField(appcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if acu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appcategory.AppTable,
			Columns: appcategory.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedAppIDs(); len(nodes) > 0 && !acu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appcategory.AppTable,
			Columns: appcategory.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appcategory.AppTable,
			Columns: appcategory.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.AppAppCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appcategory.AppAppCategoryTable,
			Columns: []string{appcategory.AppAppCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appappcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedAppAppCategoryIDs(); len(nodes) > 0 && !acu.mutation.AppAppCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appcategory.AppAppCategoryTable,
			Columns: []string{appcategory.AppAppCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appappcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.AppAppCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appcategory.AppAppCategoryTable,
			Columns: []string{appcategory.AppAppCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appappcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AppCategoryUpdateOne is the builder for updating a single AppCategory entity.
type AppCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppCategoryMutation
}

// SetUserID sets the "user_id" field.
func (acuo *AppCategoryUpdateOne) SetUserID(mi model.InternalID) *AppCategoryUpdateOne {
	acuo.mutation.ResetUserID()
	acuo.mutation.SetUserID(mi)
	return acuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (acuo *AppCategoryUpdateOne) SetNillableUserID(mi *model.InternalID) *AppCategoryUpdateOne {
	if mi != nil {
		acuo.SetUserID(*mi)
	}
	return acuo
}

// AddUserID adds mi to the "user_id" field.
func (acuo *AppCategoryUpdateOne) AddUserID(mi model.InternalID) *AppCategoryUpdateOne {
	acuo.mutation.AddUserID(mi)
	return acuo
}

// SetVersionNumber sets the "version_number" field.
func (acuo *AppCategoryUpdateOne) SetVersionNumber(u uint64) *AppCategoryUpdateOne {
	acuo.mutation.ResetVersionNumber()
	acuo.mutation.SetVersionNumber(u)
	return acuo
}

// SetNillableVersionNumber sets the "version_number" field if the given value is not nil.
func (acuo *AppCategoryUpdateOne) SetNillableVersionNumber(u *uint64) *AppCategoryUpdateOne {
	if u != nil {
		acuo.SetVersionNumber(*u)
	}
	return acuo
}

// AddVersionNumber adds u to the "version_number" field.
func (acuo *AppCategoryUpdateOne) AddVersionNumber(u int64) *AppCategoryUpdateOne {
	acuo.mutation.AddVersionNumber(u)
	return acuo
}

// SetVersionDate sets the "version_date" field.
func (acuo *AppCategoryUpdateOne) SetVersionDate(t time.Time) *AppCategoryUpdateOne {
	acuo.mutation.SetVersionDate(t)
	return acuo
}

// SetNillableVersionDate sets the "version_date" field if the given value is not nil.
func (acuo *AppCategoryUpdateOne) SetNillableVersionDate(t *time.Time) *AppCategoryUpdateOne {
	if t != nil {
		acuo.SetVersionDate(*t)
	}
	return acuo
}

// SetName sets the "name" field.
func (acuo *AppCategoryUpdateOne) SetName(s string) *AppCategoryUpdateOne {
	acuo.mutation.SetName(s)
	return acuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acuo *AppCategoryUpdateOne) SetNillableName(s *string) *AppCategoryUpdateOne {
	if s != nil {
		acuo.SetName(*s)
	}
	return acuo
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AppCategoryUpdateOne) SetUpdatedAt(t time.Time) *AppCategoryUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// SetCreatedAt sets the "created_at" field.
func (acuo *AppCategoryUpdateOne) SetCreatedAt(t time.Time) *AppCategoryUpdateOne {
	acuo.mutation.SetCreatedAt(t)
	return acuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acuo *AppCategoryUpdateOne) SetNillableCreatedAt(t *time.Time) *AppCategoryUpdateOne {
	if t != nil {
		acuo.SetCreatedAt(*t)
	}
	return acuo
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (acuo *AppCategoryUpdateOne) AddAppIDs(ids ...model.InternalID) *AppCategoryUpdateOne {
	acuo.mutation.AddAppIDs(ids...)
	return acuo
}

// AddApp adds the "app" edges to the App entity.
func (acuo *AppCategoryUpdateOne) AddApp(a ...*App) *AppCategoryUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.AddAppIDs(ids...)
}

// AddAppAppCategoryIDs adds the "app_app_category" edge to the AppAppCategory entity by IDs.
func (acuo *AppCategoryUpdateOne) AddAppAppCategoryIDs(ids ...int) *AppCategoryUpdateOne {
	acuo.mutation.AddAppAppCategoryIDs(ids...)
	return acuo
}

// AddAppAppCategory adds the "app_app_category" edges to the AppAppCategory entity.
func (acuo *AppCategoryUpdateOne) AddAppAppCategory(a ...*AppAppCategory) *AppCategoryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.AddAppAppCategoryIDs(ids...)
}

// Mutation returns the AppCategoryMutation object of the builder.
func (acuo *AppCategoryUpdateOne) Mutation() *AppCategoryMutation {
	return acuo.mutation
}

// ClearApp clears all "app" edges to the App entity.
func (acuo *AppCategoryUpdateOne) ClearApp() *AppCategoryUpdateOne {
	acuo.mutation.ClearApp()
	return acuo
}

// RemoveAppIDs removes the "app" edge to App entities by IDs.
func (acuo *AppCategoryUpdateOne) RemoveAppIDs(ids ...model.InternalID) *AppCategoryUpdateOne {
	acuo.mutation.RemoveAppIDs(ids...)
	return acuo
}

// RemoveApp removes "app" edges to App entities.
func (acuo *AppCategoryUpdateOne) RemoveApp(a ...*App) *AppCategoryUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.RemoveAppIDs(ids...)
}

// ClearAppAppCategory clears all "app_app_category" edges to the AppAppCategory entity.
func (acuo *AppCategoryUpdateOne) ClearAppAppCategory() *AppCategoryUpdateOne {
	acuo.mutation.ClearAppAppCategory()
	return acuo
}

// RemoveAppAppCategoryIDs removes the "app_app_category" edge to AppAppCategory entities by IDs.
func (acuo *AppCategoryUpdateOne) RemoveAppAppCategoryIDs(ids ...int) *AppCategoryUpdateOne {
	acuo.mutation.RemoveAppAppCategoryIDs(ids...)
	return acuo
}

// RemoveAppAppCategory removes "app_app_category" edges to AppAppCategory entities.
func (acuo *AppCategoryUpdateOne) RemoveAppAppCategory(a ...*AppAppCategory) *AppCategoryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.RemoveAppAppCategoryIDs(ids...)
}

// Where appends a list predicates to the AppCategoryUpdate builder.
func (acuo *AppCategoryUpdateOne) Where(ps ...predicate.AppCategory) *AppCategoryUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AppCategoryUpdateOne) Select(field string, fields ...string) *AppCategoryUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AppCategory entity.
func (acuo *AppCategoryUpdateOne) Save(ctx context.Context) (*AppCategory, error) {
	acuo.defaults()
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AppCategoryUpdateOne) SaveX(ctx context.Context) *AppCategory {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AppCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AppCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AppCategoryUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := appcategory.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

func (acuo *AppCategoryUpdateOne) sqlSave(ctx context.Context) (_node *AppCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(appcategory.Table, appcategory.Columns, sqlgraph.NewFieldSpec(appcategory.FieldID, field.TypeInt64))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appcategory.FieldID)
		for _, f := range fields {
			if !appcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.UserID(); ok {
		_spec.SetField(appcategory.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := acuo.mutation.AddedUserID(); ok {
		_spec.AddField(appcategory.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := acuo.mutation.VersionNumber(); ok {
		_spec.SetField(appcategory.FieldVersionNumber, field.TypeUint64, value)
	}
	if value, ok := acuo.mutation.AddedVersionNumber(); ok {
		_spec.AddField(appcategory.FieldVersionNumber, field.TypeUint64, value)
	}
	if value, ok := acuo.mutation.VersionDate(); ok {
		_spec.SetField(appcategory.FieldVersionDate, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.Name(); ok {
		_spec.SetField(appcategory.FieldName, field.TypeString, value)
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.CreatedAt(); ok {
		_spec.SetField(appcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if acuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appcategory.AppTable,
			Columns: appcategory.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedAppIDs(); len(nodes) > 0 && !acuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appcategory.AppTable,
			Columns: appcategory.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   appcategory.AppTable,
			Columns: appcategory.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.AppAppCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appcategory.AppAppCategoryTable,
			Columns: []string{appcategory.AppAppCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appappcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedAppAppCategoryIDs(); len(nodes) > 0 && !acuo.mutation.AppAppCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appcategory.AppAppCategoryTable,
			Columns: []string{appcategory.AppAppCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appappcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.AppAppCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appcategory.AppAppCategoryTable,
			Columns: []string{appcategory.AppAppCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appappcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppCategory{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
