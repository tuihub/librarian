// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflow"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflowsource"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifysource"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// NotifyFlowSourceUpdate is the builder for updating NotifyFlowSource entities.
type NotifyFlowSourceUpdate struct {
	config
	hooks    []Hook
	mutation *NotifyFlowSourceMutation
}

// Where appends a list predicates to the NotifyFlowSourceUpdate builder.
func (nfsu *NotifyFlowSourceUpdate) Where(ps ...predicate.NotifyFlowSource) *NotifyFlowSourceUpdate {
	nfsu.mutation.Where(ps...)
	return nfsu
}

// SetNotifyFlowID sets the "notify_flow_id" field.
func (nfsu *NotifyFlowSourceUpdate) SetNotifyFlowID(mi model.InternalID) *NotifyFlowSourceUpdate {
	nfsu.mutation.SetNotifyFlowID(mi)
	return nfsu
}

// SetNillableNotifyFlowID sets the "notify_flow_id" field if the given value is not nil.
func (nfsu *NotifyFlowSourceUpdate) SetNillableNotifyFlowID(mi *model.InternalID) *NotifyFlowSourceUpdate {
	if mi != nil {
		nfsu.SetNotifyFlowID(*mi)
	}
	return nfsu
}

// SetNotifySourceID sets the "notify_source_id" field.
func (nfsu *NotifyFlowSourceUpdate) SetNotifySourceID(mi model.InternalID) *NotifyFlowSourceUpdate {
	nfsu.mutation.SetNotifySourceID(mi)
	return nfsu
}

// SetNillableNotifySourceID sets the "notify_source_id" field if the given value is not nil.
func (nfsu *NotifyFlowSourceUpdate) SetNillableNotifySourceID(mi *model.InternalID) *NotifyFlowSourceUpdate {
	if mi != nil {
		nfsu.SetNotifySourceID(*mi)
	}
	return nfsu
}

// SetFilterIncludeKeywords sets the "filter_include_keywords" field.
func (nfsu *NotifyFlowSourceUpdate) SetFilterIncludeKeywords(s []string) *NotifyFlowSourceUpdate {
	nfsu.mutation.SetFilterIncludeKeywords(s)
	return nfsu
}

// AppendFilterIncludeKeywords appends s to the "filter_include_keywords" field.
func (nfsu *NotifyFlowSourceUpdate) AppendFilterIncludeKeywords(s []string) *NotifyFlowSourceUpdate {
	nfsu.mutation.AppendFilterIncludeKeywords(s)
	return nfsu
}

// SetFilterExcludeKeywords sets the "filter_exclude_keywords" field.
func (nfsu *NotifyFlowSourceUpdate) SetFilterExcludeKeywords(s []string) *NotifyFlowSourceUpdate {
	nfsu.mutation.SetFilterExcludeKeywords(s)
	return nfsu
}

// AppendFilterExcludeKeywords appends s to the "filter_exclude_keywords" field.
func (nfsu *NotifyFlowSourceUpdate) AppendFilterExcludeKeywords(s []string) *NotifyFlowSourceUpdate {
	nfsu.mutation.AppendFilterExcludeKeywords(s)
	return nfsu
}

// SetUpdatedAt sets the "updated_at" field.
func (nfsu *NotifyFlowSourceUpdate) SetUpdatedAt(t time.Time) *NotifyFlowSourceUpdate {
	nfsu.mutation.SetUpdatedAt(t)
	return nfsu
}

// SetCreatedAt sets the "created_at" field.
func (nfsu *NotifyFlowSourceUpdate) SetCreatedAt(t time.Time) *NotifyFlowSourceUpdate {
	nfsu.mutation.SetCreatedAt(t)
	return nfsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nfsu *NotifyFlowSourceUpdate) SetNillableCreatedAt(t *time.Time) *NotifyFlowSourceUpdate {
	if t != nil {
		nfsu.SetCreatedAt(*t)
	}
	return nfsu
}

// SetNotifyFlow sets the "notify_flow" edge to the NotifyFlow entity.
func (nfsu *NotifyFlowSourceUpdate) SetNotifyFlow(n *NotifyFlow) *NotifyFlowSourceUpdate {
	return nfsu.SetNotifyFlowID(n.ID)
}

// SetNotifySource sets the "notify_source" edge to the NotifySource entity.
func (nfsu *NotifyFlowSourceUpdate) SetNotifySource(n *NotifySource) *NotifyFlowSourceUpdate {
	return nfsu.SetNotifySourceID(n.ID)
}

// Mutation returns the NotifyFlowSourceMutation object of the builder.
func (nfsu *NotifyFlowSourceUpdate) Mutation() *NotifyFlowSourceMutation {
	return nfsu.mutation
}

// ClearNotifyFlow clears the "notify_flow" edge to the NotifyFlow entity.
func (nfsu *NotifyFlowSourceUpdate) ClearNotifyFlow() *NotifyFlowSourceUpdate {
	nfsu.mutation.ClearNotifyFlow()
	return nfsu
}

// ClearNotifySource clears the "notify_source" edge to the NotifySource entity.
func (nfsu *NotifyFlowSourceUpdate) ClearNotifySource() *NotifyFlowSourceUpdate {
	nfsu.mutation.ClearNotifySource()
	return nfsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nfsu *NotifyFlowSourceUpdate) Save(ctx context.Context) (int, error) {
	nfsu.defaults()
	return withHooks(ctx, nfsu.sqlSave, nfsu.mutation, nfsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nfsu *NotifyFlowSourceUpdate) SaveX(ctx context.Context) int {
	affected, err := nfsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nfsu *NotifyFlowSourceUpdate) Exec(ctx context.Context) error {
	_, err := nfsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nfsu *NotifyFlowSourceUpdate) ExecX(ctx context.Context) {
	if err := nfsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nfsu *NotifyFlowSourceUpdate) defaults() {
	if _, ok := nfsu.mutation.UpdatedAt(); !ok {
		v := notifyflowsource.UpdateDefaultUpdatedAt()
		nfsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nfsu *NotifyFlowSourceUpdate) check() error {
	if nfsu.mutation.NotifyFlowCleared() && len(nfsu.mutation.NotifyFlowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NotifyFlowSource.notify_flow"`)
	}
	if nfsu.mutation.NotifySourceCleared() && len(nfsu.mutation.NotifySourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NotifyFlowSource.notify_source"`)
	}
	return nil
}

func (nfsu *NotifyFlowSourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nfsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notifyflowsource.Table, notifyflowsource.Columns, sqlgraph.NewFieldSpec(notifyflowsource.FieldID, field.TypeInt))
	if ps := nfsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nfsu.mutation.FilterIncludeKeywords(); ok {
		_spec.SetField(notifyflowsource.FieldFilterIncludeKeywords, field.TypeJSON, value)
	}
	if value, ok := nfsu.mutation.AppendedFilterIncludeKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notifyflowsource.FieldFilterIncludeKeywords, value)
		})
	}
	if value, ok := nfsu.mutation.FilterExcludeKeywords(); ok {
		_spec.SetField(notifyflowsource.FieldFilterExcludeKeywords, field.TypeJSON, value)
	}
	if value, ok := nfsu.mutation.AppendedFilterExcludeKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notifyflowsource.FieldFilterExcludeKeywords, value)
		})
	}
	if value, ok := nfsu.mutation.UpdatedAt(); ok {
		_spec.SetField(notifyflowsource.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nfsu.mutation.CreatedAt(); ok {
		_spec.SetField(notifyflowsource.FieldCreatedAt, field.TypeTime, value)
	}
	if nfsu.mutation.NotifyFlowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notifyflowsource.NotifyFlowTable,
			Columns: []string{notifyflowsource.NotifyFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfsu.mutation.NotifyFlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notifyflowsource.NotifyFlowTable,
			Columns: []string{notifyflowsource.NotifyFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nfsu.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notifyflowsource.NotifySourceTable,
			Columns: []string{notifyflowsource.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfsu.mutation.NotifySourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notifyflowsource.NotifySourceTable,
			Columns: []string{notifyflowsource.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nfsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifyflowsource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nfsu.mutation.done = true
	return n, nil
}

// NotifyFlowSourceUpdateOne is the builder for updating a single NotifyFlowSource entity.
type NotifyFlowSourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotifyFlowSourceMutation
}

// SetNotifyFlowID sets the "notify_flow_id" field.
func (nfsuo *NotifyFlowSourceUpdateOne) SetNotifyFlowID(mi model.InternalID) *NotifyFlowSourceUpdateOne {
	nfsuo.mutation.SetNotifyFlowID(mi)
	return nfsuo
}

// SetNillableNotifyFlowID sets the "notify_flow_id" field if the given value is not nil.
func (nfsuo *NotifyFlowSourceUpdateOne) SetNillableNotifyFlowID(mi *model.InternalID) *NotifyFlowSourceUpdateOne {
	if mi != nil {
		nfsuo.SetNotifyFlowID(*mi)
	}
	return nfsuo
}

// SetNotifySourceID sets the "notify_source_id" field.
func (nfsuo *NotifyFlowSourceUpdateOne) SetNotifySourceID(mi model.InternalID) *NotifyFlowSourceUpdateOne {
	nfsuo.mutation.SetNotifySourceID(mi)
	return nfsuo
}

// SetNillableNotifySourceID sets the "notify_source_id" field if the given value is not nil.
func (nfsuo *NotifyFlowSourceUpdateOne) SetNillableNotifySourceID(mi *model.InternalID) *NotifyFlowSourceUpdateOne {
	if mi != nil {
		nfsuo.SetNotifySourceID(*mi)
	}
	return nfsuo
}

// SetFilterIncludeKeywords sets the "filter_include_keywords" field.
func (nfsuo *NotifyFlowSourceUpdateOne) SetFilterIncludeKeywords(s []string) *NotifyFlowSourceUpdateOne {
	nfsuo.mutation.SetFilterIncludeKeywords(s)
	return nfsuo
}

// AppendFilterIncludeKeywords appends s to the "filter_include_keywords" field.
func (nfsuo *NotifyFlowSourceUpdateOne) AppendFilterIncludeKeywords(s []string) *NotifyFlowSourceUpdateOne {
	nfsuo.mutation.AppendFilterIncludeKeywords(s)
	return nfsuo
}

// SetFilterExcludeKeywords sets the "filter_exclude_keywords" field.
func (nfsuo *NotifyFlowSourceUpdateOne) SetFilterExcludeKeywords(s []string) *NotifyFlowSourceUpdateOne {
	nfsuo.mutation.SetFilterExcludeKeywords(s)
	return nfsuo
}

// AppendFilterExcludeKeywords appends s to the "filter_exclude_keywords" field.
func (nfsuo *NotifyFlowSourceUpdateOne) AppendFilterExcludeKeywords(s []string) *NotifyFlowSourceUpdateOne {
	nfsuo.mutation.AppendFilterExcludeKeywords(s)
	return nfsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nfsuo *NotifyFlowSourceUpdateOne) SetUpdatedAt(t time.Time) *NotifyFlowSourceUpdateOne {
	nfsuo.mutation.SetUpdatedAt(t)
	return nfsuo
}

// SetCreatedAt sets the "created_at" field.
func (nfsuo *NotifyFlowSourceUpdateOne) SetCreatedAt(t time.Time) *NotifyFlowSourceUpdateOne {
	nfsuo.mutation.SetCreatedAt(t)
	return nfsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nfsuo *NotifyFlowSourceUpdateOne) SetNillableCreatedAt(t *time.Time) *NotifyFlowSourceUpdateOne {
	if t != nil {
		nfsuo.SetCreatedAt(*t)
	}
	return nfsuo
}

// SetNotifyFlow sets the "notify_flow" edge to the NotifyFlow entity.
func (nfsuo *NotifyFlowSourceUpdateOne) SetNotifyFlow(n *NotifyFlow) *NotifyFlowSourceUpdateOne {
	return nfsuo.SetNotifyFlowID(n.ID)
}

// SetNotifySource sets the "notify_source" edge to the NotifySource entity.
func (nfsuo *NotifyFlowSourceUpdateOne) SetNotifySource(n *NotifySource) *NotifyFlowSourceUpdateOne {
	return nfsuo.SetNotifySourceID(n.ID)
}

// Mutation returns the NotifyFlowSourceMutation object of the builder.
func (nfsuo *NotifyFlowSourceUpdateOne) Mutation() *NotifyFlowSourceMutation {
	return nfsuo.mutation
}

// ClearNotifyFlow clears the "notify_flow" edge to the NotifyFlow entity.
func (nfsuo *NotifyFlowSourceUpdateOne) ClearNotifyFlow() *NotifyFlowSourceUpdateOne {
	nfsuo.mutation.ClearNotifyFlow()
	return nfsuo
}

// ClearNotifySource clears the "notify_source" edge to the NotifySource entity.
func (nfsuo *NotifyFlowSourceUpdateOne) ClearNotifySource() *NotifyFlowSourceUpdateOne {
	nfsuo.mutation.ClearNotifySource()
	return nfsuo
}

// Where appends a list predicates to the NotifyFlowSourceUpdate builder.
func (nfsuo *NotifyFlowSourceUpdateOne) Where(ps ...predicate.NotifyFlowSource) *NotifyFlowSourceUpdateOne {
	nfsuo.mutation.Where(ps...)
	return nfsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nfsuo *NotifyFlowSourceUpdateOne) Select(field string, fields ...string) *NotifyFlowSourceUpdateOne {
	nfsuo.fields = append([]string{field}, fields...)
	return nfsuo
}

// Save executes the query and returns the updated NotifyFlowSource entity.
func (nfsuo *NotifyFlowSourceUpdateOne) Save(ctx context.Context) (*NotifyFlowSource, error) {
	nfsuo.defaults()
	return withHooks(ctx, nfsuo.sqlSave, nfsuo.mutation, nfsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nfsuo *NotifyFlowSourceUpdateOne) SaveX(ctx context.Context) *NotifyFlowSource {
	node, err := nfsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nfsuo *NotifyFlowSourceUpdateOne) Exec(ctx context.Context) error {
	_, err := nfsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nfsuo *NotifyFlowSourceUpdateOne) ExecX(ctx context.Context) {
	if err := nfsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nfsuo *NotifyFlowSourceUpdateOne) defaults() {
	if _, ok := nfsuo.mutation.UpdatedAt(); !ok {
		v := notifyflowsource.UpdateDefaultUpdatedAt()
		nfsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nfsuo *NotifyFlowSourceUpdateOne) check() error {
	if nfsuo.mutation.NotifyFlowCleared() && len(nfsuo.mutation.NotifyFlowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NotifyFlowSource.notify_flow"`)
	}
	if nfsuo.mutation.NotifySourceCleared() && len(nfsuo.mutation.NotifySourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NotifyFlowSource.notify_source"`)
	}
	return nil
}

func (nfsuo *NotifyFlowSourceUpdateOne) sqlSave(ctx context.Context) (_node *NotifyFlowSource, err error) {
	if err := nfsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notifyflowsource.Table, notifyflowsource.Columns, sqlgraph.NewFieldSpec(notifyflowsource.FieldID, field.TypeInt))
	id, ok := nfsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotifyFlowSource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nfsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notifyflowsource.FieldID)
		for _, f := range fields {
			if !notifyflowsource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notifyflowsource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nfsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nfsuo.mutation.FilterIncludeKeywords(); ok {
		_spec.SetField(notifyflowsource.FieldFilterIncludeKeywords, field.TypeJSON, value)
	}
	if value, ok := nfsuo.mutation.AppendedFilterIncludeKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notifyflowsource.FieldFilterIncludeKeywords, value)
		})
	}
	if value, ok := nfsuo.mutation.FilterExcludeKeywords(); ok {
		_spec.SetField(notifyflowsource.FieldFilterExcludeKeywords, field.TypeJSON, value)
	}
	if value, ok := nfsuo.mutation.AppendedFilterExcludeKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notifyflowsource.FieldFilterExcludeKeywords, value)
		})
	}
	if value, ok := nfsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notifyflowsource.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nfsuo.mutation.CreatedAt(); ok {
		_spec.SetField(notifyflowsource.FieldCreatedAt, field.TypeTime, value)
	}
	if nfsuo.mutation.NotifyFlowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notifyflowsource.NotifyFlowTable,
			Columns: []string{notifyflowsource.NotifyFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfsuo.mutation.NotifyFlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notifyflowsource.NotifyFlowTable,
			Columns: []string{notifyflowsource.NotifyFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nfsuo.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notifyflowsource.NotifySourceTable,
			Columns: []string{notifyflowsource.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfsuo.mutation.NotifySourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notifyflowsource.NotifySourceTable,
			Columns: []string{notifyflowsource.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotifyFlowSource{config: nfsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nfsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifyflowsource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nfsuo.mutation.done = true
	return _node, nil
}
