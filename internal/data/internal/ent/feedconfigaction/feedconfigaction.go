// Code generated by ent, DO NOT EDIT.

package feedconfigaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the feedconfigaction type in the database.
	Label = "feed_config_action"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFeedConfigID holds the string denoting the feed_config_id field in the database.
	FieldFeedConfigID = "feed_config_id"
	// FieldFeedActionSetID holds the string denoting the feed_action_set_id field in the database.
	FieldFeedActionSetID = "feed_action_set_id"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeFeedConfig holds the string denoting the feed_config edge name in mutations.
	EdgeFeedConfig = "feed_config"
	// EdgeFeedActionSet holds the string denoting the feed_action_set edge name in mutations.
	EdgeFeedActionSet = "feed_action_set"
	// Table holds the table name of the feedconfigaction in the database.
	Table = "feed_config_actions"
	// FeedConfigTable is the table that holds the feed_config relation/edge.
	FeedConfigTable = "feed_config_actions"
	// FeedConfigInverseTable is the table name for the FeedConfig entity.
	// It exists in this package in order to avoid circular dependency with the "feedconfig" package.
	FeedConfigInverseTable = "feed_configs"
	// FeedConfigColumn is the table column denoting the feed_config relation/edge.
	FeedConfigColumn = "feed_config_id"
	// FeedActionSetTable is the table that holds the feed_action_set relation/edge.
	FeedActionSetTable = "feed_config_actions"
	// FeedActionSetInverseTable is the table name for the FeedActionSet entity.
	// It exists in this package in order to avoid circular dependency with the "feedactionset" package.
	FeedActionSetInverseTable = "feed_action_sets"
	// FeedActionSetColumn is the table column denoting the feed_action_set relation/edge.
	FeedActionSetColumn = "feed_action_set_id"
)

// Columns holds all SQL columns for feedconfigaction fields.
var Columns = []string{
	FieldID,
	FieldFeedConfigID,
	FieldFeedActionSetID,
	FieldIndex,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the FeedConfigAction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFeedConfigID orders the results by the feed_config_id field.
func ByFeedConfigID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeedConfigID, opts...).ToFunc()
}

// ByFeedActionSetID orders the results by the feed_action_set_id field.
func ByFeedActionSetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeedActionSetID, opts...).ToFunc()
}

// ByIndex orders the results by the index field.
func ByIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndex, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByFeedConfigField orders the results by feed_config field.
func ByFeedConfigField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedConfigStep(), sql.OrderByField(field, opts...))
	}
}

// ByFeedActionSetField orders the results by feed_action_set field.
func ByFeedActionSetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedActionSetStep(), sql.OrderByField(field, opts...))
	}
}
func newFeedConfigStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedConfigInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FeedConfigTable, FeedConfigColumn),
	)
}
func newFeedActionSetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedActionSetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FeedActionSetTable, FeedActionSetColumn),
	)
}
