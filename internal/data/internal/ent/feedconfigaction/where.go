// Code generated by ent, DO NOT EDIT.

package feedconfigaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldLTE(FieldID, id))
}

// FeedConfigID applies equality check predicate on the "feed_config_id" field. It's identical to FeedConfigIDEQ.
func FeedConfigID(v model.InternalID) predicate.FeedConfigAction {
	vc := int64(v)
	return predicate.FeedConfigAction(sql.FieldEQ(FieldFeedConfigID, vc))
}

// FeedActionSetID applies equality check predicate on the "feed_action_set_id" field. It's identical to FeedActionSetIDEQ.
func FeedActionSetID(v model.InternalID) predicate.FeedConfigAction {
	vc := int64(v)
	return predicate.FeedConfigAction(sql.FieldEQ(FieldFeedActionSetID, vc))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int64) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldEQ(FieldIndex, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldEQ(FieldCreatedAt, v))
}

// FeedConfigIDEQ applies the EQ predicate on the "feed_config_id" field.
func FeedConfigIDEQ(v model.InternalID) predicate.FeedConfigAction {
	vc := int64(v)
	return predicate.FeedConfigAction(sql.FieldEQ(FieldFeedConfigID, vc))
}

// FeedConfigIDNEQ applies the NEQ predicate on the "feed_config_id" field.
func FeedConfigIDNEQ(v model.InternalID) predicate.FeedConfigAction {
	vc := int64(v)
	return predicate.FeedConfigAction(sql.FieldNEQ(FieldFeedConfigID, vc))
}

// FeedConfigIDIn applies the In predicate on the "feed_config_id" field.
func FeedConfigIDIn(vs ...model.InternalID) predicate.FeedConfigAction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.FeedConfigAction(sql.FieldIn(FieldFeedConfigID, v...))
}

// FeedConfigIDNotIn applies the NotIn predicate on the "feed_config_id" field.
func FeedConfigIDNotIn(vs ...model.InternalID) predicate.FeedConfigAction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.FeedConfigAction(sql.FieldNotIn(FieldFeedConfigID, v...))
}

// FeedActionSetIDEQ applies the EQ predicate on the "feed_action_set_id" field.
func FeedActionSetIDEQ(v model.InternalID) predicate.FeedConfigAction {
	vc := int64(v)
	return predicate.FeedConfigAction(sql.FieldEQ(FieldFeedActionSetID, vc))
}

// FeedActionSetIDNEQ applies the NEQ predicate on the "feed_action_set_id" field.
func FeedActionSetIDNEQ(v model.InternalID) predicate.FeedConfigAction {
	vc := int64(v)
	return predicate.FeedConfigAction(sql.FieldNEQ(FieldFeedActionSetID, vc))
}

// FeedActionSetIDIn applies the In predicate on the "feed_action_set_id" field.
func FeedActionSetIDIn(vs ...model.InternalID) predicate.FeedConfigAction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.FeedConfigAction(sql.FieldIn(FieldFeedActionSetID, v...))
}

// FeedActionSetIDNotIn applies the NotIn predicate on the "feed_action_set_id" field.
func FeedActionSetIDNotIn(vs ...model.InternalID) predicate.FeedConfigAction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.FeedConfigAction(sql.FieldNotIn(FieldFeedActionSetID, v...))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int64) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int64) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int64) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int64) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int64) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int64) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int64) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int64) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldLTE(FieldIndex, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.FieldLTE(FieldCreatedAt, v))
}

// HasFeedConfig applies the HasEdge predicate on the "feed_config" edge.
func HasFeedConfig() predicate.FeedConfigAction {
	return predicate.FeedConfigAction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FeedConfigTable, FeedConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeedConfigWith applies the HasEdge predicate on the "feed_config" edge with a given conditions (other predicates).
func HasFeedConfigWith(preds ...predicate.FeedConfig) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(func(s *sql.Selector) {
		step := newFeedConfigStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeedActionSet applies the HasEdge predicate on the "feed_action_set" edge.
func HasFeedActionSet() predicate.FeedConfigAction {
	return predicate.FeedConfigAction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FeedActionSetTable, FeedActionSetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeedActionSetWith applies the HasEdge predicate on the "feed_action_set" edge with a given conditions (other predicates).
func HasFeedActionSetWith(preds ...predicate.FeedActionSet) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(func(s *sql.Selector) {
		step := newFeedActionSetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FeedConfigAction) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FeedConfigAction) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FeedConfigAction) predicate.FeedConfigAction {
	return predicate.FeedConfigAction(sql.NotPredicates(p))
}
