// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/appbinary"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinfo"
	"github.com/tuihub/librarian/internal/model"
)

// AppBinary is the model entity for the AppBinary schema.
type AppBinary struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// SizeBytes holds the value of the "size_bytes" field.
	SizeBytes int64 `json:"size_bytes,omitempty"`
	// PublicURL holds the value of the "public_url" field.
	PublicURL string `json:"public_url,omitempty"`
	// Sha256 holds the value of the "sha256" field.
	Sha256 []byte `json:"sha256,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppBinaryQuery when eager-loading is set.
	Edges               AppBinaryEdges `json:"edges"`
	app_info_app_binary *model.InternalID
	selectValues        sql.SelectValues
}

// AppBinaryEdges holds the relations/edges for other nodes in the graph.
type AppBinaryEdges struct {
	// AppInfo holds the value of the app_info edge.
	AppInfo *AppInfo `json:"app_info,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppInfoOrErr returns the AppInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppBinaryEdges) AppInfoOrErr() (*AppInfo, error) {
	if e.AppInfo != nil {
		return e.AppInfo, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: appinfo.Label}
	}
	return nil, &NotLoadedError{edge: "app_info"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppBinary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appbinary.FieldSha256:
			values[i] = new([]byte)
		case appbinary.FieldID, appbinary.FieldSizeBytes:
			values[i] = new(sql.NullInt64)
		case appbinary.FieldName, appbinary.FieldPublicURL:
			values[i] = new(sql.NullString)
		case appbinary.FieldUpdatedAt, appbinary.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case appbinary.ForeignKeys[0]: // app_info_app_binary
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppBinary fields.
func (ab *AppBinary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appbinary.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ab.ID = model.InternalID(value.Int64)
			}
		case appbinary.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ab.Name = value.String
			}
		case appbinary.FieldSizeBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_bytes", values[i])
			} else if value.Valid {
				ab.SizeBytes = value.Int64
			}
		case appbinary.FieldPublicURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_url", values[i])
			} else if value.Valid {
				ab.PublicURL = value.String
			}
		case appbinary.FieldSha256:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sha256", values[i])
			} else if value != nil {
				ab.Sha256 = *value
			}
		case appbinary.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ab.UpdatedAt = value.Time
			}
		case appbinary.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ab.CreatedAt = value.Time
			}
		case appbinary.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_info_app_binary", values[i])
			} else if value.Valid {
				ab.app_info_app_binary = new(model.InternalID)
				*ab.app_info_app_binary = model.InternalID(value.Int64)
			}
		default:
			ab.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppBinary.
// This includes values selected through modifiers, order, etc.
func (ab *AppBinary) Value(name string) (ent.Value, error) {
	return ab.selectValues.Get(name)
}

// QueryAppInfo queries the "app_info" edge of the AppBinary entity.
func (ab *AppBinary) QueryAppInfo() *AppInfoQuery {
	return NewAppBinaryClient(ab.config).QueryAppInfo(ab)
}

// Update returns a builder for updating this AppBinary.
// Note that you need to call AppBinary.Unwrap() before calling this method if this AppBinary
// was returned from a transaction, and the transaction was committed or rolled back.
func (ab *AppBinary) Update() *AppBinaryUpdateOne {
	return NewAppBinaryClient(ab.config).UpdateOne(ab)
}

// Unwrap unwraps the AppBinary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ab *AppBinary) Unwrap() *AppBinary {
	_tx, ok := ab.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppBinary is not a transactional entity")
	}
	ab.config.driver = _tx.drv
	return ab
}

// String implements the fmt.Stringer.
func (ab *AppBinary) String() string {
	var builder strings.Builder
	builder.WriteString("AppBinary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ab.ID))
	builder.WriteString("name=")
	builder.WriteString(ab.Name)
	builder.WriteString(", ")
	builder.WriteString("size_bytes=")
	builder.WriteString(fmt.Sprintf("%v", ab.SizeBytes))
	builder.WriteString(", ")
	builder.WriteString("public_url=")
	builder.WriteString(ab.PublicURL)
	builder.WriteString(", ")
	builder.WriteString("sha256=")
	builder.WriteString(fmt.Sprintf("%v", ab.Sha256))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ab.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ab.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppBinaries is a parsable slice of AppBinary.
type AppBinaries []*AppBinary
