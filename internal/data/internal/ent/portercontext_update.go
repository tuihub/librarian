// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/portercontext"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// PorterContextUpdate is the builder for updating PorterContext entities.
type PorterContextUpdate struct {
	config
	hooks    []Hook
	mutation *PorterContextMutation
}

// Where appends a list predicates to the PorterContextUpdate builder.
func (pcu *PorterContextUpdate) Where(ps ...predicate.PorterContext) *PorterContextUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetGlobalName sets the "global_name" field.
func (pcu *PorterContextUpdate) SetGlobalName(s string) *PorterContextUpdate {
	pcu.mutation.SetGlobalName(s)
	return pcu
}

// SetNillableGlobalName sets the "global_name" field if the given value is not nil.
func (pcu *PorterContextUpdate) SetNillableGlobalName(s *string) *PorterContextUpdate {
	if s != nil {
		pcu.SetGlobalName(*s)
	}
	return pcu
}

// SetRegion sets the "region" field.
func (pcu *PorterContextUpdate) SetRegion(s string) *PorterContextUpdate {
	pcu.mutation.SetRegion(s)
	return pcu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (pcu *PorterContextUpdate) SetNillableRegion(s *string) *PorterContextUpdate {
	if s != nil {
		pcu.SetRegion(*s)
	}
	return pcu
}

// SetContextJSON sets the "context_json" field.
func (pcu *PorterContextUpdate) SetContextJSON(s string) *PorterContextUpdate {
	pcu.mutation.SetContextJSON(s)
	return pcu
}

// SetNillableContextJSON sets the "context_json" field if the given value is not nil.
func (pcu *PorterContextUpdate) SetNillableContextJSON(s *string) *PorterContextUpdate {
	if s != nil {
		pcu.SetContextJSON(*s)
	}
	return pcu
}

// SetName sets the "name" field.
func (pcu *PorterContextUpdate) SetName(s string) *PorterContextUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcu *PorterContextUpdate) SetNillableName(s *string) *PorterContextUpdate {
	if s != nil {
		pcu.SetName(*s)
	}
	return pcu
}

// SetDescription sets the "description" field.
func (pcu *PorterContextUpdate) SetDescription(s string) *PorterContextUpdate {
	pcu.mutation.SetDescription(s)
	return pcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcu *PorterContextUpdate) SetNillableDescription(s *string) *PorterContextUpdate {
	if s != nil {
		pcu.SetDescription(*s)
	}
	return pcu
}

// SetStatus sets the "status" field.
func (pcu *PorterContextUpdate) SetStatus(po portercontext.Status) *PorterContextUpdate {
	pcu.mutation.SetStatus(po)
	return pcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcu *PorterContextUpdate) SetNillableStatus(po *portercontext.Status) *PorterContextUpdate {
	if po != nil {
		pcu.SetStatus(*po)
	}
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PorterContextUpdate) SetUpdatedAt(t time.Time) *PorterContextUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetCreatedAt sets the "created_at" field.
func (pcu *PorterContextUpdate) SetCreatedAt(t time.Time) *PorterContextUpdate {
	pcu.mutation.SetCreatedAt(t)
	return pcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcu *PorterContextUpdate) SetNillableCreatedAt(t *time.Time) *PorterContextUpdate {
	if t != nil {
		pcu.SetCreatedAt(*t)
	}
	return pcu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pcu *PorterContextUpdate) SetOwnerID(id model.InternalID) *PorterContextUpdate {
	pcu.mutation.SetOwnerID(id)
	return pcu
}

// SetOwner sets the "owner" edge to the User entity.
func (pcu *PorterContextUpdate) SetOwner(u *User) *PorterContextUpdate {
	return pcu.SetOwnerID(u.ID)
}

// Mutation returns the PorterContextMutation object of the builder.
func (pcu *PorterContextUpdate) Mutation() *PorterContextMutation {
	return pcu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (pcu *PorterContextUpdate) ClearOwner() *PorterContextUpdate {
	pcu.mutation.ClearOwner()
	return pcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PorterContextUpdate) Save(ctx context.Context) (int, error) {
	pcu.defaults()
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PorterContextUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PorterContextUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PorterContextUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PorterContextUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		v := portercontext.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *PorterContextUpdate) check() error {
	if v, ok := pcu.mutation.Status(); ok {
		if err := portercontext.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PorterContext.status": %w`, err)}
		}
	}
	if pcu.mutation.OwnerCleared() && len(pcu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PorterContext.owner"`)
	}
	return nil
}

func (pcu *PorterContextUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(portercontext.Table, portercontext.Columns, sqlgraph.NewFieldSpec(portercontext.FieldID, field.TypeInt64))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.GlobalName(); ok {
		_spec.SetField(portercontext.FieldGlobalName, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Region(); ok {
		_spec.SetField(portercontext.FieldRegion, field.TypeString, value)
	}
	if value, ok := pcu.mutation.ContextJSON(); ok {
		_spec.SetField(portercontext.FieldContextJSON, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.SetField(portercontext.FieldName, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Description(); ok {
		_spec.SetField(portercontext.FieldDescription, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Status(); ok {
		_spec.SetField(portercontext.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(portercontext.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.CreatedAt(); ok {
		_spec.SetField(portercontext.FieldCreatedAt, field.TypeTime, value)
	}
	if pcu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portercontext.OwnerTable,
			Columns: []string{portercontext.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portercontext.OwnerTable,
			Columns: []string{portercontext.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portercontext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PorterContextUpdateOne is the builder for updating a single PorterContext entity.
type PorterContextUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PorterContextMutation
}

// SetGlobalName sets the "global_name" field.
func (pcuo *PorterContextUpdateOne) SetGlobalName(s string) *PorterContextUpdateOne {
	pcuo.mutation.SetGlobalName(s)
	return pcuo
}

// SetNillableGlobalName sets the "global_name" field if the given value is not nil.
func (pcuo *PorterContextUpdateOne) SetNillableGlobalName(s *string) *PorterContextUpdateOne {
	if s != nil {
		pcuo.SetGlobalName(*s)
	}
	return pcuo
}

// SetRegion sets the "region" field.
func (pcuo *PorterContextUpdateOne) SetRegion(s string) *PorterContextUpdateOne {
	pcuo.mutation.SetRegion(s)
	return pcuo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (pcuo *PorterContextUpdateOne) SetNillableRegion(s *string) *PorterContextUpdateOne {
	if s != nil {
		pcuo.SetRegion(*s)
	}
	return pcuo
}

// SetContextJSON sets the "context_json" field.
func (pcuo *PorterContextUpdateOne) SetContextJSON(s string) *PorterContextUpdateOne {
	pcuo.mutation.SetContextJSON(s)
	return pcuo
}

// SetNillableContextJSON sets the "context_json" field if the given value is not nil.
func (pcuo *PorterContextUpdateOne) SetNillableContextJSON(s *string) *PorterContextUpdateOne {
	if s != nil {
		pcuo.SetContextJSON(*s)
	}
	return pcuo
}

// SetName sets the "name" field.
func (pcuo *PorterContextUpdateOne) SetName(s string) *PorterContextUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcuo *PorterContextUpdateOne) SetNillableName(s *string) *PorterContextUpdateOne {
	if s != nil {
		pcuo.SetName(*s)
	}
	return pcuo
}

// SetDescription sets the "description" field.
func (pcuo *PorterContextUpdateOne) SetDescription(s string) *PorterContextUpdateOne {
	pcuo.mutation.SetDescription(s)
	return pcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcuo *PorterContextUpdateOne) SetNillableDescription(s *string) *PorterContextUpdateOne {
	if s != nil {
		pcuo.SetDescription(*s)
	}
	return pcuo
}

// SetStatus sets the "status" field.
func (pcuo *PorterContextUpdateOne) SetStatus(po portercontext.Status) *PorterContextUpdateOne {
	pcuo.mutation.SetStatus(po)
	return pcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcuo *PorterContextUpdateOne) SetNillableStatus(po *portercontext.Status) *PorterContextUpdateOne {
	if po != nil {
		pcuo.SetStatus(*po)
	}
	return pcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PorterContextUpdateOne) SetUpdatedAt(t time.Time) *PorterContextUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetCreatedAt sets the "created_at" field.
func (pcuo *PorterContextUpdateOne) SetCreatedAt(t time.Time) *PorterContextUpdateOne {
	pcuo.mutation.SetCreatedAt(t)
	return pcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcuo *PorterContextUpdateOne) SetNillableCreatedAt(t *time.Time) *PorterContextUpdateOne {
	if t != nil {
		pcuo.SetCreatedAt(*t)
	}
	return pcuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pcuo *PorterContextUpdateOne) SetOwnerID(id model.InternalID) *PorterContextUpdateOne {
	pcuo.mutation.SetOwnerID(id)
	return pcuo
}

// SetOwner sets the "owner" edge to the User entity.
func (pcuo *PorterContextUpdateOne) SetOwner(u *User) *PorterContextUpdateOne {
	return pcuo.SetOwnerID(u.ID)
}

// Mutation returns the PorterContextMutation object of the builder.
func (pcuo *PorterContextUpdateOne) Mutation() *PorterContextMutation {
	return pcuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (pcuo *PorterContextUpdateOne) ClearOwner() *PorterContextUpdateOne {
	pcuo.mutation.ClearOwner()
	return pcuo
}

// Where appends a list predicates to the PorterContextUpdate builder.
func (pcuo *PorterContextUpdateOne) Where(ps ...predicate.PorterContext) *PorterContextUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PorterContextUpdateOne) Select(field string, fields ...string) *PorterContextUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PorterContext entity.
func (pcuo *PorterContextUpdateOne) Save(ctx context.Context) (*PorterContext, error) {
	pcuo.defaults()
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PorterContextUpdateOne) SaveX(ctx context.Context) *PorterContext {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PorterContextUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PorterContextUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PorterContextUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		v := portercontext.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *PorterContextUpdateOne) check() error {
	if v, ok := pcuo.mutation.Status(); ok {
		if err := portercontext.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PorterContext.status": %w`, err)}
		}
	}
	if pcuo.mutation.OwnerCleared() && len(pcuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PorterContext.owner"`)
	}
	return nil
}

func (pcuo *PorterContextUpdateOne) sqlSave(ctx context.Context) (_node *PorterContext, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(portercontext.Table, portercontext.Columns, sqlgraph.NewFieldSpec(portercontext.FieldID, field.TypeInt64))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PorterContext.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, portercontext.FieldID)
		for _, f := range fields {
			if !portercontext.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != portercontext.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.GlobalName(); ok {
		_spec.SetField(portercontext.FieldGlobalName, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Region(); ok {
		_spec.SetField(portercontext.FieldRegion, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.ContextJSON(); ok {
		_spec.SetField(portercontext.FieldContextJSON, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.SetField(portercontext.FieldName, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Description(); ok {
		_spec.SetField(portercontext.FieldDescription, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Status(); ok {
		_spec.SetField(portercontext.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(portercontext.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.CreatedAt(); ok {
		_spec.SetField(portercontext.FieldCreatedAt, field.TypeTime, value)
	}
	if pcuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portercontext.OwnerTable,
			Columns: []string{portercontext.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portercontext.OwnerTable,
			Columns: []string{portercontext.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PorterContext{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portercontext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
