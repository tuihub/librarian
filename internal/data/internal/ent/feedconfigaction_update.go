// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedactionset"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfigaction"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// FeedConfigActionUpdate is the builder for updating FeedConfigAction entities.
type FeedConfigActionUpdate struct {
	config
	hooks    []Hook
	mutation *FeedConfigActionMutation
}

// Where appends a list predicates to the FeedConfigActionUpdate builder.
func (fcau *FeedConfigActionUpdate) Where(ps ...predicate.FeedConfigAction) *FeedConfigActionUpdate {
	fcau.mutation.Where(ps...)
	return fcau
}

// SetFeedConfigID sets the "feed_config_id" field.
func (fcau *FeedConfigActionUpdate) SetFeedConfigID(mi model.InternalID) *FeedConfigActionUpdate {
	fcau.mutation.SetFeedConfigID(mi)
	return fcau
}

// SetNillableFeedConfigID sets the "feed_config_id" field if the given value is not nil.
func (fcau *FeedConfigActionUpdate) SetNillableFeedConfigID(mi *model.InternalID) *FeedConfigActionUpdate {
	if mi != nil {
		fcau.SetFeedConfigID(*mi)
	}
	return fcau
}

// SetFeedActionSetID sets the "feed_action_set_id" field.
func (fcau *FeedConfigActionUpdate) SetFeedActionSetID(mi model.InternalID) *FeedConfigActionUpdate {
	fcau.mutation.SetFeedActionSetID(mi)
	return fcau
}

// SetNillableFeedActionSetID sets the "feed_action_set_id" field if the given value is not nil.
func (fcau *FeedConfigActionUpdate) SetNillableFeedActionSetID(mi *model.InternalID) *FeedConfigActionUpdate {
	if mi != nil {
		fcau.SetFeedActionSetID(*mi)
	}
	return fcau
}

// SetIndex sets the "index" field.
func (fcau *FeedConfigActionUpdate) SetIndex(i int64) *FeedConfigActionUpdate {
	fcau.mutation.ResetIndex()
	fcau.mutation.SetIndex(i)
	return fcau
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (fcau *FeedConfigActionUpdate) SetNillableIndex(i *int64) *FeedConfigActionUpdate {
	if i != nil {
		fcau.SetIndex(*i)
	}
	return fcau
}

// AddIndex adds i to the "index" field.
func (fcau *FeedConfigActionUpdate) AddIndex(i int64) *FeedConfigActionUpdate {
	fcau.mutation.AddIndex(i)
	return fcau
}

// SetUpdatedAt sets the "updated_at" field.
func (fcau *FeedConfigActionUpdate) SetUpdatedAt(t time.Time) *FeedConfigActionUpdate {
	fcau.mutation.SetUpdatedAt(t)
	return fcau
}

// SetCreatedAt sets the "created_at" field.
func (fcau *FeedConfigActionUpdate) SetCreatedAt(t time.Time) *FeedConfigActionUpdate {
	fcau.mutation.SetCreatedAt(t)
	return fcau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcau *FeedConfigActionUpdate) SetNillableCreatedAt(t *time.Time) *FeedConfigActionUpdate {
	if t != nil {
		fcau.SetCreatedAt(*t)
	}
	return fcau
}

// SetFeedConfig sets the "feed_config" edge to the FeedConfig entity.
func (fcau *FeedConfigActionUpdate) SetFeedConfig(f *FeedConfig) *FeedConfigActionUpdate {
	return fcau.SetFeedConfigID(f.ID)
}

// SetFeedActionSet sets the "feed_action_set" edge to the FeedActionSet entity.
func (fcau *FeedConfigActionUpdate) SetFeedActionSet(f *FeedActionSet) *FeedConfigActionUpdate {
	return fcau.SetFeedActionSetID(f.ID)
}

// Mutation returns the FeedConfigActionMutation object of the builder.
func (fcau *FeedConfigActionUpdate) Mutation() *FeedConfigActionMutation {
	return fcau.mutation
}

// ClearFeedConfig clears the "feed_config" edge to the FeedConfig entity.
func (fcau *FeedConfigActionUpdate) ClearFeedConfig() *FeedConfigActionUpdate {
	fcau.mutation.ClearFeedConfig()
	return fcau
}

// ClearFeedActionSet clears the "feed_action_set" edge to the FeedActionSet entity.
func (fcau *FeedConfigActionUpdate) ClearFeedActionSet() *FeedConfigActionUpdate {
	fcau.mutation.ClearFeedActionSet()
	return fcau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fcau *FeedConfigActionUpdate) Save(ctx context.Context) (int, error) {
	fcau.defaults()
	return withHooks(ctx, fcau.sqlSave, fcau.mutation, fcau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fcau *FeedConfigActionUpdate) SaveX(ctx context.Context) int {
	affected, err := fcau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fcau *FeedConfigActionUpdate) Exec(ctx context.Context) error {
	_, err := fcau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcau *FeedConfigActionUpdate) ExecX(ctx context.Context) {
	if err := fcau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcau *FeedConfigActionUpdate) defaults() {
	if _, ok := fcau.mutation.UpdatedAt(); !ok {
		v := feedconfigaction.UpdateDefaultUpdatedAt()
		fcau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcau *FeedConfigActionUpdate) check() error {
	if fcau.mutation.FeedConfigCleared() && len(fcau.mutation.FeedConfigIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeedConfigAction.feed_config"`)
	}
	if fcau.mutation.FeedActionSetCleared() && len(fcau.mutation.FeedActionSetIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeedConfigAction.feed_action_set"`)
	}
	return nil
}

func (fcau *FeedConfigActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fcau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedconfigaction.Table, feedconfigaction.Columns, sqlgraph.NewFieldSpec(feedconfigaction.FieldID, field.TypeInt))
	if ps := fcau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcau.mutation.Index(); ok {
		_spec.SetField(feedconfigaction.FieldIndex, field.TypeInt64, value)
	}
	if value, ok := fcau.mutation.AddedIndex(); ok {
		_spec.AddField(feedconfigaction.FieldIndex, field.TypeInt64, value)
	}
	if value, ok := fcau.mutation.UpdatedAt(); ok {
		_spec.SetField(feedconfigaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fcau.mutation.CreatedAt(); ok {
		_spec.SetField(feedconfigaction.FieldCreatedAt, field.TypeTime, value)
	}
	if fcau.mutation.FeedConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedconfigaction.FeedConfigTable,
			Columns: []string{feedconfigaction.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcau.mutation.FeedConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedconfigaction.FeedConfigTable,
			Columns: []string{feedconfigaction.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcau.mutation.FeedActionSetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedconfigaction.FeedActionSetTable,
			Columns: []string{feedconfigaction.FeedActionSetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcau.mutation.FeedActionSetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedconfigaction.FeedActionSetTable,
			Columns: []string{feedconfigaction.FeedActionSetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fcau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedconfigaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fcau.mutation.done = true
	return n, nil
}

// FeedConfigActionUpdateOne is the builder for updating a single FeedConfigAction entity.
type FeedConfigActionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedConfigActionMutation
}

// SetFeedConfigID sets the "feed_config_id" field.
func (fcauo *FeedConfigActionUpdateOne) SetFeedConfigID(mi model.InternalID) *FeedConfigActionUpdateOne {
	fcauo.mutation.SetFeedConfigID(mi)
	return fcauo
}

// SetNillableFeedConfigID sets the "feed_config_id" field if the given value is not nil.
func (fcauo *FeedConfigActionUpdateOne) SetNillableFeedConfigID(mi *model.InternalID) *FeedConfigActionUpdateOne {
	if mi != nil {
		fcauo.SetFeedConfigID(*mi)
	}
	return fcauo
}

// SetFeedActionSetID sets the "feed_action_set_id" field.
func (fcauo *FeedConfigActionUpdateOne) SetFeedActionSetID(mi model.InternalID) *FeedConfigActionUpdateOne {
	fcauo.mutation.SetFeedActionSetID(mi)
	return fcauo
}

// SetNillableFeedActionSetID sets the "feed_action_set_id" field if the given value is not nil.
func (fcauo *FeedConfigActionUpdateOne) SetNillableFeedActionSetID(mi *model.InternalID) *FeedConfigActionUpdateOne {
	if mi != nil {
		fcauo.SetFeedActionSetID(*mi)
	}
	return fcauo
}

// SetIndex sets the "index" field.
func (fcauo *FeedConfigActionUpdateOne) SetIndex(i int64) *FeedConfigActionUpdateOne {
	fcauo.mutation.ResetIndex()
	fcauo.mutation.SetIndex(i)
	return fcauo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (fcauo *FeedConfigActionUpdateOne) SetNillableIndex(i *int64) *FeedConfigActionUpdateOne {
	if i != nil {
		fcauo.SetIndex(*i)
	}
	return fcauo
}

// AddIndex adds i to the "index" field.
func (fcauo *FeedConfigActionUpdateOne) AddIndex(i int64) *FeedConfigActionUpdateOne {
	fcauo.mutation.AddIndex(i)
	return fcauo
}

// SetUpdatedAt sets the "updated_at" field.
func (fcauo *FeedConfigActionUpdateOne) SetUpdatedAt(t time.Time) *FeedConfigActionUpdateOne {
	fcauo.mutation.SetUpdatedAt(t)
	return fcauo
}

// SetCreatedAt sets the "created_at" field.
func (fcauo *FeedConfigActionUpdateOne) SetCreatedAt(t time.Time) *FeedConfigActionUpdateOne {
	fcauo.mutation.SetCreatedAt(t)
	return fcauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcauo *FeedConfigActionUpdateOne) SetNillableCreatedAt(t *time.Time) *FeedConfigActionUpdateOne {
	if t != nil {
		fcauo.SetCreatedAt(*t)
	}
	return fcauo
}

// SetFeedConfig sets the "feed_config" edge to the FeedConfig entity.
func (fcauo *FeedConfigActionUpdateOne) SetFeedConfig(f *FeedConfig) *FeedConfigActionUpdateOne {
	return fcauo.SetFeedConfigID(f.ID)
}

// SetFeedActionSet sets the "feed_action_set" edge to the FeedActionSet entity.
func (fcauo *FeedConfigActionUpdateOne) SetFeedActionSet(f *FeedActionSet) *FeedConfigActionUpdateOne {
	return fcauo.SetFeedActionSetID(f.ID)
}

// Mutation returns the FeedConfigActionMutation object of the builder.
func (fcauo *FeedConfigActionUpdateOne) Mutation() *FeedConfigActionMutation {
	return fcauo.mutation
}

// ClearFeedConfig clears the "feed_config" edge to the FeedConfig entity.
func (fcauo *FeedConfigActionUpdateOne) ClearFeedConfig() *FeedConfigActionUpdateOne {
	fcauo.mutation.ClearFeedConfig()
	return fcauo
}

// ClearFeedActionSet clears the "feed_action_set" edge to the FeedActionSet entity.
func (fcauo *FeedConfigActionUpdateOne) ClearFeedActionSet() *FeedConfigActionUpdateOne {
	fcauo.mutation.ClearFeedActionSet()
	return fcauo
}

// Where appends a list predicates to the FeedConfigActionUpdate builder.
func (fcauo *FeedConfigActionUpdateOne) Where(ps ...predicate.FeedConfigAction) *FeedConfigActionUpdateOne {
	fcauo.mutation.Where(ps...)
	return fcauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fcauo *FeedConfigActionUpdateOne) Select(field string, fields ...string) *FeedConfigActionUpdateOne {
	fcauo.fields = append([]string{field}, fields...)
	return fcauo
}

// Save executes the query and returns the updated FeedConfigAction entity.
func (fcauo *FeedConfigActionUpdateOne) Save(ctx context.Context) (*FeedConfigAction, error) {
	fcauo.defaults()
	return withHooks(ctx, fcauo.sqlSave, fcauo.mutation, fcauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fcauo *FeedConfigActionUpdateOne) SaveX(ctx context.Context) *FeedConfigAction {
	node, err := fcauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fcauo *FeedConfigActionUpdateOne) Exec(ctx context.Context) error {
	_, err := fcauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcauo *FeedConfigActionUpdateOne) ExecX(ctx context.Context) {
	if err := fcauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcauo *FeedConfigActionUpdateOne) defaults() {
	if _, ok := fcauo.mutation.UpdatedAt(); !ok {
		v := feedconfigaction.UpdateDefaultUpdatedAt()
		fcauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcauo *FeedConfigActionUpdateOne) check() error {
	if fcauo.mutation.FeedConfigCleared() && len(fcauo.mutation.FeedConfigIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeedConfigAction.feed_config"`)
	}
	if fcauo.mutation.FeedActionSetCleared() && len(fcauo.mutation.FeedActionSetIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeedConfigAction.feed_action_set"`)
	}
	return nil
}

func (fcauo *FeedConfigActionUpdateOne) sqlSave(ctx context.Context) (_node *FeedConfigAction, err error) {
	if err := fcauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedconfigaction.Table, feedconfigaction.Columns, sqlgraph.NewFieldSpec(feedconfigaction.FieldID, field.TypeInt))
	id, ok := fcauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeedConfigAction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fcauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedconfigaction.FieldID)
		for _, f := range fields {
			if !feedconfigaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feedconfigaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fcauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcauo.mutation.Index(); ok {
		_spec.SetField(feedconfigaction.FieldIndex, field.TypeInt64, value)
	}
	if value, ok := fcauo.mutation.AddedIndex(); ok {
		_spec.AddField(feedconfigaction.FieldIndex, field.TypeInt64, value)
	}
	if value, ok := fcauo.mutation.UpdatedAt(); ok {
		_spec.SetField(feedconfigaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fcauo.mutation.CreatedAt(); ok {
		_spec.SetField(feedconfigaction.FieldCreatedAt, field.TypeTime, value)
	}
	if fcauo.mutation.FeedConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedconfigaction.FeedConfigTable,
			Columns: []string{feedconfigaction.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcauo.mutation.FeedConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedconfigaction.FeedConfigTable,
			Columns: []string{feedconfigaction.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcauo.mutation.FeedActionSetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedconfigaction.FeedActionSetTable,
			Columns: []string{feedconfigaction.FeedActionSetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcauo.mutation.FeedActionSetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedconfigaction.FeedActionSetTable,
			Columns: []string{feedconfigaction.FeedActionSetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FeedConfigAction{config: fcauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fcauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedconfigaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fcauo.mutation.done = true
	return _node, nil
}
