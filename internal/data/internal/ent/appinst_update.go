// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinst"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// AppInstUpdate is the builder for updating AppInst entities.
type AppInstUpdate struct {
	config
	hooks    []Hook
	mutation *AppInstMutation
}

// Where appends a list predicates to the AppInstUpdate builder.
func (aiu *AppInstUpdate) Where(ps ...predicate.AppInst) *AppInstUpdate {
	aiu.mutation.Where(ps...)
	return aiu
}

// SetDeviceID sets the "device_id" field.
func (aiu *AppInstUpdate) SetDeviceID(mi model.InternalID) *AppInstUpdate {
	aiu.mutation.ResetDeviceID()
	aiu.mutation.SetDeviceID(mi)
	return aiu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (aiu *AppInstUpdate) SetNillableDeviceID(mi *model.InternalID) *AppInstUpdate {
	if mi != nil {
		aiu.SetDeviceID(*mi)
	}
	return aiu
}

// AddDeviceID adds mi to the "device_id" field.
func (aiu *AppInstUpdate) AddDeviceID(mi model.InternalID) *AppInstUpdate {
	aiu.mutation.AddDeviceID(mi)
	return aiu
}

// SetAppID sets the "app_id" field.
func (aiu *AppInstUpdate) SetAppID(mi model.InternalID) *AppInstUpdate {
	aiu.mutation.ResetAppID()
	aiu.mutation.SetAppID(mi)
	return aiu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aiu *AppInstUpdate) SetNillableAppID(mi *model.InternalID) *AppInstUpdate {
	if mi != nil {
		aiu.SetAppID(*mi)
	}
	return aiu
}

// AddAppID adds mi to the "app_id" field.
func (aiu *AppInstUpdate) AddAppID(mi model.InternalID) *AppInstUpdate {
	aiu.mutation.AddAppID(mi)
	return aiu
}

// SetUpdatedAt sets the "updated_at" field.
func (aiu *AppInstUpdate) SetUpdatedAt(t time.Time) *AppInstUpdate {
	aiu.mutation.SetUpdatedAt(t)
	return aiu
}

// SetCreatedAt sets the "created_at" field.
func (aiu *AppInstUpdate) SetCreatedAt(t time.Time) *AppInstUpdate {
	aiu.mutation.SetCreatedAt(t)
	return aiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aiu *AppInstUpdate) SetNillableCreatedAt(t *time.Time) *AppInstUpdate {
	if t != nil {
		aiu.SetCreatedAt(*t)
	}
	return aiu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (aiu *AppInstUpdate) SetOwnerID(id model.InternalID) *AppInstUpdate {
	aiu.mutation.SetOwnerID(id)
	return aiu
}

// SetOwner sets the "owner" edge to the User entity.
func (aiu *AppInstUpdate) SetOwner(u *User) *AppInstUpdate {
	return aiu.SetOwnerID(u.ID)
}

// Mutation returns the AppInstMutation object of the builder.
func (aiu *AppInstUpdate) Mutation() *AppInstMutation {
	return aiu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (aiu *AppInstUpdate) ClearOwner() *AppInstUpdate {
	aiu.mutation.ClearOwner()
	return aiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *AppInstUpdate) Save(ctx context.Context) (int, error) {
	aiu.defaults()
	return withHooks(ctx, aiu.sqlSave, aiu.mutation, aiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *AppInstUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *AppInstUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *AppInstUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiu *AppInstUpdate) defaults() {
	if _, ok := aiu.mutation.UpdatedAt(); !ok {
		v := appinst.UpdateDefaultUpdatedAt()
		aiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiu *AppInstUpdate) check() error {
	if aiu.mutation.OwnerCleared() && len(aiu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppInst.owner"`)
	}
	return nil
}

func (aiu *AppInstUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appinst.Table, appinst.Columns, sqlgraph.NewFieldSpec(appinst.FieldID, field.TypeInt64))
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.DeviceID(); ok {
		_spec.SetField(appinst.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := aiu.mutation.AddedDeviceID(); ok {
		_spec.AddField(appinst.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := aiu.mutation.AppID(); ok {
		_spec.SetField(appinst.FieldAppID, field.TypeInt64, value)
	}
	if value, ok := aiu.mutation.AddedAppID(); ok {
		_spec.AddField(appinst.FieldAppID, field.TypeInt64, value)
	}
	if value, ok := aiu.mutation.UpdatedAt(); ok {
		_spec.SetField(appinst.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aiu.mutation.CreatedAt(); ok {
		_spec.SetField(appinst.FieldCreatedAt, field.TypeTime, value)
	}
	if aiu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appinst.OwnerTable,
			Columns: []string{appinst.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appinst.OwnerTable,
			Columns: []string{appinst.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appinst.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aiu.mutation.done = true
	return n, nil
}

// AppInstUpdateOne is the builder for updating a single AppInst entity.
type AppInstUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppInstMutation
}

// SetDeviceID sets the "device_id" field.
func (aiuo *AppInstUpdateOne) SetDeviceID(mi model.InternalID) *AppInstUpdateOne {
	aiuo.mutation.ResetDeviceID()
	aiuo.mutation.SetDeviceID(mi)
	return aiuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (aiuo *AppInstUpdateOne) SetNillableDeviceID(mi *model.InternalID) *AppInstUpdateOne {
	if mi != nil {
		aiuo.SetDeviceID(*mi)
	}
	return aiuo
}

// AddDeviceID adds mi to the "device_id" field.
func (aiuo *AppInstUpdateOne) AddDeviceID(mi model.InternalID) *AppInstUpdateOne {
	aiuo.mutation.AddDeviceID(mi)
	return aiuo
}

// SetAppID sets the "app_id" field.
func (aiuo *AppInstUpdateOne) SetAppID(mi model.InternalID) *AppInstUpdateOne {
	aiuo.mutation.ResetAppID()
	aiuo.mutation.SetAppID(mi)
	return aiuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aiuo *AppInstUpdateOne) SetNillableAppID(mi *model.InternalID) *AppInstUpdateOne {
	if mi != nil {
		aiuo.SetAppID(*mi)
	}
	return aiuo
}

// AddAppID adds mi to the "app_id" field.
func (aiuo *AppInstUpdateOne) AddAppID(mi model.InternalID) *AppInstUpdateOne {
	aiuo.mutation.AddAppID(mi)
	return aiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (aiuo *AppInstUpdateOne) SetUpdatedAt(t time.Time) *AppInstUpdateOne {
	aiuo.mutation.SetUpdatedAt(t)
	return aiuo
}

// SetCreatedAt sets the "created_at" field.
func (aiuo *AppInstUpdateOne) SetCreatedAt(t time.Time) *AppInstUpdateOne {
	aiuo.mutation.SetCreatedAt(t)
	return aiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aiuo *AppInstUpdateOne) SetNillableCreatedAt(t *time.Time) *AppInstUpdateOne {
	if t != nil {
		aiuo.SetCreatedAt(*t)
	}
	return aiuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (aiuo *AppInstUpdateOne) SetOwnerID(id model.InternalID) *AppInstUpdateOne {
	aiuo.mutation.SetOwnerID(id)
	return aiuo
}

// SetOwner sets the "owner" edge to the User entity.
func (aiuo *AppInstUpdateOne) SetOwner(u *User) *AppInstUpdateOne {
	return aiuo.SetOwnerID(u.ID)
}

// Mutation returns the AppInstMutation object of the builder.
func (aiuo *AppInstUpdateOne) Mutation() *AppInstMutation {
	return aiuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (aiuo *AppInstUpdateOne) ClearOwner() *AppInstUpdateOne {
	aiuo.mutation.ClearOwner()
	return aiuo
}

// Where appends a list predicates to the AppInstUpdate builder.
func (aiuo *AppInstUpdateOne) Where(ps ...predicate.AppInst) *AppInstUpdateOne {
	aiuo.mutation.Where(ps...)
	return aiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiuo *AppInstUpdateOne) Select(field string, fields ...string) *AppInstUpdateOne {
	aiuo.fields = append([]string{field}, fields...)
	return aiuo
}

// Save executes the query and returns the updated AppInst entity.
func (aiuo *AppInstUpdateOne) Save(ctx context.Context) (*AppInst, error) {
	aiuo.defaults()
	return withHooks(ctx, aiuo.sqlSave, aiuo.mutation, aiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *AppInstUpdateOne) SaveX(ctx context.Context) *AppInst {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *AppInstUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *AppInstUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiuo *AppInstUpdateOne) defaults() {
	if _, ok := aiuo.mutation.UpdatedAt(); !ok {
		v := appinst.UpdateDefaultUpdatedAt()
		aiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiuo *AppInstUpdateOne) check() error {
	if aiuo.mutation.OwnerCleared() && len(aiuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppInst.owner"`)
	}
	return nil
}

func (aiuo *AppInstUpdateOne) sqlSave(ctx context.Context) (_node *AppInst, err error) {
	if err := aiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appinst.Table, appinst.Columns, sqlgraph.NewFieldSpec(appinst.FieldID, field.TypeInt64))
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppInst.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appinst.FieldID)
		for _, f := range fields {
			if !appinst.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appinst.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.DeviceID(); ok {
		_spec.SetField(appinst.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := aiuo.mutation.AddedDeviceID(); ok {
		_spec.AddField(appinst.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := aiuo.mutation.AppID(); ok {
		_spec.SetField(appinst.FieldAppID, field.TypeInt64, value)
	}
	if value, ok := aiuo.mutation.AddedAppID(); ok {
		_spec.AddField(appinst.FieldAppID, field.TypeInt64, value)
	}
	if value, ok := aiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appinst.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aiuo.mutation.CreatedAt(); ok {
		_spec.SetField(appinst.FieldCreatedAt, field.TypeTime, value)
	}
	if aiuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appinst.OwnerTable,
			Columns: []string{appinst.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appinst.OwnerTable,
			Columns: []string{appinst.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppInst{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appinst.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aiuo.mutation.done = true
	return _node, nil
}
