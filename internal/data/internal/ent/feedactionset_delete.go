// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedactionset"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
)

// FeedActionSetDelete is the builder for deleting a FeedActionSet entity.
type FeedActionSetDelete struct {
	config
	hooks    []Hook
	mutation *FeedActionSetMutation
}

// Where appends a list predicates to the FeedActionSetDelete builder.
func (fasd *FeedActionSetDelete) Where(ps ...predicate.FeedActionSet) *FeedActionSetDelete {
	fasd.mutation.Where(ps...)
	return fasd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fasd *FeedActionSetDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fasd.sqlExec, fasd.mutation, fasd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fasd *FeedActionSetDelete) ExecX(ctx context.Context) int {
	n, err := fasd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fasd *FeedActionSetDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(feedactionset.Table, sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64))
	if ps := fasd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fasd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fasd.mutation.done = true
	return affected, err
}

// FeedActionSetDeleteOne is the builder for deleting a single FeedActionSet entity.
type FeedActionSetDeleteOne struct {
	fasd *FeedActionSetDelete
}

// Where appends a list predicates to the FeedActionSetDelete builder.
func (fasdo *FeedActionSetDeleteOne) Where(ps ...predicate.FeedActionSet) *FeedActionSetDeleteOne {
	fasdo.fasd.mutation.Where(ps...)
	return fasdo
}

// Exec executes the deletion query.
func (fasdo *FeedActionSetDeleteOne) Exec(ctx context.Context) error {
	n, err := fasdo.fasd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{feedactionset.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fasdo *FeedActionSetDeleteOne) ExecX(ctx context.Context) {
	if err := fasdo.Exec(ctx); err != nil {
		panic(err)
	}
}
