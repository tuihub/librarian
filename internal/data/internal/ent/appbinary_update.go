// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/appbinary"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinfo"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// AppBinaryUpdate is the builder for updating AppBinary entities.
type AppBinaryUpdate struct {
	config
	hooks    []Hook
	mutation *AppBinaryMutation
}

// Where appends a list predicates to the AppBinaryUpdate builder.
func (abu *AppBinaryUpdate) Where(ps ...predicate.AppBinary) *AppBinaryUpdate {
	abu.mutation.Where(ps...)
	return abu
}

// SetName sets the "name" field.
func (abu *AppBinaryUpdate) SetName(s string) *AppBinaryUpdate {
	abu.mutation.SetName(s)
	return abu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (abu *AppBinaryUpdate) SetNillableName(s *string) *AppBinaryUpdate {
	if s != nil {
		abu.SetName(*s)
	}
	return abu
}

// ClearName clears the value of the "name" field.
func (abu *AppBinaryUpdate) ClearName() *AppBinaryUpdate {
	abu.mutation.ClearName()
	return abu
}

// SetSizeBytes sets the "size_bytes" field.
func (abu *AppBinaryUpdate) SetSizeBytes(i int64) *AppBinaryUpdate {
	abu.mutation.ResetSizeBytes()
	abu.mutation.SetSizeBytes(i)
	return abu
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (abu *AppBinaryUpdate) SetNillableSizeBytes(i *int64) *AppBinaryUpdate {
	if i != nil {
		abu.SetSizeBytes(*i)
	}
	return abu
}

// AddSizeBytes adds i to the "size_bytes" field.
func (abu *AppBinaryUpdate) AddSizeBytes(i int64) *AppBinaryUpdate {
	abu.mutation.AddSizeBytes(i)
	return abu
}

// ClearSizeBytes clears the value of the "size_bytes" field.
func (abu *AppBinaryUpdate) ClearSizeBytes() *AppBinaryUpdate {
	abu.mutation.ClearSizeBytes()
	return abu
}

// SetPublicURL sets the "public_url" field.
func (abu *AppBinaryUpdate) SetPublicURL(s string) *AppBinaryUpdate {
	abu.mutation.SetPublicURL(s)
	return abu
}

// SetNillablePublicURL sets the "public_url" field if the given value is not nil.
func (abu *AppBinaryUpdate) SetNillablePublicURL(s *string) *AppBinaryUpdate {
	if s != nil {
		abu.SetPublicURL(*s)
	}
	return abu
}

// ClearPublicURL clears the value of the "public_url" field.
func (abu *AppBinaryUpdate) ClearPublicURL() *AppBinaryUpdate {
	abu.mutation.ClearPublicURL()
	return abu
}

// SetSha256 sets the "sha256" field.
func (abu *AppBinaryUpdate) SetSha256(b []byte) *AppBinaryUpdate {
	abu.mutation.SetSha256(b)
	return abu
}

// ClearSha256 clears the value of the "sha256" field.
func (abu *AppBinaryUpdate) ClearSha256() *AppBinaryUpdate {
	abu.mutation.ClearSha256()
	return abu
}

// SetUpdatedAt sets the "updated_at" field.
func (abu *AppBinaryUpdate) SetUpdatedAt(t time.Time) *AppBinaryUpdate {
	abu.mutation.SetUpdatedAt(t)
	return abu
}

// SetCreatedAt sets the "created_at" field.
func (abu *AppBinaryUpdate) SetCreatedAt(t time.Time) *AppBinaryUpdate {
	abu.mutation.SetCreatedAt(t)
	return abu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (abu *AppBinaryUpdate) SetNillableCreatedAt(t *time.Time) *AppBinaryUpdate {
	if t != nil {
		abu.SetCreatedAt(*t)
	}
	return abu
}

// SetAppInfoID sets the "app_info" edge to the AppInfo entity by ID.
func (abu *AppBinaryUpdate) SetAppInfoID(id model.InternalID) *AppBinaryUpdate {
	abu.mutation.SetAppInfoID(id)
	return abu
}

// SetNillableAppInfoID sets the "app_info" edge to the AppInfo entity by ID if the given value is not nil.
func (abu *AppBinaryUpdate) SetNillableAppInfoID(id *model.InternalID) *AppBinaryUpdate {
	if id != nil {
		abu = abu.SetAppInfoID(*id)
	}
	return abu
}

// SetAppInfo sets the "app_info" edge to the AppInfo entity.
func (abu *AppBinaryUpdate) SetAppInfo(a *AppInfo) *AppBinaryUpdate {
	return abu.SetAppInfoID(a.ID)
}

// Mutation returns the AppBinaryMutation object of the builder.
func (abu *AppBinaryUpdate) Mutation() *AppBinaryMutation {
	return abu.mutation
}

// ClearAppInfo clears the "app_info" edge to the AppInfo entity.
func (abu *AppBinaryUpdate) ClearAppInfo() *AppBinaryUpdate {
	abu.mutation.ClearAppInfo()
	return abu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (abu *AppBinaryUpdate) Save(ctx context.Context) (int, error) {
	abu.defaults()
	return withHooks(ctx, abu.sqlSave, abu.mutation, abu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (abu *AppBinaryUpdate) SaveX(ctx context.Context) int {
	affected, err := abu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (abu *AppBinaryUpdate) Exec(ctx context.Context) error {
	_, err := abu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abu *AppBinaryUpdate) ExecX(ctx context.Context) {
	if err := abu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (abu *AppBinaryUpdate) defaults() {
	if _, ok := abu.mutation.UpdatedAt(); !ok {
		v := appbinary.UpdateDefaultUpdatedAt()
		abu.mutation.SetUpdatedAt(v)
	}
}

func (abu *AppBinaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appbinary.Table, appbinary.Columns, sqlgraph.NewFieldSpec(appbinary.FieldID, field.TypeInt64))
	if ps := abu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abu.mutation.Name(); ok {
		_spec.SetField(appbinary.FieldName, field.TypeString, value)
	}
	if abu.mutation.NameCleared() {
		_spec.ClearField(appbinary.FieldName, field.TypeString)
	}
	if value, ok := abu.mutation.SizeBytes(); ok {
		_spec.SetField(appbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := abu.mutation.AddedSizeBytes(); ok {
		_spec.AddField(appbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if abu.mutation.SizeBytesCleared() {
		_spec.ClearField(appbinary.FieldSizeBytes, field.TypeInt64)
	}
	if value, ok := abu.mutation.PublicURL(); ok {
		_spec.SetField(appbinary.FieldPublicURL, field.TypeString, value)
	}
	if abu.mutation.PublicURLCleared() {
		_spec.ClearField(appbinary.FieldPublicURL, field.TypeString)
	}
	if value, ok := abu.mutation.Sha256(); ok {
		_spec.SetField(appbinary.FieldSha256, field.TypeBytes, value)
	}
	if abu.mutation.Sha256Cleared() {
		_spec.ClearField(appbinary.FieldSha256, field.TypeBytes)
	}
	if value, ok := abu.mutation.UpdatedAt(); ok {
		_spec.SetField(appbinary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := abu.mutation.CreatedAt(); ok {
		_spec.SetField(appbinary.FieldCreatedAt, field.TypeTime, value)
	}
	if abu.mutation.AppInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appbinary.AppInfoTable,
			Columns: []string{appbinary.AppInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abu.mutation.AppInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appbinary.AppInfoTable,
			Columns: []string{appbinary.AppInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, abu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appbinary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	abu.mutation.done = true
	return n, nil
}

// AppBinaryUpdateOne is the builder for updating a single AppBinary entity.
type AppBinaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppBinaryMutation
}

// SetName sets the "name" field.
func (abuo *AppBinaryUpdateOne) SetName(s string) *AppBinaryUpdateOne {
	abuo.mutation.SetName(s)
	return abuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (abuo *AppBinaryUpdateOne) SetNillableName(s *string) *AppBinaryUpdateOne {
	if s != nil {
		abuo.SetName(*s)
	}
	return abuo
}

// ClearName clears the value of the "name" field.
func (abuo *AppBinaryUpdateOne) ClearName() *AppBinaryUpdateOne {
	abuo.mutation.ClearName()
	return abuo
}

// SetSizeBytes sets the "size_bytes" field.
func (abuo *AppBinaryUpdateOne) SetSizeBytes(i int64) *AppBinaryUpdateOne {
	abuo.mutation.ResetSizeBytes()
	abuo.mutation.SetSizeBytes(i)
	return abuo
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (abuo *AppBinaryUpdateOne) SetNillableSizeBytes(i *int64) *AppBinaryUpdateOne {
	if i != nil {
		abuo.SetSizeBytes(*i)
	}
	return abuo
}

// AddSizeBytes adds i to the "size_bytes" field.
func (abuo *AppBinaryUpdateOne) AddSizeBytes(i int64) *AppBinaryUpdateOne {
	abuo.mutation.AddSizeBytes(i)
	return abuo
}

// ClearSizeBytes clears the value of the "size_bytes" field.
func (abuo *AppBinaryUpdateOne) ClearSizeBytes() *AppBinaryUpdateOne {
	abuo.mutation.ClearSizeBytes()
	return abuo
}

// SetPublicURL sets the "public_url" field.
func (abuo *AppBinaryUpdateOne) SetPublicURL(s string) *AppBinaryUpdateOne {
	abuo.mutation.SetPublicURL(s)
	return abuo
}

// SetNillablePublicURL sets the "public_url" field if the given value is not nil.
func (abuo *AppBinaryUpdateOne) SetNillablePublicURL(s *string) *AppBinaryUpdateOne {
	if s != nil {
		abuo.SetPublicURL(*s)
	}
	return abuo
}

// ClearPublicURL clears the value of the "public_url" field.
func (abuo *AppBinaryUpdateOne) ClearPublicURL() *AppBinaryUpdateOne {
	abuo.mutation.ClearPublicURL()
	return abuo
}

// SetSha256 sets the "sha256" field.
func (abuo *AppBinaryUpdateOne) SetSha256(b []byte) *AppBinaryUpdateOne {
	abuo.mutation.SetSha256(b)
	return abuo
}

// ClearSha256 clears the value of the "sha256" field.
func (abuo *AppBinaryUpdateOne) ClearSha256() *AppBinaryUpdateOne {
	abuo.mutation.ClearSha256()
	return abuo
}

// SetUpdatedAt sets the "updated_at" field.
func (abuo *AppBinaryUpdateOne) SetUpdatedAt(t time.Time) *AppBinaryUpdateOne {
	abuo.mutation.SetUpdatedAt(t)
	return abuo
}

// SetCreatedAt sets the "created_at" field.
func (abuo *AppBinaryUpdateOne) SetCreatedAt(t time.Time) *AppBinaryUpdateOne {
	abuo.mutation.SetCreatedAt(t)
	return abuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (abuo *AppBinaryUpdateOne) SetNillableCreatedAt(t *time.Time) *AppBinaryUpdateOne {
	if t != nil {
		abuo.SetCreatedAt(*t)
	}
	return abuo
}

// SetAppInfoID sets the "app_info" edge to the AppInfo entity by ID.
func (abuo *AppBinaryUpdateOne) SetAppInfoID(id model.InternalID) *AppBinaryUpdateOne {
	abuo.mutation.SetAppInfoID(id)
	return abuo
}

// SetNillableAppInfoID sets the "app_info" edge to the AppInfo entity by ID if the given value is not nil.
func (abuo *AppBinaryUpdateOne) SetNillableAppInfoID(id *model.InternalID) *AppBinaryUpdateOne {
	if id != nil {
		abuo = abuo.SetAppInfoID(*id)
	}
	return abuo
}

// SetAppInfo sets the "app_info" edge to the AppInfo entity.
func (abuo *AppBinaryUpdateOne) SetAppInfo(a *AppInfo) *AppBinaryUpdateOne {
	return abuo.SetAppInfoID(a.ID)
}

// Mutation returns the AppBinaryMutation object of the builder.
func (abuo *AppBinaryUpdateOne) Mutation() *AppBinaryMutation {
	return abuo.mutation
}

// ClearAppInfo clears the "app_info" edge to the AppInfo entity.
func (abuo *AppBinaryUpdateOne) ClearAppInfo() *AppBinaryUpdateOne {
	abuo.mutation.ClearAppInfo()
	return abuo
}

// Where appends a list predicates to the AppBinaryUpdate builder.
func (abuo *AppBinaryUpdateOne) Where(ps ...predicate.AppBinary) *AppBinaryUpdateOne {
	abuo.mutation.Where(ps...)
	return abuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (abuo *AppBinaryUpdateOne) Select(field string, fields ...string) *AppBinaryUpdateOne {
	abuo.fields = append([]string{field}, fields...)
	return abuo
}

// Save executes the query and returns the updated AppBinary entity.
func (abuo *AppBinaryUpdateOne) Save(ctx context.Context) (*AppBinary, error) {
	abuo.defaults()
	return withHooks(ctx, abuo.sqlSave, abuo.mutation, abuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (abuo *AppBinaryUpdateOne) SaveX(ctx context.Context) *AppBinary {
	node, err := abuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (abuo *AppBinaryUpdateOne) Exec(ctx context.Context) error {
	_, err := abuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abuo *AppBinaryUpdateOne) ExecX(ctx context.Context) {
	if err := abuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (abuo *AppBinaryUpdateOne) defaults() {
	if _, ok := abuo.mutation.UpdatedAt(); !ok {
		v := appbinary.UpdateDefaultUpdatedAt()
		abuo.mutation.SetUpdatedAt(v)
	}
}

func (abuo *AppBinaryUpdateOne) sqlSave(ctx context.Context) (_node *AppBinary, err error) {
	_spec := sqlgraph.NewUpdateSpec(appbinary.Table, appbinary.Columns, sqlgraph.NewFieldSpec(appbinary.FieldID, field.TypeInt64))
	id, ok := abuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppBinary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := abuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appbinary.FieldID)
		for _, f := range fields {
			if !appbinary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appbinary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := abuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abuo.mutation.Name(); ok {
		_spec.SetField(appbinary.FieldName, field.TypeString, value)
	}
	if abuo.mutation.NameCleared() {
		_spec.ClearField(appbinary.FieldName, field.TypeString)
	}
	if value, ok := abuo.mutation.SizeBytes(); ok {
		_spec.SetField(appbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := abuo.mutation.AddedSizeBytes(); ok {
		_spec.AddField(appbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if abuo.mutation.SizeBytesCleared() {
		_spec.ClearField(appbinary.FieldSizeBytes, field.TypeInt64)
	}
	if value, ok := abuo.mutation.PublicURL(); ok {
		_spec.SetField(appbinary.FieldPublicURL, field.TypeString, value)
	}
	if abuo.mutation.PublicURLCleared() {
		_spec.ClearField(appbinary.FieldPublicURL, field.TypeString)
	}
	if value, ok := abuo.mutation.Sha256(); ok {
		_spec.SetField(appbinary.FieldSha256, field.TypeBytes, value)
	}
	if abuo.mutation.Sha256Cleared() {
		_spec.ClearField(appbinary.FieldSha256, field.TypeBytes)
	}
	if value, ok := abuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appbinary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := abuo.mutation.CreatedAt(); ok {
		_spec.SetField(appbinary.FieldCreatedAt, field.TypeTime, value)
	}
	if abuo.mutation.AppInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appbinary.AppInfoTable,
			Columns: []string{appbinary.AppInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abuo.mutation.AppInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appbinary.AppInfoTable,
			Columns: []string{appbinary.AppInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppBinary{config: abuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, abuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appbinary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	abuo.mutation.done = true
	return _node, nil
}
