// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeBindAccount holds the string denoting the bind_account edge name in mutations.
	EdgeBindAccount = "bind_account"
	// EdgePurchasedApp holds the string denoting the purchased_app edge name in mutations.
	EdgePurchasedApp = "purchased_app"
	// EdgeApp holds the string denoting the app edge name in mutations.
	EdgeApp = "app"
	// EdgeAppInst holds the string denoting the app_inst edge name in mutations.
	EdgeAppInst = "app_inst"
	// EdgeFeedConfig holds the string denoting the feed_config edge name in mutations.
	EdgeFeedConfig = "feed_config"
	// EdgeFeedActionSet holds the string denoting the feed_action_set edge name in mutations.
	EdgeFeedActionSet = "feed_action_set"
	// EdgeFeedItemCollection holds the string denoting the feed_item_collection edge name in mutations.
	EdgeFeedItemCollection = "feed_item_collection"
	// EdgeNotifySource holds the string denoting the notify_source edge name in mutations.
	EdgeNotifySource = "notify_source"
	// EdgeNotifyTarget holds the string denoting the notify_target edge name in mutations.
	EdgeNotifyTarget = "notify_target"
	// EdgeNotifyFlow holds the string denoting the notify_flow edge name in mutations.
	EdgeNotifyFlow = "notify_flow"
	// EdgeImage holds the string denoting the image edge name in mutations.
	EdgeImage = "image"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgeDeviceInfo holds the string denoting the device_info edge name in mutations.
	EdgeDeviceInfo = "device_info"
	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"
	// EdgePorterContext holds the string denoting the porter_context edge name in mutations.
	EdgePorterContext = "porter_context"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeCreatedUser holds the string denoting the created_user edge name in mutations.
	EdgeCreatedUser = "created_user"
	// EdgeUserDevice holds the string denoting the user_device edge name in mutations.
	EdgeUserDevice = "user_device"
	// Table holds the table name of the user in the database.
	Table = "users"
	// BindAccountTable is the table that holds the bind_account relation/edge.
	BindAccountTable = "accounts"
	// BindAccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	BindAccountInverseTable = "accounts"
	// BindAccountColumn is the table column denoting the bind_account relation/edge.
	BindAccountColumn = "user_bind_account"
	// PurchasedAppTable is the table that holds the purchased_app relation/edge. The primary key declared below.
	PurchasedAppTable = "user_purchased_app"
	// PurchasedAppInverseTable is the table name for the AppInfo entity.
	// It exists in this package in order to avoid circular dependency with the "appinfo" package.
	PurchasedAppInverseTable = "app_infos"
	// AppTable is the table that holds the app relation/edge.
	AppTable = "apps"
	// AppInverseTable is the table name for the App entity.
	// It exists in this package in order to avoid circular dependency with the "app" package.
	AppInverseTable = "apps"
	// AppColumn is the table column denoting the app relation/edge.
	AppColumn = "user_app"
	// AppInstTable is the table that holds the app_inst relation/edge.
	AppInstTable = "app_insts"
	// AppInstInverseTable is the table name for the AppInst entity.
	// It exists in this package in order to avoid circular dependency with the "appinst" package.
	AppInstInverseTable = "app_insts"
	// AppInstColumn is the table column denoting the app_inst relation/edge.
	AppInstColumn = "user_app_inst"
	// FeedConfigTable is the table that holds the feed_config relation/edge.
	FeedConfigTable = "feed_configs"
	// FeedConfigInverseTable is the table name for the FeedConfig entity.
	// It exists in this package in order to avoid circular dependency with the "feedconfig" package.
	FeedConfigInverseTable = "feed_configs"
	// FeedConfigColumn is the table column denoting the feed_config relation/edge.
	FeedConfigColumn = "user_feed_config"
	// FeedActionSetTable is the table that holds the feed_action_set relation/edge.
	FeedActionSetTable = "feed_action_sets"
	// FeedActionSetInverseTable is the table name for the FeedActionSet entity.
	// It exists in this package in order to avoid circular dependency with the "feedactionset" package.
	FeedActionSetInverseTable = "feed_action_sets"
	// FeedActionSetColumn is the table column denoting the feed_action_set relation/edge.
	FeedActionSetColumn = "user_feed_action_set"
	// FeedItemCollectionTable is the table that holds the feed_item_collection relation/edge.
	FeedItemCollectionTable = "feed_item_collections"
	// FeedItemCollectionInverseTable is the table name for the FeedItemCollection entity.
	// It exists in this package in order to avoid circular dependency with the "feeditemcollection" package.
	FeedItemCollectionInverseTable = "feed_item_collections"
	// FeedItemCollectionColumn is the table column denoting the feed_item_collection relation/edge.
	FeedItemCollectionColumn = "user_feed_item_collection"
	// NotifySourceTable is the table that holds the notify_source relation/edge.
	NotifySourceTable = "notify_sources"
	// NotifySourceInverseTable is the table name for the NotifySource entity.
	// It exists in this package in order to avoid circular dependency with the "notifysource" package.
	NotifySourceInverseTable = "notify_sources"
	// NotifySourceColumn is the table column denoting the notify_source relation/edge.
	NotifySourceColumn = "user_notify_source"
	// NotifyTargetTable is the table that holds the notify_target relation/edge.
	NotifyTargetTable = "notify_targets"
	// NotifyTargetInverseTable is the table name for the NotifyTarget entity.
	// It exists in this package in order to avoid circular dependency with the "notifytarget" package.
	NotifyTargetInverseTable = "notify_targets"
	// NotifyTargetColumn is the table column denoting the notify_target relation/edge.
	NotifyTargetColumn = "user_notify_target"
	// NotifyFlowTable is the table that holds the notify_flow relation/edge.
	NotifyFlowTable = "notify_flows"
	// NotifyFlowInverseTable is the table name for the NotifyFlow entity.
	// It exists in this package in order to avoid circular dependency with the "notifyflow" package.
	NotifyFlowInverseTable = "notify_flows"
	// NotifyFlowColumn is the table column denoting the notify_flow relation/edge.
	NotifyFlowColumn = "user_notify_flow"
	// ImageTable is the table that holds the image relation/edge.
	ImageTable = "images"
	// ImageInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImageInverseTable = "images"
	// ImageColumn is the table column denoting the image relation/edge.
	ImageColumn = "user_image"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "files"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "user_file"
	// DeviceInfoTable is the table that holds the device_info relation/edge. The primary key declared below.
	DeviceInfoTable = "user_devices"
	// DeviceInfoInverseTable is the table name for the DeviceInfo entity.
	// It exists in this package in order to avoid circular dependency with the "deviceinfo" package.
	DeviceInfoInverseTable = "device_infos"
	// TagTable is the table that holds the tag relation/edge.
	TagTable = "tags"
	// TagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagInverseTable = "tags"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "user_tag"
	// PorterContextTable is the table that holds the porter_context relation/edge.
	PorterContextTable = "porter_contexts"
	// PorterContextInverseTable is the table name for the PorterContext entity.
	// It exists in this package in order to avoid circular dependency with the "portercontext" package.
	PorterContextInverseTable = "porter_contexts"
	// PorterContextColumn is the table column denoting the porter_context relation/edge.
	PorterContextColumn = "user_porter_context"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "user_created_user"
	// CreatedUserTable is the table that holds the created_user relation/edge.
	CreatedUserTable = "users"
	// CreatedUserColumn is the table column denoting the created_user relation/edge.
	CreatedUserColumn = "user_created_user"
	// UserDeviceTable is the table that holds the user_device relation/edge.
	UserDeviceTable = "user_devices"
	// UserDeviceInverseTable is the table name for the UserDevice entity.
	// It exists in this package in order to avoid circular dependency with the "userdevice" package.
	UserDeviceInverseTable = "user_devices"
	// UserDeviceColumn is the table column denoting the user_device relation/edge.
	UserDeviceColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
	FieldStatus,
	FieldType,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_created_user",
}

var (
	// PurchasedAppPrimaryKey and PurchasedAppColumn2 are the table columns denoting the
	// primary key for the purchased_app relation (M2M).
	PurchasedAppPrimaryKey = []string{"user_id", "app_info_id"}
	// DeviceInfoPrimaryKey and DeviceInfoColumn2 are the table columns denoting the
	// primary key for the device_info relation (M2M).
	DeviceInfoPrimaryKey = []string{"user_id", "device_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusActive  Status = "active"
	StatusBlocked Status = "blocked"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusBlocked:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for status field: %q", s)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeAdmin    Type = "admin"
	TypeNormal   Type = "normal"
	TypeSentinel Type = "sentinel"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeAdmin, TypeNormal, TypeSentinel:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByBindAccountCount orders the results by bind_account count.
func ByBindAccountCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBindAccountStep(), opts...)
	}
}

// ByBindAccount orders the results by bind_account terms.
func ByBindAccount(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBindAccountStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPurchasedAppCount orders the results by purchased_app count.
func ByPurchasedAppCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPurchasedAppStep(), opts...)
	}
}

// ByPurchasedApp orders the results by purchased_app terms.
func ByPurchasedApp(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPurchasedAppStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAppCount orders the results by app count.
func ByAppCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppStep(), opts...)
	}
}

// ByApp orders the results by app terms.
func ByApp(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAppInstCount orders the results by app_inst count.
func ByAppInstCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppInstStep(), opts...)
	}
}

// ByAppInst orders the results by app_inst terms.
func ByAppInst(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppInstStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeedConfigCount orders the results by feed_config count.
func ByFeedConfigCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeedConfigStep(), opts...)
	}
}

// ByFeedConfig orders the results by feed_config terms.
func ByFeedConfig(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedConfigStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeedActionSetCount orders the results by feed_action_set count.
func ByFeedActionSetCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeedActionSetStep(), opts...)
	}
}

// ByFeedActionSet orders the results by feed_action_set terms.
func ByFeedActionSet(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedActionSetStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeedItemCollectionCount orders the results by feed_item_collection count.
func ByFeedItemCollectionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeedItemCollectionStep(), opts...)
	}
}

// ByFeedItemCollection orders the results by feed_item_collection terms.
func ByFeedItemCollection(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedItemCollectionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotifySourceCount orders the results by notify_source count.
func ByNotifySourceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotifySourceStep(), opts...)
	}
}

// ByNotifySource orders the results by notify_source terms.
func ByNotifySource(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifySourceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotifyTargetCount orders the results by notify_target count.
func ByNotifyTargetCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotifyTargetStep(), opts...)
	}
}

// ByNotifyTarget orders the results by notify_target terms.
func ByNotifyTarget(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifyTargetStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotifyFlowCount orders the results by notify_flow count.
func ByNotifyFlowCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotifyFlowStep(), opts...)
	}
}

// ByNotifyFlow orders the results by notify_flow terms.
func ByNotifyFlow(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifyFlowStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByImageCount orders the results by image count.
func ByImageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImageStep(), opts...)
	}
}

// ByImage orders the results by image terms.
func ByImage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFileCount orders the results by file count.
func ByFileCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFileStep(), opts...)
	}
}

// ByFile orders the results by file terms.
func ByFile(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeviceInfoCount orders the results by device_info count.
func ByDeviceInfoCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceInfoStep(), opts...)
	}
}

// ByDeviceInfo orders the results by device_info terms.
func ByDeviceInfo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceInfoStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTagCount orders the results by tag count.
func ByTagCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagStep(), opts...)
	}
}

// ByTag orders the results by tag terms.
func ByTag(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPorterContextCount orders the results by porter_context count.
func ByPorterContextCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPorterContextStep(), opts...)
	}
}

// ByPorterContext orders the results by porter_context terms.
func ByPorterContext(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPorterContextStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatedUserCount orders the results by created_user count.
func ByCreatedUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedUserStep(), opts...)
	}
}

// ByCreatedUser orders the results by created_user terms.
func ByCreatedUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserDeviceCount orders the results by user_device count.
func ByUserDeviceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserDeviceStep(), opts...)
	}
}

// ByUserDevice orders the results by user_device terms.
func ByUserDevice(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserDeviceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBindAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BindAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BindAccountTable, BindAccountColumn),
	)
}
func newPurchasedAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PurchasedAppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PurchasedAppTable, PurchasedAppPrimaryKey...),
	)
}
func newAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AppTable, AppColumn),
	)
}
func newAppInstStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppInstInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AppInstTable, AppInstColumn),
	)
}
func newFeedConfigStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedConfigInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FeedConfigTable, FeedConfigColumn),
	)
}
func newFeedActionSetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedActionSetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FeedActionSetTable, FeedActionSetColumn),
	)
}
func newFeedItemCollectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedItemCollectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FeedItemCollectionTable, FeedItemCollectionColumn),
	)
}
func newNotifySourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotifySourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotifySourceTable, NotifySourceColumn),
	)
}
func newNotifyTargetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotifyTargetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotifyTargetTable, NotifyTargetColumn),
	)
}
func newNotifyFlowStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotifyFlowInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotifyFlowTable, NotifyFlowColumn),
	)
}
func newImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImageTable, ImageColumn),
	)
}
func newFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FileTable, FileColumn),
	)
}
func newDeviceInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DeviceInfoTable, DeviceInfoPrimaryKey...),
	)
}
func newTagStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TagTable, TagColumn),
	)
}
func newPorterContextStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PorterContextInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PorterContextTable, PorterContextColumn),
	)
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newCreatedUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedUserTable, CreatedUserColumn),
	)
}
func newUserDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserDeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserDeviceTable, UserDeviceColumn),
	)
}
