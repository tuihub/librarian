// Code generated by ent, DO NOT EDIT.

package notifytarget

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notifytarget type in the database.
	Label = "notify_target"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDestination holds the string denoting the destination field in the database.
	FieldDestination = "destination"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeNotifyFlow holds the string denoting the notify_flow edge name in mutations.
	EdgeNotifyFlow = "notify_flow"
	// EdgeNotifyFlowTarget holds the string denoting the notify_flow_target edge name in mutations.
	EdgeNotifyFlowTarget = "notify_flow_target"
	// Table holds the table name of the notifytarget in the database.
	Table = "notify_targets"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "notify_targets"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_notify_target"
	// NotifyFlowTable is the table that holds the notify_flow relation/edge. The primary key declared below.
	NotifyFlowTable = "notify_flow_targets"
	// NotifyFlowInverseTable is the table name for the NotifyFlow entity.
	// It exists in this package in order to avoid circular dependency with the "notifyflow" package.
	NotifyFlowInverseTable = "notify_flows"
	// NotifyFlowTargetTable is the table that holds the notify_flow_target relation/edge.
	NotifyFlowTargetTable = "notify_flow_targets"
	// NotifyFlowTargetInverseTable is the table name for the NotifyFlowTarget entity.
	// It exists in this package in order to avoid circular dependency with the "notifyflowtarget" package.
	NotifyFlowTargetInverseTable = "notify_flow_targets"
	// NotifyFlowTargetColumn is the table column denoting the notify_flow_target relation/edge.
	NotifyFlowTargetColumn = "notify_target_id"
)

// Columns holds all SQL columns for notifytarget fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldDestination,
	FieldStatus,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "notify_targets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_notify_target",
}

var (
	// NotifyFlowPrimaryKey and NotifyFlowColumn2 are the table columns denoting the
	// primary key for the notify_flow relation (M2M).
	NotifyFlowPrimaryKey = []string{"notify_flow_id", "notify_target_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusActive  Status = "active"
	StatusSuspend Status = "suspend"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusSuspend:
		return nil
	default:
		return fmt.Errorf("notifytarget: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the NotifyTarget queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotifyFlowCount orders the results by notify_flow count.
func ByNotifyFlowCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotifyFlowStep(), opts...)
	}
}

// ByNotifyFlow orders the results by notify_flow terms.
func ByNotifyFlow(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifyFlowStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotifyFlowTargetCount orders the results by notify_flow_target count.
func ByNotifyFlowTargetCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotifyFlowTargetStep(), opts...)
	}
}

// ByNotifyFlowTarget orders the results by notify_flow_target terms.
func ByNotifyFlowTarget(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifyFlowTargetStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newNotifyFlowStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotifyFlowInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NotifyFlowTable, NotifyFlowPrimaryKey...),
	)
}
func newNotifyFlowTargetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotifyFlowTargetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, NotifyFlowTargetTable, NotifyFlowTargetColumn),
	)
}
