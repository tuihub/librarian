// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/internal/data/internal/ent/appappcategory"
	"github.com/tuihub/librarian/internal/data/internal/ent/appcategory"
	"github.com/tuihub/librarian/internal/model"
)

// AppAppCategoryCreate is the builder for creating a AppAppCategory entity.
type AppAppCategoryCreate struct {
	config
	mutation *AppAppCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppCategoryID sets the "app_category_id" field.
func (aacc *AppAppCategoryCreate) SetAppCategoryID(mi model.InternalID) *AppAppCategoryCreate {
	aacc.mutation.SetAppCategoryID(mi)
	return aacc
}

// SetAppID sets the "app_id" field.
func (aacc *AppAppCategoryCreate) SetAppID(mi model.InternalID) *AppAppCategoryCreate {
	aacc.mutation.SetAppID(mi)
	return aacc
}

// SetAppCategory sets the "app_category" edge to the AppCategory entity.
func (aacc *AppAppCategoryCreate) SetAppCategory(a *AppCategory) *AppAppCategoryCreate {
	return aacc.SetAppCategoryID(a.ID)
}

// SetApp sets the "app" edge to the App entity.
func (aacc *AppAppCategoryCreate) SetApp(a *App) *AppAppCategoryCreate {
	return aacc.SetAppID(a.ID)
}

// Mutation returns the AppAppCategoryMutation object of the builder.
func (aacc *AppAppCategoryCreate) Mutation() *AppAppCategoryMutation {
	return aacc.mutation
}

// Save creates the AppAppCategory in the database.
func (aacc *AppAppCategoryCreate) Save(ctx context.Context) (*AppAppCategory, error) {
	return withHooks(ctx, aacc.sqlSave, aacc.mutation, aacc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aacc *AppAppCategoryCreate) SaveX(ctx context.Context) *AppAppCategory {
	v, err := aacc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacc *AppAppCategoryCreate) Exec(ctx context.Context) error {
	_, err := aacc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacc *AppAppCategoryCreate) ExecX(ctx context.Context) {
	if err := aacc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aacc *AppAppCategoryCreate) check() error {
	if _, ok := aacc.mutation.AppCategoryID(); !ok {
		return &ValidationError{Name: "app_category_id", err: errors.New(`ent: missing required field "AppAppCategory.app_category_id"`)}
	}
	if _, ok := aacc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppAppCategory.app_id"`)}
	}
	if len(aacc.mutation.AppCategoryIDs()) == 0 {
		return &ValidationError{Name: "app_category", err: errors.New(`ent: missing required edge "AppAppCategory.app_category"`)}
	}
	if len(aacc.mutation.AppIDs()) == 0 {
		return &ValidationError{Name: "app", err: errors.New(`ent: missing required edge "AppAppCategory.app"`)}
	}
	return nil
}

func (aacc *AppAppCategoryCreate) sqlSave(ctx context.Context) (*AppAppCategory, error) {
	if err := aacc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aacc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aacc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	aacc.mutation.id = &_node.ID
	aacc.mutation.done = true
	return _node, nil
}

func (aacc *AppAppCategoryCreate) createSpec() (*AppAppCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &AppAppCategory{config: aacc.config}
		_spec = sqlgraph.NewCreateSpec(appappcategory.Table, sqlgraph.NewFieldSpec(appappcategory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = aacc.conflict
	if nodes := aacc.mutation.AppCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appappcategory.AppCategoryTable,
			Columns: []string{appappcategory.AppCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcategory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppCategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aacc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appappcategory.AppTable,
			Columns: []string{appappcategory.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppAppCategory.Create().
//		SetAppCategoryID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppAppCategoryUpsert) {
//			SetAppCategoryID(v+v).
//		}).
//		Exec(ctx)
func (aacc *AppAppCategoryCreate) OnConflict(opts ...sql.ConflictOption) *AppAppCategoryUpsertOne {
	aacc.conflict = opts
	return &AppAppCategoryUpsertOne{
		create: aacc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppAppCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aacc *AppAppCategoryCreate) OnConflictColumns(columns ...string) *AppAppCategoryUpsertOne {
	aacc.conflict = append(aacc.conflict, sql.ConflictColumns(columns...))
	return &AppAppCategoryUpsertOne{
		create: aacc,
	}
}

type (
	// AppAppCategoryUpsertOne is the builder for "upsert"-ing
	//  one AppAppCategory node.
	AppAppCategoryUpsertOne struct {
		create *AppAppCategoryCreate
	}

	// AppAppCategoryUpsert is the "OnConflict" setter.
	AppAppCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppCategoryID sets the "app_category_id" field.
func (u *AppAppCategoryUpsert) SetAppCategoryID(v model.InternalID) *AppAppCategoryUpsert {
	u.Set(appappcategory.FieldAppCategoryID, v)
	return u
}

// UpdateAppCategoryID sets the "app_category_id" field to the value that was provided on create.
func (u *AppAppCategoryUpsert) UpdateAppCategoryID() *AppAppCategoryUpsert {
	u.SetExcluded(appappcategory.FieldAppCategoryID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppAppCategoryUpsert) SetAppID(v model.InternalID) *AppAppCategoryUpsert {
	u.Set(appappcategory.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppAppCategoryUpsert) UpdateAppID() *AppAppCategoryUpsert {
	u.SetExcluded(appappcategory.FieldAppID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AppAppCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AppAppCategoryUpsertOne) UpdateNewValues() *AppAppCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppAppCategory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppAppCategoryUpsertOne) Ignore() *AppAppCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppAppCategoryUpsertOne) DoNothing() *AppAppCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppAppCategoryCreate.OnConflict
// documentation for more info.
func (u *AppAppCategoryUpsertOne) Update(set func(*AppAppCategoryUpsert)) *AppAppCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppAppCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppCategoryID sets the "app_category_id" field.
func (u *AppAppCategoryUpsertOne) SetAppCategoryID(v model.InternalID) *AppAppCategoryUpsertOne {
	return u.Update(func(s *AppAppCategoryUpsert) {
		s.SetAppCategoryID(v)
	})
}

// UpdateAppCategoryID sets the "app_category_id" field to the value that was provided on create.
func (u *AppAppCategoryUpsertOne) UpdateAppCategoryID() *AppAppCategoryUpsertOne {
	return u.Update(func(s *AppAppCategoryUpsert) {
		s.UpdateAppCategoryID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppAppCategoryUpsertOne) SetAppID(v model.InternalID) *AppAppCategoryUpsertOne {
	return u.Update(func(s *AppAppCategoryUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppAppCategoryUpsertOne) UpdateAppID() *AppAppCategoryUpsertOne {
	return u.Update(func(s *AppAppCategoryUpsert) {
		s.UpdateAppID()
	})
}

// Exec executes the query.
func (u *AppAppCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppAppCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppAppCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppAppCategoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppAppCategoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppAppCategoryCreateBulk is the builder for creating many AppAppCategory entities in bulk.
type AppAppCategoryCreateBulk struct {
	config
	err      error
	builders []*AppAppCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the AppAppCategory entities in the database.
func (aaccb *AppAppCategoryCreateBulk) Save(ctx context.Context) ([]*AppAppCategory, error) {
	if aaccb.err != nil {
		return nil, aaccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aaccb.builders))
	nodes := make([]*AppAppCategory, len(aaccb.builders))
	mutators := make([]Mutator, len(aaccb.builders))
	for i := range aaccb.builders {
		func(i int, root context.Context) {
			builder := aaccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppAppCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aaccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aaccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aaccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aaccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aaccb *AppAppCategoryCreateBulk) SaveX(ctx context.Context) []*AppAppCategory {
	v, err := aaccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aaccb *AppAppCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := aaccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aaccb *AppAppCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := aaccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppAppCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppAppCategoryUpsert) {
//			SetAppCategoryID(v+v).
//		}).
//		Exec(ctx)
func (aaccb *AppAppCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppAppCategoryUpsertBulk {
	aaccb.conflict = opts
	return &AppAppCategoryUpsertBulk{
		create: aaccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppAppCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aaccb *AppAppCategoryCreateBulk) OnConflictColumns(columns ...string) *AppAppCategoryUpsertBulk {
	aaccb.conflict = append(aaccb.conflict, sql.ConflictColumns(columns...))
	return &AppAppCategoryUpsertBulk{
		create: aaccb,
	}
}

// AppAppCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of AppAppCategory nodes.
type AppAppCategoryUpsertBulk struct {
	create *AppAppCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppAppCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AppAppCategoryUpsertBulk) UpdateNewValues() *AppAppCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppAppCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppAppCategoryUpsertBulk) Ignore() *AppAppCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppAppCategoryUpsertBulk) DoNothing() *AppAppCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppAppCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *AppAppCategoryUpsertBulk) Update(set func(*AppAppCategoryUpsert)) *AppAppCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppAppCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppCategoryID sets the "app_category_id" field.
func (u *AppAppCategoryUpsertBulk) SetAppCategoryID(v model.InternalID) *AppAppCategoryUpsertBulk {
	return u.Update(func(s *AppAppCategoryUpsert) {
		s.SetAppCategoryID(v)
	})
}

// UpdateAppCategoryID sets the "app_category_id" field to the value that was provided on create.
func (u *AppAppCategoryUpsertBulk) UpdateAppCategoryID() *AppAppCategoryUpsertBulk {
	return u.Update(func(s *AppAppCategoryUpsert) {
		s.UpdateAppCategoryID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppAppCategoryUpsertBulk) SetAppID(v model.InternalID) *AppAppCategoryUpsertBulk {
	return u.Update(func(s *AppAppCategoryUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppAppCategoryUpsertBulk) UpdateAppID() *AppAppCategoryUpsertBulk {
	return u.Update(func(s *AppAppCategoryUpsert) {
		s.UpdateAppID()
	})
}

// Exec executes the query.
func (u *AppAppCategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppAppCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppAppCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppAppCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
