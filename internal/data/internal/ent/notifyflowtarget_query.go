// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflow"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflowtarget"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifytarget"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// NotifyFlowTargetQuery is the builder for querying NotifyFlowTarget entities.
type NotifyFlowTargetQuery struct {
	config
	ctx              *QueryContext
	order            []notifyflowtarget.OrderOption
	inters           []Interceptor
	predicates       []predicate.NotifyFlowTarget
	withNotifyFlow   *NotifyFlowQuery
	withNotifyTarget *NotifyTargetQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NotifyFlowTargetQuery builder.
func (nftq *NotifyFlowTargetQuery) Where(ps ...predicate.NotifyFlowTarget) *NotifyFlowTargetQuery {
	nftq.predicates = append(nftq.predicates, ps...)
	return nftq
}

// Limit the number of records to be returned by this query.
func (nftq *NotifyFlowTargetQuery) Limit(limit int) *NotifyFlowTargetQuery {
	nftq.ctx.Limit = &limit
	return nftq
}

// Offset to start from.
func (nftq *NotifyFlowTargetQuery) Offset(offset int) *NotifyFlowTargetQuery {
	nftq.ctx.Offset = &offset
	return nftq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nftq *NotifyFlowTargetQuery) Unique(unique bool) *NotifyFlowTargetQuery {
	nftq.ctx.Unique = &unique
	return nftq
}

// Order specifies how the records should be ordered.
func (nftq *NotifyFlowTargetQuery) Order(o ...notifyflowtarget.OrderOption) *NotifyFlowTargetQuery {
	nftq.order = append(nftq.order, o...)
	return nftq
}

// QueryNotifyFlow chains the current query on the "notify_flow" edge.
func (nftq *NotifyFlowTargetQuery) QueryNotifyFlow() *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: nftq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nftq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nftq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowtarget.Table, notifyflowtarget.FieldID, selector),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowtarget.NotifyFlowTable, notifyflowtarget.NotifyFlowColumn),
		)
		fromU = sqlgraph.SetNeighbors(nftq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotifyTarget chains the current query on the "notify_target" edge.
func (nftq *NotifyFlowTargetQuery) QueryNotifyTarget() *NotifyTargetQuery {
	query := (&NotifyTargetClient{config: nftq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nftq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nftq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowtarget.Table, notifyflowtarget.FieldID, selector),
			sqlgraph.To(notifytarget.Table, notifytarget.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowtarget.NotifyTargetTable, notifyflowtarget.NotifyTargetColumn),
		)
		fromU = sqlgraph.SetNeighbors(nftq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NotifyFlowTarget entity from the query.
// Returns a *NotFoundError when no NotifyFlowTarget was found.
func (nftq *NotifyFlowTargetQuery) First(ctx context.Context) (*NotifyFlowTarget, error) {
	nodes, err := nftq.Limit(1).All(setContextOp(ctx, nftq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{notifyflowtarget.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nftq *NotifyFlowTargetQuery) FirstX(ctx context.Context) *NotifyFlowTarget {
	node, err := nftq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NotifyFlowTarget ID from the query.
// Returns a *NotFoundError when no NotifyFlowTarget ID was found.
func (nftq *NotifyFlowTargetQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nftq.Limit(1).IDs(setContextOp(ctx, nftq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{notifyflowtarget.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nftq *NotifyFlowTargetQuery) FirstIDX(ctx context.Context) int {
	id, err := nftq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NotifyFlowTarget entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NotifyFlowTarget entity is found.
// Returns a *NotFoundError when no NotifyFlowTarget entities are found.
func (nftq *NotifyFlowTargetQuery) Only(ctx context.Context) (*NotifyFlowTarget, error) {
	nodes, err := nftq.Limit(2).All(setContextOp(ctx, nftq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{notifyflowtarget.Label}
	default:
		return nil, &NotSingularError{notifyflowtarget.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nftq *NotifyFlowTargetQuery) OnlyX(ctx context.Context) *NotifyFlowTarget {
	node, err := nftq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NotifyFlowTarget ID in the query.
// Returns a *NotSingularError when more than one NotifyFlowTarget ID is found.
// Returns a *NotFoundError when no entities are found.
func (nftq *NotifyFlowTargetQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nftq.Limit(2).IDs(setContextOp(ctx, nftq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{notifyflowtarget.Label}
	default:
		err = &NotSingularError{notifyflowtarget.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nftq *NotifyFlowTargetQuery) OnlyIDX(ctx context.Context) int {
	id, err := nftq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NotifyFlowTargets.
func (nftq *NotifyFlowTargetQuery) All(ctx context.Context) ([]*NotifyFlowTarget, error) {
	ctx = setContextOp(ctx, nftq.ctx, ent.OpQueryAll)
	if err := nftq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NotifyFlowTarget, *NotifyFlowTargetQuery]()
	return withInterceptors[[]*NotifyFlowTarget](ctx, nftq, qr, nftq.inters)
}

// AllX is like All, but panics if an error occurs.
func (nftq *NotifyFlowTargetQuery) AllX(ctx context.Context) []*NotifyFlowTarget {
	nodes, err := nftq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NotifyFlowTarget IDs.
func (nftq *NotifyFlowTargetQuery) IDs(ctx context.Context) (ids []int, err error) {
	if nftq.ctx.Unique == nil && nftq.path != nil {
		nftq.Unique(true)
	}
	ctx = setContextOp(ctx, nftq.ctx, ent.OpQueryIDs)
	if err = nftq.Select(notifyflowtarget.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nftq *NotifyFlowTargetQuery) IDsX(ctx context.Context) []int {
	ids, err := nftq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nftq *NotifyFlowTargetQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, nftq.ctx, ent.OpQueryCount)
	if err := nftq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, nftq, querierCount[*NotifyFlowTargetQuery](), nftq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (nftq *NotifyFlowTargetQuery) CountX(ctx context.Context) int {
	count, err := nftq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nftq *NotifyFlowTargetQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, nftq.ctx, ent.OpQueryExist)
	switch _, err := nftq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (nftq *NotifyFlowTargetQuery) ExistX(ctx context.Context) bool {
	exist, err := nftq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NotifyFlowTargetQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nftq *NotifyFlowTargetQuery) Clone() *NotifyFlowTargetQuery {
	if nftq == nil {
		return nil
	}
	return &NotifyFlowTargetQuery{
		config:           nftq.config,
		ctx:              nftq.ctx.Clone(),
		order:            append([]notifyflowtarget.OrderOption{}, nftq.order...),
		inters:           append([]Interceptor{}, nftq.inters...),
		predicates:       append([]predicate.NotifyFlowTarget{}, nftq.predicates...),
		withNotifyFlow:   nftq.withNotifyFlow.Clone(),
		withNotifyTarget: nftq.withNotifyTarget.Clone(),
		// clone intermediate query.
		sql:  nftq.sql.Clone(),
		path: nftq.path,
	}
}

// WithNotifyFlow tells the query-builder to eager-load the nodes that are connected to
// the "notify_flow" edge. The optional arguments are used to configure the query builder of the edge.
func (nftq *NotifyFlowTargetQuery) WithNotifyFlow(opts ...func(*NotifyFlowQuery)) *NotifyFlowTargetQuery {
	query := (&NotifyFlowClient{config: nftq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nftq.withNotifyFlow = query
	return nftq
}

// WithNotifyTarget tells the query-builder to eager-load the nodes that are connected to
// the "notify_target" edge. The optional arguments are used to configure the query builder of the edge.
func (nftq *NotifyFlowTargetQuery) WithNotifyTarget(opts ...func(*NotifyTargetQuery)) *NotifyFlowTargetQuery {
	query := (&NotifyTargetClient{config: nftq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nftq.withNotifyTarget = query
	return nftq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		NotifyFlowID model.InternalID `json:"notify_flow_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NotifyFlowTarget.Query().
//		GroupBy(notifyflowtarget.FieldNotifyFlowID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nftq *NotifyFlowTargetQuery) GroupBy(field string, fields ...string) *NotifyFlowTargetGroupBy {
	nftq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NotifyFlowTargetGroupBy{build: nftq}
	grbuild.flds = &nftq.ctx.Fields
	grbuild.label = notifyflowtarget.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		NotifyFlowID model.InternalID `json:"notify_flow_id,omitempty"`
//	}
//
//	client.NotifyFlowTarget.Query().
//		Select(notifyflowtarget.FieldNotifyFlowID).
//		Scan(ctx, &v)
func (nftq *NotifyFlowTargetQuery) Select(fields ...string) *NotifyFlowTargetSelect {
	nftq.ctx.Fields = append(nftq.ctx.Fields, fields...)
	sbuild := &NotifyFlowTargetSelect{NotifyFlowTargetQuery: nftq}
	sbuild.label = notifyflowtarget.Label
	sbuild.flds, sbuild.scan = &nftq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NotifyFlowTargetSelect configured with the given aggregations.
func (nftq *NotifyFlowTargetQuery) Aggregate(fns ...AggregateFunc) *NotifyFlowTargetSelect {
	return nftq.Select().Aggregate(fns...)
}

func (nftq *NotifyFlowTargetQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range nftq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, nftq); err != nil {
				return err
			}
		}
	}
	for _, f := range nftq.ctx.Fields {
		if !notifyflowtarget.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nftq.path != nil {
		prev, err := nftq.path(ctx)
		if err != nil {
			return err
		}
		nftq.sql = prev
	}
	return nil
}

func (nftq *NotifyFlowTargetQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NotifyFlowTarget, error) {
	var (
		nodes       = []*NotifyFlowTarget{}
		_spec       = nftq.querySpec()
		loadedTypes = [2]bool{
			nftq.withNotifyFlow != nil,
			nftq.withNotifyTarget != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NotifyFlowTarget).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NotifyFlowTarget{config: nftq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nftq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nftq.withNotifyFlow; query != nil {
		if err := nftq.loadNotifyFlow(ctx, query, nodes, nil,
			func(n *NotifyFlowTarget, e *NotifyFlow) { n.Edges.NotifyFlow = e }); err != nil {
			return nil, err
		}
	}
	if query := nftq.withNotifyTarget; query != nil {
		if err := nftq.loadNotifyTarget(ctx, query, nodes, nil,
			func(n *NotifyFlowTarget, e *NotifyTarget) { n.Edges.NotifyTarget = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nftq *NotifyFlowTargetQuery) loadNotifyFlow(ctx context.Context, query *NotifyFlowQuery, nodes []*NotifyFlowTarget, init func(*NotifyFlowTarget), assign func(*NotifyFlowTarget, *NotifyFlow)) error {
	ids := make([]model.InternalID, 0, len(nodes))
	nodeids := make(map[model.InternalID][]*NotifyFlowTarget)
	for i := range nodes {
		fk := nodes[i].NotifyFlowID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(notifyflow.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "notify_flow_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (nftq *NotifyFlowTargetQuery) loadNotifyTarget(ctx context.Context, query *NotifyTargetQuery, nodes []*NotifyFlowTarget, init func(*NotifyFlowTarget), assign func(*NotifyFlowTarget, *NotifyTarget)) error {
	ids := make([]model.InternalID, 0, len(nodes))
	nodeids := make(map[model.InternalID][]*NotifyFlowTarget)
	for i := range nodes {
		fk := nodes[i].NotifyTargetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(notifytarget.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "notify_target_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (nftq *NotifyFlowTargetQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nftq.querySpec()
	_spec.Node.Columns = nftq.ctx.Fields
	if len(nftq.ctx.Fields) > 0 {
		_spec.Unique = nftq.ctx.Unique != nil && *nftq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, nftq.driver, _spec)
}

func (nftq *NotifyFlowTargetQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(notifyflowtarget.Table, notifyflowtarget.Columns, sqlgraph.NewFieldSpec(notifyflowtarget.FieldID, field.TypeInt))
	_spec.From = nftq.sql
	if unique := nftq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if nftq.path != nil {
		_spec.Unique = true
	}
	if fields := nftq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notifyflowtarget.FieldID)
		for i := range fields {
			if fields[i] != notifyflowtarget.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if nftq.withNotifyFlow != nil {
			_spec.Node.AddColumnOnce(notifyflowtarget.FieldNotifyFlowID)
		}
		if nftq.withNotifyTarget != nil {
			_spec.Node.AddColumnOnce(notifyflowtarget.FieldNotifyTargetID)
		}
	}
	if ps := nftq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nftq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nftq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nftq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nftq *NotifyFlowTargetQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nftq.driver.Dialect())
	t1 := builder.Table(notifyflowtarget.Table)
	columns := nftq.ctx.Fields
	if len(columns) == 0 {
		columns = notifyflowtarget.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nftq.sql != nil {
		selector = nftq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nftq.ctx.Unique != nil && *nftq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range nftq.predicates {
		p(selector)
	}
	for _, p := range nftq.order {
		p(selector)
	}
	if offset := nftq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nftq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NotifyFlowTargetGroupBy is the group-by builder for NotifyFlowTarget entities.
type NotifyFlowTargetGroupBy struct {
	selector
	build *NotifyFlowTargetQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nftgb *NotifyFlowTargetGroupBy) Aggregate(fns ...AggregateFunc) *NotifyFlowTargetGroupBy {
	nftgb.fns = append(nftgb.fns, fns...)
	return nftgb
}

// Scan applies the selector query and scans the result into the given value.
func (nftgb *NotifyFlowTargetGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nftgb.build.ctx, ent.OpQueryGroupBy)
	if err := nftgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NotifyFlowTargetQuery, *NotifyFlowTargetGroupBy](ctx, nftgb.build, nftgb, nftgb.build.inters, v)
}

func (nftgb *NotifyFlowTargetGroupBy) sqlScan(ctx context.Context, root *NotifyFlowTargetQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(nftgb.fns))
	for _, fn := range nftgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*nftgb.flds)+len(nftgb.fns))
		for _, f := range *nftgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*nftgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nftgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NotifyFlowTargetSelect is the builder for selecting fields of NotifyFlowTarget entities.
type NotifyFlowTargetSelect struct {
	*NotifyFlowTargetQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nfts *NotifyFlowTargetSelect) Aggregate(fns ...AggregateFunc) *NotifyFlowTargetSelect {
	nfts.fns = append(nfts.fns, fns...)
	return nfts
}

// Scan applies the selector query and scans the result into the given value.
func (nfts *NotifyFlowTargetSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nfts.ctx, ent.OpQuerySelect)
	if err := nfts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NotifyFlowTargetQuery, *NotifyFlowTargetSelect](ctx, nfts.NotifyFlowTargetQuery, nfts, nfts.inters, v)
}

func (nfts *NotifyFlowTargetSelect) sqlScan(ctx context.Context, root *NotifyFlowTargetQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nfts.fns))
	for _, fn := range nfts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nfts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nfts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
