// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/appcategory"
	"github.com/tuihub/librarian/internal/model"
)

// AppCategory is the model entity for the AppCategory schema.
type AppCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID model.InternalID `json:"user_id,omitempty"`
	// VersionNumber holds the value of the "version_number" field.
	VersionNumber uint64 `json:"version_number,omitempty"`
	// VersionDate holds the value of the "version_date" field.
	VersionDate time.Time `json:"version_date,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppCategoryQuery when eager-loading is set.
	Edges        AppCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppCategoryEdges holds the relations/edges for other nodes in the graph.
type AppCategoryEdges struct {
	// App holds the value of the app edge.
	App []*App `json:"app,omitempty"`
	// AppAppCategory holds the value of the app_app_category edge.
	AppAppCategory []*AppAppCategory `json:"app_app_category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading.
func (e AppCategoryEdges) AppOrErr() ([]*App, error) {
	if e.loadedTypes[0] {
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// AppAppCategoryOrErr returns the AppAppCategory value or an error if the edge
// was not loaded in eager-loading.
func (e AppCategoryEdges) AppAppCategoryOrErr() ([]*AppAppCategory, error) {
	if e.loadedTypes[1] {
		return e.AppAppCategory, nil
	}
	return nil, &NotLoadedError{edge: "app_app_category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appcategory.FieldID, appcategory.FieldUserID, appcategory.FieldVersionNumber:
			values[i] = new(sql.NullInt64)
		case appcategory.FieldName:
			values[i] = new(sql.NullString)
		case appcategory.FieldVersionDate, appcategory.FieldUpdatedAt, appcategory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppCategory fields.
func (ac *AppCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appcategory.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ac.ID = model.InternalID(value.Int64)
			}
		case appcategory.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ac.UserID = model.InternalID(value.Int64)
			}
		case appcategory.FieldVersionNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version_number", values[i])
			} else if value.Valid {
				ac.VersionNumber = uint64(value.Int64)
			}
		case appcategory.FieldVersionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field version_date", values[i])
			} else if value.Valid {
				ac.VersionDate = value.Time
			}
		case appcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ac.Name = value.String
			}
		case appcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ac.UpdatedAt = value.Time
			}
		case appcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ac.CreatedAt = value.Time
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppCategory.
// This includes values selected through modifiers, order, etc.
func (ac *AppCategory) Value(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// QueryApp queries the "app" edge of the AppCategory entity.
func (ac *AppCategory) QueryApp() *AppQuery {
	return NewAppCategoryClient(ac.config).QueryApp(ac)
}

// QueryAppAppCategory queries the "app_app_category" edge of the AppCategory entity.
func (ac *AppCategory) QueryAppAppCategory() *AppAppCategoryQuery {
	return NewAppCategoryClient(ac.config).QueryAppAppCategory(ac)
}

// Update returns a builder for updating this AppCategory.
// Note that you need to call AppCategory.Unwrap() before calling this method if this AppCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AppCategory) Update() *AppCategoryUpdateOne {
	return NewAppCategoryClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the AppCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AppCategory) Unwrap() *AppCategory {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppCategory is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AppCategory) String() string {
	var builder strings.Builder
	builder.WriteString("AppCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ac.UserID))
	builder.WriteString(", ")
	builder.WriteString("version_number=")
	builder.WriteString(fmt.Sprintf("%v", ac.VersionNumber))
	builder.WriteString(", ")
	builder.WriteString("version_date=")
	builder.WriteString(ac.VersionDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ac.Name)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ac.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ac.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppCategories is a parsable slice of AppCategory.
type AppCategories []*AppCategory
