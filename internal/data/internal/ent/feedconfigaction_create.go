// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedactionset"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfigaction"
	"github.com/tuihub/librarian/internal/model"
)

// FeedConfigActionCreate is the builder for creating a FeedConfigAction entity.
type FeedConfigActionCreate struct {
	config
	mutation *FeedConfigActionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFeedConfigID sets the "feed_config_id" field.
func (fcac *FeedConfigActionCreate) SetFeedConfigID(mi model.InternalID) *FeedConfigActionCreate {
	fcac.mutation.SetFeedConfigID(mi)
	return fcac
}

// SetFeedActionSetID sets the "feed_action_set_id" field.
func (fcac *FeedConfigActionCreate) SetFeedActionSetID(mi model.InternalID) *FeedConfigActionCreate {
	fcac.mutation.SetFeedActionSetID(mi)
	return fcac
}

// SetIndex sets the "index" field.
func (fcac *FeedConfigActionCreate) SetIndex(i int64) *FeedConfigActionCreate {
	fcac.mutation.SetIndex(i)
	return fcac
}

// SetUpdatedAt sets the "updated_at" field.
func (fcac *FeedConfigActionCreate) SetUpdatedAt(t time.Time) *FeedConfigActionCreate {
	fcac.mutation.SetUpdatedAt(t)
	return fcac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fcac *FeedConfigActionCreate) SetNillableUpdatedAt(t *time.Time) *FeedConfigActionCreate {
	if t != nil {
		fcac.SetUpdatedAt(*t)
	}
	return fcac
}

// SetCreatedAt sets the "created_at" field.
func (fcac *FeedConfigActionCreate) SetCreatedAt(t time.Time) *FeedConfigActionCreate {
	fcac.mutation.SetCreatedAt(t)
	return fcac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcac *FeedConfigActionCreate) SetNillableCreatedAt(t *time.Time) *FeedConfigActionCreate {
	if t != nil {
		fcac.SetCreatedAt(*t)
	}
	return fcac
}

// SetFeedConfig sets the "feed_config" edge to the FeedConfig entity.
func (fcac *FeedConfigActionCreate) SetFeedConfig(f *FeedConfig) *FeedConfigActionCreate {
	return fcac.SetFeedConfigID(f.ID)
}

// SetFeedActionSet sets the "feed_action_set" edge to the FeedActionSet entity.
func (fcac *FeedConfigActionCreate) SetFeedActionSet(f *FeedActionSet) *FeedConfigActionCreate {
	return fcac.SetFeedActionSetID(f.ID)
}

// Mutation returns the FeedConfigActionMutation object of the builder.
func (fcac *FeedConfigActionCreate) Mutation() *FeedConfigActionMutation {
	return fcac.mutation
}

// Save creates the FeedConfigAction in the database.
func (fcac *FeedConfigActionCreate) Save(ctx context.Context) (*FeedConfigAction, error) {
	fcac.defaults()
	return withHooks(ctx, fcac.sqlSave, fcac.mutation, fcac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fcac *FeedConfigActionCreate) SaveX(ctx context.Context) *FeedConfigAction {
	v, err := fcac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcac *FeedConfigActionCreate) Exec(ctx context.Context) error {
	_, err := fcac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcac *FeedConfigActionCreate) ExecX(ctx context.Context) {
	if err := fcac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcac *FeedConfigActionCreate) defaults() {
	if _, ok := fcac.mutation.UpdatedAt(); !ok {
		v := feedconfigaction.DefaultUpdatedAt()
		fcac.mutation.SetUpdatedAt(v)
	}
	if _, ok := fcac.mutation.CreatedAt(); !ok {
		v := feedconfigaction.DefaultCreatedAt()
		fcac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcac *FeedConfigActionCreate) check() error {
	if _, ok := fcac.mutation.FeedConfigID(); !ok {
		return &ValidationError{Name: "feed_config_id", err: errors.New(`ent: missing required field "FeedConfigAction.feed_config_id"`)}
	}
	if _, ok := fcac.mutation.FeedActionSetID(); !ok {
		return &ValidationError{Name: "feed_action_set_id", err: errors.New(`ent: missing required field "FeedConfigAction.feed_action_set_id"`)}
	}
	if _, ok := fcac.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "FeedConfigAction.index"`)}
	}
	if _, ok := fcac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FeedConfigAction.updated_at"`)}
	}
	if _, ok := fcac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FeedConfigAction.created_at"`)}
	}
	if len(fcac.mutation.FeedConfigIDs()) == 0 {
		return &ValidationError{Name: "feed_config", err: errors.New(`ent: missing required edge "FeedConfigAction.feed_config"`)}
	}
	if len(fcac.mutation.FeedActionSetIDs()) == 0 {
		return &ValidationError{Name: "feed_action_set", err: errors.New(`ent: missing required edge "FeedConfigAction.feed_action_set"`)}
	}
	return nil
}

func (fcac *FeedConfigActionCreate) sqlSave(ctx context.Context) (*FeedConfigAction, error) {
	if err := fcac.check(); err != nil {
		return nil, err
	}
	_node, _spec := fcac.createSpec()
	if err := sqlgraph.CreateNode(ctx, fcac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fcac.mutation.id = &_node.ID
	fcac.mutation.done = true
	return _node, nil
}

func (fcac *FeedConfigActionCreate) createSpec() (*FeedConfigAction, *sqlgraph.CreateSpec) {
	var (
		_node = &FeedConfigAction{config: fcac.config}
		_spec = sqlgraph.NewCreateSpec(feedconfigaction.Table, sqlgraph.NewFieldSpec(feedconfigaction.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fcac.conflict
	if value, ok := fcac.mutation.Index(); ok {
		_spec.SetField(feedconfigaction.FieldIndex, field.TypeInt64, value)
		_node.Index = value
	}
	if value, ok := fcac.mutation.UpdatedAt(); ok {
		_spec.SetField(feedconfigaction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fcac.mutation.CreatedAt(); ok {
		_spec.SetField(feedconfigaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := fcac.mutation.FeedConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedconfigaction.FeedConfigTable,
			Columns: []string{feedconfigaction.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeedConfigID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fcac.mutation.FeedActionSetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedconfigaction.FeedActionSetTable,
			Columns: []string{feedconfigaction.FeedActionSetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeedActionSetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeedConfigAction.Create().
//		SetFeedConfigID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedConfigActionUpsert) {
//			SetFeedConfigID(v+v).
//		}).
//		Exec(ctx)
func (fcac *FeedConfigActionCreate) OnConflict(opts ...sql.ConflictOption) *FeedConfigActionUpsertOne {
	fcac.conflict = opts
	return &FeedConfigActionUpsertOne{
		create: fcac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeedConfigAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcac *FeedConfigActionCreate) OnConflictColumns(columns ...string) *FeedConfigActionUpsertOne {
	fcac.conflict = append(fcac.conflict, sql.ConflictColumns(columns...))
	return &FeedConfigActionUpsertOne{
		create: fcac,
	}
}

type (
	// FeedConfigActionUpsertOne is the builder for "upsert"-ing
	//  one FeedConfigAction node.
	FeedConfigActionUpsertOne struct {
		create *FeedConfigActionCreate
	}

	// FeedConfigActionUpsert is the "OnConflict" setter.
	FeedConfigActionUpsert struct {
		*sql.UpdateSet
	}
)

// SetFeedConfigID sets the "feed_config_id" field.
func (u *FeedConfigActionUpsert) SetFeedConfigID(v model.InternalID) *FeedConfigActionUpsert {
	u.Set(feedconfigaction.FieldFeedConfigID, v)
	return u
}

// UpdateFeedConfigID sets the "feed_config_id" field to the value that was provided on create.
func (u *FeedConfigActionUpsert) UpdateFeedConfigID() *FeedConfigActionUpsert {
	u.SetExcluded(feedconfigaction.FieldFeedConfigID)
	return u
}

// SetFeedActionSetID sets the "feed_action_set_id" field.
func (u *FeedConfigActionUpsert) SetFeedActionSetID(v model.InternalID) *FeedConfigActionUpsert {
	u.Set(feedconfigaction.FieldFeedActionSetID, v)
	return u
}

// UpdateFeedActionSetID sets the "feed_action_set_id" field to the value that was provided on create.
func (u *FeedConfigActionUpsert) UpdateFeedActionSetID() *FeedConfigActionUpsert {
	u.SetExcluded(feedconfigaction.FieldFeedActionSetID)
	return u
}

// SetIndex sets the "index" field.
func (u *FeedConfigActionUpsert) SetIndex(v int64) *FeedConfigActionUpsert {
	u.Set(feedconfigaction.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *FeedConfigActionUpsert) UpdateIndex() *FeedConfigActionUpsert {
	u.SetExcluded(feedconfigaction.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *FeedConfigActionUpsert) AddIndex(v int64) *FeedConfigActionUpsert {
	u.Add(feedconfigaction.FieldIndex, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedConfigActionUpsert) SetUpdatedAt(v time.Time) *FeedConfigActionUpsert {
	u.Set(feedconfigaction.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedConfigActionUpsert) UpdateUpdatedAt() *FeedConfigActionUpsert {
	u.SetExcluded(feedconfigaction.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedConfigActionUpsert) SetCreatedAt(v time.Time) *FeedConfigActionUpsert {
	u.Set(feedconfigaction.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedConfigActionUpsert) UpdateCreatedAt() *FeedConfigActionUpsert {
	u.SetExcluded(feedconfigaction.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FeedConfigAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FeedConfigActionUpsertOne) UpdateNewValues() *FeedConfigActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FeedConfigAction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FeedConfigActionUpsertOne) Ignore() *FeedConfigActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedConfigActionUpsertOne) DoNothing() *FeedConfigActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedConfigActionCreate.OnConflict
// documentation for more info.
func (u *FeedConfigActionUpsertOne) Update(set func(*FeedConfigActionUpsert)) *FeedConfigActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedConfigActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetFeedConfigID sets the "feed_config_id" field.
func (u *FeedConfigActionUpsertOne) SetFeedConfigID(v model.InternalID) *FeedConfigActionUpsertOne {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.SetFeedConfigID(v)
	})
}

// UpdateFeedConfigID sets the "feed_config_id" field to the value that was provided on create.
func (u *FeedConfigActionUpsertOne) UpdateFeedConfigID() *FeedConfigActionUpsertOne {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.UpdateFeedConfigID()
	})
}

// SetFeedActionSetID sets the "feed_action_set_id" field.
func (u *FeedConfigActionUpsertOne) SetFeedActionSetID(v model.InternalID) *FeedConfigActionUpsertOne {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.SetFeedActionSetID(v)
	})
}

// UpdateFeedActionSetID sets the "feed_action_set_id" field to the value that was provided on create.
func (u *FeedConfigActionUpsertOne) UpdateFeedActionSetID() *FeedConfigActionUpsertOne {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.UpdateFeedActionSetID()
	})
}

// SetIndex sets the "index" field.
func (u *FeedConfigActionUpsertOne) SetIndex(v int64) *FeedConfigActionUpsertOne {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *FeedConfigActionUpsertOne) AddIndex(v int64) *FeedConfigActionUpsertOne {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *FeedConfigActionUpsertOne) UpdateIndex() *FeedConfigActionUpsertOne {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.UpdateIndex()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedConfigActionUpsertOne) SetUpdatedAt(v time.Time) *FeedConfigActionUpsertOne {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedConfigActionUpsertOne) UpdateUpdatedAt() *FeedConfigActionUpsertOne {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedConfigActionUpsertOne) SetCreatedAt(v time.Time) *FeedConfigActionUpsertOne {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedConfigActionUpsertOne) UpdateCreatedAt() *FeedConfigActionUpsertOne {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *FeedConfigActionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedConfigActionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedConfigActionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeedConfigActionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeedConfigActionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeedConfigActionCreateBulk is the builder for creating many FeedConfigAction entities in bulk.
type FeedConfigActionCreateBulk struct {
	config
	err      error
	builders []*FeedConfigActionCreate
	conflict []sql.ConflictOption
}

// Save creates the FeedConfigAction entities in the database.
func (fcacb *FeedConfigActionCreateBulk) Save(ctx context.Context) ([]*FeedConfigAction, error) {
	if fcacb.err != nil {
		return nil, fcacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcacb.builders))
	nodes := make([]*FeedConfigAction, len(fcacb.builders))
	mutators := make([]Mutator, len(fcacb.builders))
	for i := range fcacb.builders {
		func(i int, root context.Context) {
			builder := fcacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedConfigActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcacb *FeedConfigActionCreateBulk) SaveX(ctx context.Context) []*FeedConfigAction {
	v, err := fcacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcacb *FeedConfigActionCreateBulk) Exec(ctx context.Context) error {
	_, err := fcacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcacb *FeedConfigActionCreateBulk) ExecX(ctx context.Context) {
	if err := fcacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeedConfigAction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedConfigActionUpsert) {
//			SetFeedConfigID(v+v).
//		}).
//		Exec(ctx)
func (fcacb *FeedConfigActionCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeedConfigActionUpsertBulk {
	fcacb.conflict = opts
	return &FeedConfigActionUpsertBulk{
		create: fcacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeedConfigAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcacb *FeedConfigActionCreateBulk) OnConflictColumns(columns ...string) *FeedConfigActionUpsertBulk {
	fcacb.conflict = append(fcacb.conflict, sql.ConflictColumns(columns...))
	return &FeedConfigActionUpsertBulk{
		create: fcacb,
	}
}

// FeedConfigActionUpsertBulk is the builder for "upsert"-ing
// a bulk of FeedConfigAction nodes.
type FeedConfigActionUpsertBulk struct {
	create *FeedConfigActionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FeedConfigAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FeedConfigActionUpsertBulk) UpdateNewValues() *FeedConfigActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FeedConfigAction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FeedConfigActionUpsertBulk) Ignore() *FeedConfigActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedConfigActionUpsertBulk) DoNothing() *FeedConfigActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedConfigActionCreateBulk.OnConflict
// documentation for more info.
func (u *FeedConfigActionUpsertBulk) Update(set func(*FeedConfigActionUpsert)) *FeedConfigActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedConfigActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetFeedConfigID sets the "feed_config_id" field.
func (u *FeedConfigActionUpsertBulk) SetFeedConfigID(v model.InternalID) *FeedConfigActionUpsertBulk {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.SetFeedConfigID(v)
	})
}

// UpdateFeedConfigID sets the "feed_config_id" field to the value that was provided on create.
func (u *FeedConfigActionUpsertBulk) UpdateFeedConfigID() *FeedConfigActionUpsertBulk {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.UpdateFeedConfigID()
	})
}

// SetFeedActionSetID sets the "feed_action_set_id" field.
func (u *FeedConfigActionUpsertBulk) SetFeedActionSetID(v model.InternalID) *FeedConfigActionUpsertBulk {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.SetFeedActionSetID(v)
	})
}

// UpdateFeedActionSetID sets the "feed_action_set_id" field to the value that was provided on create.
func (u *FeedConfigActionUpsertBulk) UpdateFeedActionSetID() *FeedConfigActionUpsertBulk {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.UpdateFeedActionSetID()
	})
}

// SetIndex sets the "index" field.
func (u *FeedConfigActionUpsertBulk) SetIndex(v int64) *FeedConfigActionUpsertBulk {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *FeedConfigActionUpsertBulk) AddIndex(v int64) *FeedConfigActionUpsertBulk {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *FeedConfigActionUpsertBulk) UpdateIndex() *FeedConfigActionUpsertBulk {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.UpdateIndex()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedConfigActionUpsertBulk) SetUpdatedAt(v time.Time) *FeedConfigActionUpsertBulk {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedConfigActionUpsertBulk) UpdateUpdatedAt() *FeedConfigActionUpsertBulk {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedConfigActionUpsertBulk) SetCreatedAt(v time.Time) *FeedConfigActionUpsertBulk {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedConfigActionUpsertBulk) UpdateCreatedAt() *FeedConfigActionUpsertBulk {
	return u.Update(func(s *FeedConfigActionUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *FeedConfigActionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FeedConfigActionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedConfigActionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedConfigActionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
