// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/portercontext"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// PorterContextCreate is the builder for creating a PorterContext entity.
type PorterContextCreate struct {
	config
	mutation *PorterContextMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGlobalName sets the "global_name" field.
func (pcc *PorterContextCreate) SetGlobalName(s string) *PorterContextCreate {
	pcc.mutation.SetGlobalName(s)
	return pcc
}

// SetRegion sets the "region" field.
func (pcc *PorterContextCreate) SetRegion(s string) *PorterContextCreate {
	pcc.mutation.SetRegion(s)
	return pcc
}

// SetContextJSON sets the "context_json" field.
func (pcc *PorterContextCreate) SetContextJSON(s string) *PorterContextCreate {
	pcc.mutation.SetContextJSON(s)
	return pcc
}

// SetName sets the "name" field.
func (pcc *PorterContextCreate) SetName(s string) *PorterContextCreate {
	pcc.mutation.SetName(s)
	return pcc
}

// SetDescription sets the "description" field.
func (pcc *PorterContextCreate) SetDescription(s string) *PorterContextCreate {
	pcc.mutation.SetDescription(s)
	return pcc
}

// SetStatus sets the "status" field.
func (pcc *PorterContextCreate) SetStatus(po portercontext.Status) *PorterContextCreate {
	pcc.mutation.SetStatus(po)
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *PorterContextCreate) SetUpdatedAt(t time.Time) *PorterContextCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *PorterContextCreate) SetNillableUpdatedAt(t *time.Time) *PorterContextCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetCreatedAt sets the "created_at" field.
func (pcc *PorterContextCreate) SetCreatedAt(t time.Time) *PorterContextCreate {
	pcc.mutation.SetCreatedAt(t)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *PorterContextCreate) SetNillableCreatedAt(t *time.Time) *PorterContextCreate {
	if t != nil {
		pcc.SetCreatedAt(*t)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *PorterContextCreate) SetID(mi model.InternalID) *PorterContextCreate {
	pcc.mutation.SetID(mi)
	return pcc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pcc *PorterContextCreate) SetOwnerID(id model.InternalID) *PorterContextCreate {
	pcc.mutation.SetOwnerID(id)
	return pcc
}

// SetOwner sets the "owner" edge to the User entity.
func (pcc *PorterContextCreate) SetOwner(u *User) *PorterContextCreate {
	return pcc.SetOwnerID(u.ID)
}

// Mutation returns the PorterContextMutation object of the builder.
func (pcc *PorterContextCreate) Mutation() *PorterContextMutation {
	return pcc.mutation
}

// Save creates the PorterContext in the database.
func (pcc *PorterContextCreate) Save(ctx context.Context) (*PorterContext, error) {
	pcc.defaults()
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PorterContextCreate) SaveX(ctx context.Context) *PorterContext {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PorterContextCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PorterContextCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PorterContextCreate) defaults() {
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		v := portercontext.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		v := portercontext.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PorterContextCreate) check() error {
	if _, ok := pcc.mutation.GlobalName(); !ok {
		return &ValidationError{Name: "global_name", err: errors.New(`ent: missing required field "PorterContext.global_name"`)}
	}
	if _, ok := pcc.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "PorterContext.region"`)}
	}
	if _, ok := pcc.mutation.ContextJSON(); !ok {
		return &ValidationError{Name: "context_json", err: errors.New(`ent: missing required field "PorterContext.context_json"`)}
	}
	if _, ok := pcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PorterContext.name"`)}
	}
	if _, ok := pcc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "PorterContext.description"`)}
	}
	if _, ok := pcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PorterContext.status"`)}
	}
	if v, ok := pcc.mutation.Status(); ok {
		if err := portercontext.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PorterContext.status": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PorterContext.updated_at"`)}
	}
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PorterContext.created_at"`)}
	}
	if len(pcc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "PorterContext.owner"`)}
	}
	return nil
}

func (pcc *PorterContextCreate) sqlSave(ctx context.Context) (*PorterContext, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PorterContextCreate) createSpec() (*PorterContext, *sqlgraph.CreateSpec) {
	var (
		_node = &PorterContext{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(portercontext.Table, sqlgraph.NewFieldSpec(portercontext.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = pcc.conflict
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pcc.mutation.GlobalName(); ok {
		_spec.SetField(portercontext.FieldGlobalName, field.TypeString, value)
		_node.GlobalName = value
	}
	if value, ok := pcc.mutation.Region(); ok {
		_spec.SetField(portercontext.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := pcc.mutation.ContextJSON(); ok {
		_spec.SetField(portercontext.FieldContextJSON, field.TypeString, value)
		_node.ContextJSON = value
	}
	if value, ok := pcc.mutation.Name(); ok {
		_spec.SetField(portercontext.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pcc.mutation.Description(); ok {
		_spec.SetField(portercontext.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pcc.mutation.Status(); ok {
		_spec.SetField(portercontext.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(portercontext.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(portercontext.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := pcc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portercontext.OwnerTable,
			Columns: []string{portercontext.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_porter_context = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PorterContext.Create().
//		SetGlobalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PorterContextUpsert) {
//			SetGlobalName(v+v).
//		}).
//		Exec(ctx)
func (pcc *PorterContextCreate) OnConflict(opts ...sql.ConflictOption) *PorterContextUpsertOne {
	pcc.conflict = opts
	return &PorterContextUpsertOne{
		create: pcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PorterContext.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcc *PorterContextCreate) OnConflictColumns(columns ...string) *PorterContextUpsertOne {
	pcc.conflict = append(pcc.conflict, sql.ConflictColumns(columns...))
	return &PorterContextUpsertOne{
		create: pcc,
	}
}

type (
	// PorterContextUpsertOne is the builder for "upsert"-ing
	//  one PorterContext node.
	PorterContextUpsertOne struct {
		create *PorterContextCreate
	}

	// PorterContextUpsert is the "OnConflict" setter.
	PorterContextUpsert struct {
		*sql.UpdateSet
	}
)

// SetGlobalName sets the "global_name" field.
func (u *PorterContextUpsert) SetGlobalName(v string) *PorterContextUpsert {
	u.Set(portercontext.FieldGlobalName, v)
	return u
}

// UpdateGlobalName sets the "global_name" field to the value that was provided on create.
func (u *PorterContextUpsert) UpdateGlobalName() *PorterContextUpsert {
	u.SetExcluded(portercontext.FieldGlobalName)
	return u
}

// SetRegion sets the "region" field.
func (u *PorterContextUpsert) SetRegion(v string) *PorterContextUpsert {
	u.Set(portercontext.FieldRegion, v)
	return u
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *PorterContextUpsert) UpdateRegion() *PorterContextUpsert {
	u.SetExcluded(portercontext.FieldRegion)
	return u
}

// SetContextJSON sets the "context_json" field.
func (u *PorterContextUpsert) SetContextJSON(v string) *PorterContextUpsert {
	u.Set(portercontext.FieldContextJSON, v)
	return u
}

// UpdateContextJSON sets the "context_json" field to the value that was provided on create.
func (u *PorterContextUpsert) UpdateContextJSON() *PorterContextUpsert {
	u.SetExcluded(portercontext.FieldContextJSON)
	return u
}

// SetName sets the "name" field.
func (u *PorterContextUpsert) SetName(v string) *PorterContextUpsert {
	u.Set(portercontext.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PorterContextUpsert) UpdateName() *PorterContextUpsert {
	u.SetExcluded(portercontext.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *PorterContextUpsert) SetDescription(v string) *PorterContextUpsert {
	u.Set(portercontext.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PorterContextUpsert) UpdateDescription() *PorterContextUpsert {
	u.SetExcluded(portercontext.FieldDescription)
	return u
}

// SetStatus sets the "status" field.
func (u *PorterContextUpsert) SetStatus(v portercontext.Status) *PorterContextUpsert {
	u.Set(portercontext.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PorterContextUpsert) UpdateStatus() *PorterContextUpsert {
	u.SetExcluded(portercontext.FieldStatus)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PorterContextUpsert) SetUpdatedAt(v time.Time) *PorterContextUpsert {
	u.Set(portercontext.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PorterContextUpsert) UpdateUpdatedAt() *PorterContextUpsert {
	u.SetExcluded(portercontext.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PorterContextUpsert) SetCreatedAt(v time.Time) *PorterContextUpsert {
	u.Set(portercontext.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PorterContextUpsert) UpdateCreatedAt() *PorterContextUpsert {
	u.SetExcluded(portercontext.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PorterContext.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(portercontext.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PorterContextUpsertOne) UpdateNewValues() *PorterContextUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(portercontext.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PorterContext.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PorterContextUpsertOne) Ignore() *PorterContextUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PorterContextUpsertOne) DoNothing() *PorterContextUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PorterContextCreate.OnConflict
// documentation for more info.
func (u *PorterContextUpsertOne) Update(set func(*PorterContextUpsert)) *PorterContextUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PorterContextUpsert{UpdateSet: update})
	}))
	return u
}

// SetGlobalName sets the "global_name" field.
func (u *PorterContextUpsertOne) SetGlobalName(v string) *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetGlobalName(v)
	})
}

// UpdateGlobalName sets the "global_name" field to the value that was provided on create.
func (u *PorterContextUpsertOne) UpdateGlobalName() *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateGlobalName()
	})
}

// SetRegion sets the "region" field.
func (u *PorterContextUpsertOne) SetRegion(v string) *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *PorterContextUpsertOne) UpdateRegion() *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateRegion()
	})
}

// SetContextJSON sets the "context_json" field.
func (u *PorterContextUpsertOne) SetContextJSON(v string) *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetContextJSON(v)
	})
}

// UpdateContextJSON sets the "context_json" field to the value that was provided on create.
func (u *PorterContextUpsertOne) UpdateContextJSON() *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateContextJSON()
	})
}

// SetName sets the "name" field.
func (u *PorterContextUpsertOne) SetName(v string) *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PorterContextUpsertOne) UpdateName() *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PorterContextUpsertOne) SetDescription(v string) *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PorterContextUpsertOne) UpdateDescription() *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateDescription()
	})
}

// SetStatus sets the "status" field.
func (u *PorterContextUpsertOne) SetStatus(v portercontext.Status) *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PorterContextUpsertOne) UpdateStatus() *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateStatus()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PorterContextUpsertOne) SetUpdatedAt(v time.Time) *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PorterContextUpsertOne) UpdateUpdatedAt() *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PorterContextUpsertOne) SetCreatedAt(v time.Time) *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PorterContextUpsertOne) UpdateCreatedAt() *PorterContextUpsertOne {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *PorterContextUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PorterContextCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PorterContextUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PorterContextUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PorterContextUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PorterContextCreateBulk is the builder for creating many PorterContext entities in bulk.
type PorterContextCreateBulk struct {
	config
	err      error
	builders []*PorterContextCreate
	conflict []sql.ConflictOption
}

// Save creates the PorterContext entities in the database.
func (pccb *PorterContextCreateBulk) Save(ctx context.Context) ([]*PorterContext, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PorterContext, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PorterContextMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PorterContextCreateBulk) SaveX(ctx context.Context) []*PorterContext {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PorterContextCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PorterContextCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PorterContext.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PorterContextUpsert) {
//			SetGlobalName(v+v).
//		}).
//		Exec(ctx)
func (pccb *PorterContextCreateBulk) OnConflict(opts ...sql.ConflictOption) *PorterContextUpsertBulk {
	pccb.conflict = opts
	return &PorterContextUpsertBulk{
		create: pccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PorterContext.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pccb *PorterContextCreateBulk) OnConflictColumns(columns ...string) *PorterContextUpsertBulk {
	pccb.conflict = append(pccb.conflict, sql.ConflictColumns(columns...))
	return &PorterContextUpsertBulk{
		create: pccb,
	}
}

// PorterContextUpsertBulk is the builder for "upsert"-ing
// a bulk of PorterContext nodes.
type PorterContextUpsertBulk struct {
	create *PorterContextCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PorterContext.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(portercontext.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PorterContextUpsertBulk) UpdateNewValues() *PorterContextUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(portercontext.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PorterContext.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PorterContextUpsertBulk) Ignore() *PorterContextUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PorterContextUpsertBulk) DoNothing() *PorterContextUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PorterContextCreateBulk.OnConflict
// documentation for more info.
func (u *PorterContextUpsertBulk) Update(set func(*PorterContextUpsert)) *PorterContextUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PorterContextUpsert{UpdateSet: update})
	}))
	return u
}

// SetGlobalName sets the "global_name" field.
func (u *PorterContextUpsertBulk) SetGlobalName(v string) *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetGlobalName(v)
	})
}

// UpdateGlobalName sets the "global_name" field to the value that was provided on create.
func (u *PorterContextUpsertBulk) UpdateGlobalName() *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateGlobalName()
	})
}

// SetRegion sets the "region" field.
func (u *PorterContextUpsertBulk) SetRegion(v string) *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *PorterContextUpsertBulk) UpdateRegion() *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateRegion()
	})
}

// SetContextJSON sets the "context_json" field.
func (u *PorterContextUpsertBulk) SetContextJSON(v string) *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetContextJSON(v)
	})
}

// UpdateContextJSON sets the "context_json" field to the value that was provided on create.
func (u *PorterContextUpsertBulk) UpdateContextJSON() *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateContextJSON()
	})
}

// SetName sets the "name" field.
func (u *PorterContextUpsertBulk) SetName(v string) *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PorterContextUpsertBulk) UpdateName() *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PorterContextUpsertBulk) SetDescription(v string) *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PorterContextUpsertBulk) UpdateDescription() *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateDescription()
	})
}

// SetStatus sets the "status" field.
func (u *PorterContextUpsertBulk) SetStatus(v portercontext.Status) *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PorterContextUpsertBulk) UpdateStatus() *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateStatus()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PorterContextUpsertBulk) SetUpdatedAt(v time.Time) *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PorterContextUpsertBulk) UpdateUpdatedAt() *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PorterContextUpsertBulk) SetCreatedAt(v time.Time) *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PorterContextUpsertBulk) UpdateCreatedAt() *PorterContextUpsertBulk {
	return u.Update(func(s *PorterContextUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *PorterContextUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PorterContextCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PorterContextCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PorterContextUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
