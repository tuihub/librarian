// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/systemnotification"
	"github.com/tuihub/librarian/internal/model"
)

// SystemNotificationUpdate is the builder for updating SystemNotification entities.
type SystemNotificationUpdate struct {
	config
	hooks    []Hook
	mutation *SystemNotificationMutation
}

// Where appends a list predicates to the SystemNotificationUpdate builder.
func (snu *SystemNotificationUpdate) Where(ps ...predicate.SystemNotification) *SystemNotificationUpdate {
	snu.mutation.Where(ps...)
	return snu
}

// SetUserID sets the "user_id" field.
func (snu *SystemNotificationUpdate) SetUserID(mi model.InternalID) *SystemNotificationUpdate {
	snu.mutation.ResetUserID()
	snu.mutation.SetUserID(mi)
	return snu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (snu *SystemNotificationUpdate) SetNillableUserID(mi *model.InternalID) *SystemNotificationUpdate {
	if mi != nil {
		snu.SetUserID(*mi)
	}
	return snu
}

// AddUserID adds mi to the "user_id" field.
func (snu *SystemNotificationUpdate) AddUserID(mi model.InternalID) *SystemNotificationUpdate {
	snu.mutation.AddUserID(mi)
	return snu
}

// ClearUserID clears the value of the "user_id" field.
func (snu *SystemNotificationUpdate) ClearUserID() *SystemNotificationUpdate {
	snu.mutation.ClearUserID()
	return snu
}

// SetType sets the "type" field.
func (snu *SystemNotificationUpdate) SetType(s systemnotification.Type) *SystemNotificationUpdate {
	snu.mutation.SetType(s)
	return snu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (snu *SystemNotificationUpdate) SetNillableType(s *systemnotification.Type) *SystemNotificationUpdate {
	if s != nil {
		snu.SetType(*s)
	}
	return snu
}

// SetLevel sets the "level" field.
func (snu *SystemNotificationUpdate) SetLevel(s systemnotification.Level) *SystemNotificationUpdate {
	snu.mutation.SetLevel(s)
	return snu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (snu *SystemNotificationUpdate) SetNillableLevel(s *systemnotification.Level) *SystemNotificationUpdate {
	if s != nil {
		snu.SetLevel(*s)
	}
	return snu
}

// SetStatus sets the "status" field.
func (snu *SystemNotificationUpdate) SetStatus(s systemnotification.Status) *SystemNotificationUpdate {
	snu.mutation.SetStatus(s)
	return snu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (snu *SystemNotificationUpdate) SetNillableStatus(s *systemnotification.Status) *SystemNotificationUpdate {
	if s != nil {
		snu.SetStatus(*s)
	}
	return snu
}

// SetTitle sets the "title" field.
func (snu *SystemNotificationUpdate) SetTitle(s string) *SystemNotificationUpdate {
	snu.mutation.SetTitle(s)
	return snu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (snu *SystemNotificationUpdate) SetNillableTitle(s *string) *SystemNotificationUpdate {
	if s != nil {
		snu.SetTitle(*s)
	}
	return snu
}

// SetContent sets the "content" field.
func (snu *SystemNotificationUpdate) SetContent(s string) *SystemNotificationUpdate {
	snu.mutation.SetContent(s)
	return snu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (snu *SystemNotificationUpdate) SetNillableContent(s *string) *SystemNotificationUpdate {
	if s != nil {
		snu.SetContent(*s)
	}
	return snu
}

// SetUpdatedAt sets the "updated_at" field.
func (snu *SystemNotificationUpdate) SetUpdatedAt(t time.Time) *SystemNotificationUpdate {
	snu.mutation.SetUpdatedAt(t)
	return snu
}

// SetCreatedAt sets the "created_at" field.
func (snu *SystemNotificationUpdate) SetCreatedAt(t time.Time) *SystemNotificationUpdate {
	snu.mutation.SetCreatedAt(t)
	return snu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (snu *SystemNotificationUpdate) SetNillableCreatedAt(t *time.Time) *SystemNotificationUpdate {
	if t != nil {
		snu.SetCreatedAt(*t)
	}
	return snu
}

// Mutation returns the SystemNotificationMutation object of the builder.
func (snu *SystemNotificationUpdate) Mutation() *SystemNotificationMutation {
	return snu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (snu *SystemNotificationUpdate) Save(ctx context.Context) (int, error) {
	snu.defaults()
	return withHooks(ctx, snu.sqlSave, snu.mutation, snu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snu *SystemNotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := snu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (snu *SystemNotificationUpdate) Exec(ctx context.Context) error {
	_, err := snu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snu *SystemNotificationUpdate) ExecX(ctx context.Context) {
	if err := snu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snu *SystemNotificationUpdate) defaults() {
	if _, ok := snu.mutation.UpdatedAt(); !ok {
		v := systemnotification.UpdateDefaultUpdatedAt()
		snu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snu *SystemNotificationUpdate) check() error {
	if v, ok := snu.mutation.GetType(); ok {
		if err := systemnotification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemNotification.type": %w`, err)}
		}
	}
	if v, ok := snu.mutation.Level(); ok {
		if err := systemnotification.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "SystemNotification.level": %w`, err)}
		}
	}
	if v, ok := snu.mutation.Status(); ok {
		if err := systemnotification.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemNotification.status": %w`, err)}
		}
	}
	return nil
}

func (snu *SystemNotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := snu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemnotification.Table, systemnotification.Columns, sqlgraph.NewFieldSpec(systemnotification.FieldID, field.TypeInt64))
	if ps := snu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snu.mutation.UserID(); ok {
		_spec.SetField(systemnotification.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := snu.mutation.AddedUserID(); ok {
		_spec.AddField(systemnotification.FieldUserID, field.TypeInt64, value)
	}
	if snu.mutation.UserIDCleared() {
		_spec.ClearField(systemnotification.FieldUserID, field.TypeInt64)
	}
	if value, ok := snu.mutation.GetType(); ok {
		_spec.SetField(systemnotification.FieldType, field.TypeEnum, value)
	}
	if value, ok := snu.mutation.Level(); ok {
		_spec.SetField(systemnotification.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := snu.mutation.Status(); ok {
		_spec.SetField(systemnotification.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := snu.mutation.Title(); ok {
		_spec.SetField(systemnotification.FieldTitle, field.TypeString, value)
	}
	if value, ok := snu.mutation.Content(); ok {
		_spec.SetField(systemnotification.FieldContent, field.TypeString, value)
	}
	if value, ok := snu.mutation.UpdatedAt(); ok {
		_spec.SetField(systemnotification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := snu.mutation.CreatedAt(); ok {
		_spec.SetField(systemnotification.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, snu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemnotification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	snu.mutation.done = true
	return n, nil
}

// SystemNotificationUpdateOne is the builder for updating a single SystemNotification entity.
type SystemNotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemNotificationMutation
}

// SetUserID sets the "user_id" field.
func (snuo *SystemNotificationUpdateOne) SetUserID(mi model.InternalID) *SystemNotificationUpdateOne {
	snuo.mutation.ResetUserID()
	snuo.mutation.SetUserID(mi)
	return snuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (snuo *SystemNotificationUpdateOne) SetNillableUserID(mi *model.InternalID) *SystemNotificationUpdateOne {
	if mi != nil {
		snuo.SetUserID(*mi)
	}
	return snuo
}

// AddUserID adds mi to the "user_id" field.
func (snuo *SystemNotificationUpdateOne) AddUserID(mi model.InternalID) *SystemNotificationUpdateOne {
	snuo.mutation.AddUserID(mi)
	return snuo
}

// ClearUserID clears the value of the "user_id" field.
func (snuo *SystemNotificationUpdateOne) ClearUserID() *SystemNotificationUpdateOne {
	snuo.mutation.ClearUserID()
	return snuo
}

// SetType sets the "type" field.
func (snuo *SystemNotificationUpdateOne) SetType(s systemnotification.Type) *SystemNotificationUpdateOne {
	snuo.mutation.SetType(s)
	return snuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (snuo *SystemNotificationUpdateOne) SetNillableType(s *systemnotification.Type) *SystemNotificationUpdateOne {
	if s != nil {
		snuo.SetType(*s)
	}
	return snuo
}

// SetLevel sets the "level" field.
func (snuo *SystemNotificationUpdateOne) SetLevel(s systemnotification.Level) *SystemNotificationUpdateOne {
	snuo.mutation.SetLevel(s)
	return snuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (snuo *SystemNotificationUpdateOne) SetNillableLevel(s *systemnotification.Level) *SystemNotificationUpdateOne {
	if s != nil {
		snuo.SetLevel(*s)
	}
	return snuo
}

// SetStatus sets the "status" field.
func (snuo *SystemNotificationUpdateOne) SetStatus(s systemnotification.Status) *SystemNotificationUpdateOne {
	snuo.mutation.SetStatus(s)
	return snuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (snuo *SystemNotificationUpdateOne) SetNillableStatus(s *systemnotification.Status) *SystemNotificationUpdateOne {
	if s != nil {
		snuo.SetStatus(*s)
	}
	return snuo
}

// SetTitle sets the "title" field.
func (snuo *SystemNotificationUpdateOne) SetTitle(s string) *SystemNotificationUpdateOne {
	snuo.mutation.SetTitle(s)
	return snuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (snuo *SystemNotificationUpdateOne) SetNillableTitle(s *string) *SystemNotificationUpdateOne {
	if s != nil {
		snuo.SetTitle(*s)
	}
	return snuo
}

// SetContent sets the "content" field.
func (snuo *SystemNotificationUpdateOne) SetContent(s string) *SystemNotificationUpdateOne {
	snuo.mutation.SetContent(s)
	return snuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (snuo *SystemNotificationUpdateOne) SetNillableContent(s *string) *SystemNotificationUpdateOne {
	if s != nil {
		snuo.SetContent(*s)
	}
	return snuo
}

// SetUpdatedAt sets the "updated_at" field.
func (snuo *SystemNotificationUpdateOne) SetUpdatedAt(t time.Time) *SystemNotificationUpdateOne {
	snuo.mutation.SetUpdatedAt(t)
	return snuo
}

// SetCreatedAt sets the "created_at" field.
func (snuo *SystemNotificationUpdateOne) SetCreatedAt(t time.Time) *SystemNotificationUpdateOne {
	snuo.mutation.SetCreatedAt(t)
	return snuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (snuo *SystemNotificationUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemNotificationUpdateOne {
	if t != nil {
		snuo.SetCreatedAt(*t)
	}
	return snuo
}

// Mutation returns the SystemNotificationMutation object of the builder.
func (snuo *SystemNotificationUpdateOne) Mutation() *SystemNotificationMutation {
	return snuo.mutation
}

// Where appends a list predicates to the SystemNotificationUpdate builder.
func (snuo *SystemNotificationUpdateOne) Where(ps ...predicate.SystemNotification) *SystemNotificationUpdateOne {
	snuo.mutation.Where(ps...)
	return snuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (snuo *SystemNotificationUpdateOne) Select(field string, fields ...string) *SystemNotificationUpdateOne {
	snuo.fields = append([]string{field}, fields...)
	return snuo
}

// Save executes the query and returns the updated SystemNotification entity.
func (snuo *SystemNotificationUpdateOne) Save(ctx context.Context) (*SystemNotification, error) {
	snuo.defaults()
	return withHooks(ctx, snuo.sqlSave, snuo.mutation, snuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snuo *SystemNotificationUpdateOne) SaveX(ctx context.Context) *SystemNotification {
	node, err := snuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (snuo *SystemNotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := snuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snuo *SystemNotificationUpdateOne) ExecX(ctx context.Context) {
	if err := snuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snuo *SystemNotificationUpdateOne) defaults() {
	if _, ok := snuo.mutation.UpdatedAt(); !ok {
		v := systemnotification.UpdateDefaultUpdatedAt()
		snuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snuo *SystemNotificationUpdateOne) check() error {
	if v, ok := snuo.mutation.GetType(); ok {
		if err := systemnotification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemNotification.type": %w`, err)}
		}
	}
	if v, ok := snuo.mutation.Level(); ok {
		if err := systemnotification.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "SystemNotification.level": %w`, err)}
		}
	}
	if v, ok := snuo.mutation.Status(); ok {
		if err := systemnotification.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemNotification.status": %w`, err)}
		}
	}
	return nil
}

func (snuo *SystemNotificationUpdateOne) sqlSave(ctx context.Context) (_node *SystemNotification, err error) {
	if err := snuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemnotification.Table, systemnotification.Columns, sqlgraph.NewFieldSpec(systemnotification.FieldID, field.TypeInt64))
	id, ok := snuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemNotification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := snuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemnotification.FieldID)
		for _, f := range fields {
			if !systemnotification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemnotification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := snuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snuo.mutation.UserID(); ok {
		_spec.SetField(systemnotification.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := snuo.mutation.AddedUserID(); ok {
		_spec.AddField(systemnotification.FieldUserID, field.TypeInt64, value)
	}
	if snuo.mutation.UserIDCleared() {
		_spec.ClearField(systemnotification.FieldUserID, field.TypeInt64)
	}
	if value, ok := snuo.mutation.GetType(); ok {
		_spec.SetField(systemnotification.FieldType, field.TypeEnum, value)
	}
	if value, ok := snuo.mutation.Level(); ok {
		_spec.SetField(systemnotification.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := snuo.mutation.Status(); ok {
		_spec.SetField(systemnotification.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := snuo.mutation.Title(); ok {
		_spec.SetField(systemnotification.FieldTitle, field.TypeString, value)
	}
	if value, ok := snuo.mutation.Content(); ok {
		_spec.SetField(systemnotification.FieldContent, field.TypeString, value)
	}
	if value, ok := snuo.mutation.UpdatedAt(); ok {
		_spec.SetField(systemnotification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := snuo.mutation.CreatedAt(); ok {
		_spec.SetField(systemnotification.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &SystemNotification{config: snuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, snuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemnotification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	snuo.mutation.done = true
	return _node, nil
}
