// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditemcollection"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
)

// FeedItemCollectionDelete is the builder for deleting a FeedItemCollection entity.
type FeedItemCollectionDelete struct {
	config
	hooks    []Hook
	mutation *FeedItemCollectionMutation
}

// Where appends a list predicates to the FeedItemCollectionDelete builder.
func (ficd *FeedItemCollectionDelete) Where(ps ...predicate.FeedItemCollection) *FeedItemCollectionDelete {
	ficd.mutation.Where(ps...)
	return ficd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ficd *FeedItemCollectionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ficd.sqlExec, ficd.mutation, ficd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ficd *FeedItemCollectionDelete) ExecX(ctx context.Context) int {
	n, err := ficd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ficd *FeedItemCollectionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(feeditemcollection.Table, sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64))
	if ps := ficd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ficd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ficd.mutation.done = true
	return affected, err
}

// FeedItemCollectionDeleteOne is the builder for deleting a single FeedItemCollection entity.
type FeedItemCollectionDeleteOne struct {
	ficd *FeedItemCollectionDelete
}

// Where appends a list predicates to the FeedItemCollectionDelete builder.
func (ficdo *FeedItemCollectionDeleteOne) Where(ps ...predicate.FeedItemCollection) *FeedItemCollectionDeleteOne {
	ficdo.ficd.mutation.Where(ps...)
	return ficdo
}

// Exec executes the deletion query.
func (ficdo *FeedItemCollectionDeleteOne) Exec(ctx context.Context) error {
	n, err := ficdo.ficd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{feeditemcollection.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ficdo *FeedItemCollectionDeleteOne) ExecX(ctx context.Context) {
	if err := ficdo.Exec(ctx); err != nil {
		panic(err)
	}
}
