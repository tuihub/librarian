// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflow"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflowsource"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflowtarget"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifysource"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifytarget"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// NotifyFlowUpdate is the builder for updating NotifyFlow entities.
type NotifyFlowUpdate struct {
	config
	hooks    []Hook
	mutation *NotifyFlowMutation
}

// Where appends a list predicates to the NotifyFlowUpdate builder.
func (nfu *NotifyFlowUpdate) Where(ps ...predicate.NotifyFlow) *NotifyFlowUpdate {
	nfu.mutation.Where(ps...)
	return nfu
}

// SetName sets the "name" field.
func (nfu *NotifyFlowUpdate) SetName(s string) *NotifyFlowUpdate {
	nfu.mutation.SetName(s)
	return nfu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nfu *NotifyFlowUpdate) SetNillableName(s *string) *NotifyFlowUpdate {
	if s != nil {
		nfu.SetName(*s)
	}
	return nfu
}

// SetDescription sets the "description" field.
func (nfu *NotifyFlowUpdate) SetDescription(s string) *NotifyFlowUpdate {
	nfu.mutation.SetDescription(s)
	return nfu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nfu *NotifyFlowUpdate) SetNillableDescription(s *string) *NotifyFlowUpdate {
	if s != nil {
		nfu.SetDescription(*s)
	}
	return nfu
}

// SetStatus sets the "status" field.
func (nfu *NotifyFlowUpdate) SetStatus(n notifyflow.Status) *NotifyFlowUpdate {
	nfu.mutation.SetStatus(n)
	return nfu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nfu *NotifyFlowUpdate) SetNillableStatus(n *notifyflow.Status) *NotifyFlowUpdate {
	if n != nil {
		nfu.SetStatus(*n)
	}
	return nfu
}

// SetUpdatedAt sets the "updated_at" field.
func (nfu *NotifyFlowUpdate) SetUpdatedAt(t time.Time) *NotifyFlowUpdate {
	nfu.mutation.SetUpdatedAt(t)
	return nfu
}

// SetCreatedAt sets the "created_at" field.
func (nfu *NotifyFlowUpdate) SetCreatedAt(t time.Time) *NotifyFlowUpdate {
	nfu.mutation.SetCreatedAt(t)
	return nfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nfu *NotifyFlowUpdate) SetNillableCreatedAt(t *time.Time) *NotifyFlowUpdate {
	if t != nil {
		nfu.SetCreatedAt(*t)
	}
	return nfu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (nfu *NotifyFlowUpdate) SetOwnerID(id model.InternalID) *NotifyFlowUpdate {
	nfu.mutation.SetOwnerID(id)
	return nfu
}

// SetOwner sets the "owner" edge to the User entity.
func (nfu *NotifyFlowUpdate) SetOwner(u *User) *NotifyFlowUpdate {
	return nfu.SetOwnerID(u.ID)
}

// AddNotifyTargetIDs adds the "notify_target" edge to the NotifyTarget entity by IDs.
func (nfu *NotifyFlowUpdate) AddNotifyTargetIDs(ids ...model.InternalID) *NotifyFlowUpdate {
	nfu.mutation.AddNotifyTargetIDs(ids...)
	return nfu
}

// AddNotifyTarget adds the "notify_target" edges to the NotifyTarget entity.
func (nfu *NotifyFlowUpdate) AddNotifyTarget(n ...*NotifyTarget) *NotifyFlowUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfu.AddNotifyTargetIDs(ids...)
}

// AddNotifySourceIDs adds the "notify_source" edge to the NotifySource entity by IDs.
func (nfu *NotifyFlowUpdate) AddNotifySourceIDs(ids ...model.InternalID) *NotifyFlowUpdate {
	nfu.mutation.AddNotifySourceIDs(ids...)
	return nfu
}

// AddNotifySource adds the "notify_source" edges to the NotifySource entity.
func (nfu *NotifyFlowUpdate) AddNotifySource(n ...*NotifySource) *NotifyFlowUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfu.AddNotifySourceIDs(ids...)
}

// AddNotifyFlowTargetIDs adds the "notify_flow_target" edge to the NotifyFlowTarget entity by IDs.
func (nfu *NotifyFlowUpdate) AddNotifyFlowTargetIDs(ids ...int) *NotifyFlowUpdate {
	nfu.mutation.AddNotifyFlowTargetIDs(ids...)
	return nfu
}

// AddNotifyFlowTarget adds the "notify_flow_target" edges to the NotifyFlowTarget entity.
func (nfu *NotifyFlowUpdate) AddNotifyFlowTarget(n ...*NotifyFlowTarget) *NotifyFlowUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfu.AddNotifyFlowTargetIDs(ids...)
}

// AddNotifyFlowSourceIDs adds the "notify_flow_source" edge to the NotifyFlowSource entity by IDs.
func (nfu *NotifyFlowUpdate) AddNotifyFlowSourceIDs(ids ...int) *NotifyFlowUpdate {
	nfu.mutation.AddNotifyFlowSourceIDs(ids...)
	return nfu
}

// AddNotifyFlowSource adds the "notify_flow_source" edges to the NotifyFlowSource entity.
func (nfu *NotifyFlowUpdate) AddNotifyFlowSource(n ...*NotifyFlowSource) *NotifyFlowUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfu.AddNotifyFlowSourceIDs(ids...)
}

// Mutation returns the NotifyFlowMutation object of the builder.
func (nfu *NotifyFlowUpdate) Mutation() *NotifyFlowMutation {
	return nfu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (nfu *NotifyFlowUpdate) ClearOwner() *NotifyFlowUpdate {
	nfu.mutation.ClearOwner()
	return nfu
}

// ClearNotifyTarget clears all "notify_target" edges to the NotifyTarget entity.
func (nfu *NotifyFlowUpdate) ClearNotifyTarget() *NotifyFlowUpdate {
	nfu.mutation.ClearNotifyTarget()
	return nfu
}

// RemoveNotifyTargetIDs removes the "notify_target" edge to NotifyTarget entities by IDs.
func (nfu *NotifyFlowUpdate) RemoveNotifyTargetIDs(ids ...model.InternalID) *NotifyFlowUpdate {
	nfu.mutation.RemoveNotifyTargetIDs(ids...)
	return nfu
}

// RemoveNotifyTarget removes "notify_target" edges to NotifyTarget entities.
func (nfu *NotifyFlowUpdate) RemoveNotifyTarget(n ...*NotifyTarget) *NotifyFlowUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfu.RemoveNotifyTargetIDs(ids...)
}

// ClearNotifySource clears all "notify_source" edges to the NotifySource entity.
func (nfu *NotifyFlowUpdate) ClearNotifySource() *NotifyFlowUpdate {
	nfu.mutation.ClearNotifySource()
	return nfu
}

// RemoveNotifySourceIDs removes the "notify_source" edge to NotifySource entities by IDs.
func (nfu *NotifyFlowUpdate) RemoveNotifySourceIDs(ids ...model.InternalID) *NotifyFlowUpdate {
	nfu.mutation.RemoveNotifySourceIDs(ids...)
	return nfu
}

// RemoveNotifySource removes "notify_source" edges to NotifySource entities.
func (nfu *NotifyFlowUpdate) RemoveNotifySource(n ...*NotifySource) *NotifyFlowUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfu.RemoveNotifySourceIDs(ids...)
}

// ClearNotifyFlowTarget clears all "notify_flow_target" edges to the NotifyFlowTarget entity.
func (nfu *NotifyFlowUpdate) ClearNotifyFlowTarget() *NotifyFlowUpdate {
	nfu.mutation.ClearNotifyFlowTarget()
	return nfu
}

// RemoveNotifyFlowTargetIDs removes the "notify_flow_target" edge to NotifyFlowTarget entities by IDs.
func (nfu *NotifyFlowUpdate) RemoveNotifyFlowTargetIDs(ids ...int) *NotifyFlowUpdate {
	nfu.mutation.RemoveNotifyFlowTargetIDs(ids...)
	return nfu
}

// RemoveNotifyFlowTarget removes "notify_flow_target" edges to NotifyFlowTarget entities.
func (nfu *NotifyFlowUpdate) RemoveNotifyFlowTarget(n ...*NotifyFlowTarget) *NotifyFlowUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfu.RemoveNotifyFlowTargetIDs(ids...)
}

// ClearNotifyFlowSource clears all "notify_flow_source" edges to the NotifyFlowSource entity.
func (nfu *NotifyFlowUpdate) ClearNotifyFlowSource() *NotifyFlowUpdate {
	nfu.mutation.ClearNotifyFlowSource()
	return nfu
}

// RemoveNotifyFlowSourceIDs removes the "notify_flow_source" edge to NotifyFlowSource entities by IDs.
func (nfu *NotifyFlowUpdate) RemoveNotifyFlowSourceIDs(ids ...int) *NotifyFlowUpdate {
	nfu.mutation.RemoveNotifyFlowSourceIDs(ids...)
	return nfu
}

// RemoveNotifyFlowSource removes "notify_flow_source" edges to NotifyFlowSource entities.
func (nfu *NotifyFlowUpdate) RemoveNotifyFlowSource(n ...*NotifyFlowSource) *NotifyFlowUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfu.RemoveNotifyFlowSourceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nfu *NotifyFlowUpdate) Save(ctx context.Context) (int, error) {
	nfu.defaults()
	return withHooks(ctx, nfu.sqlSave, nfu.mutation, nfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nfu *NotifyFlowUpdate) SaveX(ctx context.Context) int {
	affected, err := nfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nfu *NotifyFlowUpdate) Exec(ctx context.Context) error {
	_, err := nfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nfu *NotifyFlowUpdate) ExecX(ctx context.Context) {
	if err := nfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nfu *NotifyFlowUpdate) defaults() {
	if _, ok := nfu.mutation.UpdatedAt(); !ok {
		v := notifyflow.UpdateDefaultUpdatedAt()
		nfu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nfu *NotifyFlowUpdate) check() error {
	if v, ok := nfu.mutation.Status(); ok {
		if err := notifyflow.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "NotifyFlow.status": %w`, err)}
		}
	}
	if nfu.mutation.OwnerCleared() && len(nfu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NotifyFlow.owner"`)
	}
	return nil
}

func (nfu *NotifyFlowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notifyflow.Table, notifyflow.Columns, sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64))
	if ps := nfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nfu.mutation.Name(); ok {
		_spec.SetField(notifyflow.FieldName, field.TypeString, value)
	}
	if value, ok := nfu.mutation.Description(); ok {
		_spec.SetField(notifyflow.FieldDescription, field.TypeString, value)
	}
	if value, ok := nfu.mutation.Status(); ok {
		_spec.SetField(notifyflow.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := nfu.mutation.UpdatedAt(); ok {
		_spec.SetField(notifyflow.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nfu.mutation.CreatedAt(); ok {
		_spec.SetField(notifyflow.FieldCreatedAt, field.TypeTime, value)
	}
	if nfu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifyflow.OwnerTable,
			Columns: []string{notifyflow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifyflow.OwnerTable,
			Columns: []string{notifyflow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nfu.mutation.NotifyTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifyTargetTable,
			Columns: notifyflow.NotifyTargetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		createE := &NotifyFlowTargetCreate{config: nfu.config, mutation: newNotifyFlowTargetMutation(nfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfu.mutation.RemovedNotifyTargetIDs(); len(nodes) > 0 && !nfu.mutation.NotifyTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifyTargetTable,
			Columns: notifyflow.NotifyTargetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NotifyFlowTargetCreate{config: nfu.config, mutation: newNotifyFlowTargetMutation(nfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfu.mutation.NotifyTargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifyTargetTable,
			Columns: notifyflow.NotifyTargetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NotifyFlowTargetCreate{config: nfu.config, mutation: newNotifyFlowTargetMutation(nfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nfu.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifySourceTable,
			Columns: notifyflow.NotifySourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		createE := &NotifyFlowSourceCreate{config: nfu.config, mutation: newNotifyFlowSourceMutation(nfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfu.mutation.RemovedNotifySourceIDs(); len(nodes) > 0 && !nfu.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifySourceTable,
			Columns: notifyflow.NotifySourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NotifyFlowSourceCreate{config: nfu.config, mutation: newNotifyFlowSourceMutation(nfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfu.mutation.NotifySourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifySourceTable,
			Columns: notifyflow.NotifySourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NotifyFlowSourceCreate{config: nfu.config, mutation: newNotifyFlowSourceMutation(nfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nfu.mutation.NotifyFlowTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowTargetTable,
			Columns: []string{notifyflow.NotifyFlowTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowtarget.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfu.mutation.RemovedNotifyFlowTargetIDs(); len(nodes) > 0 && !nfu.mutation.NotifyFlowTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowTargetTable,
			Columns: []string{notifyflow.NotifyFlowTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowtarget.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfu.mutation.NotifyFlowTargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowTargetTable,
			Columns: []string{notifyflow.NotifyFlowTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowtarget.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nfu.mutation.NotifyFlowSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowSourceTable,
			Columns: []string{notifyflow.NotifyFlowSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowsource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfu.mutation.RemovedNotifyFlowSourceIDs(); len(nodes) > 0 && !nfu.mutation.NotifyFlowSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowSourceTable,
			Columns: []string{notifyflow.NotifyFlowSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowsource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfu.mutation.NotifyFlowSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowSourceTable,
			Columns: []string{notifyflow.NotifyFlowSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowsource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifyflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nfu.mutation.done = true
	return n, nil
}

// NotifyFlowUpdateOne is the builder for updating a single NotifyFlow entity.
type NotifyFlowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotifyFlowMutation
}

// SetName sets the "name" field.
func (nfuo *NotifyFlowUpdateOne) SetName(s string) *NotifyFlowUpdateOne {
	nfuo.mutation.SetName(s)
	return nfuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nfuo *NotifyFlowUpdateOne) SetNillableName(s *string) *NotifyFlowUpdateOne {
	if s != nil {
		nfuo.SetName(*s)
	}
	return nfuo
}

// SetDescription sets the "description" field.
func (nfuo *NotifyFlowUpdateOne) SetDescription(s string) *NotifyFlowUpdateOne {
	nfuo.mutation.SetDescription(s)
	return nfuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nfuo *NotifyFlowUpdateOne) SetNillableDescription(s *string) *NotifyFlowUpdateOne {
	if s != nil {
		nfuo.SetDescription(*s)
	}
	return nfuo
}

// SetStatus sets the "status" field.
func (nfuo *NotifyFlowUpdateOne) SetStatus(n notifyflow.Status) *NotifyFlowUpdateOne {
	nfuo.mutation.SetStatus(n)
	return nfuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nfuo *NotifyFlowUpdateOne) SetNillableStatus(n *notifyflow.Status) *NotifyFlowUpdateOne {
	if n != nil {
		nfuo.SetStatus(*n)
	}
	return nfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nfuo *NotifyFlowUpdateOne) SetUpdatedAt(t time.Time) *NotifyFlowUpdateOne {
	nfuo.mutation.SetUpdatedAt(t)
	return nfuo
}

// SetCreatedAt sets the "created_at" field.
func (nfuo *NotifyFlowUpdateOne) SetCreatedAt(t time.Time) *NotifyFlowUpdateOne {
	nfuo.mutation.SetCreatedAt(t)
	return nfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nfuo *NotifyFlowUpdateOne) SetNillableCreatedAt(t *time.Time) *NotifyFlowUpdateOne {
	if t != nil {
		nfuo.SetCreatedAt(*t)
	}
	return nfuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (nfuo *NotifyFlowUpdateOne) SetOwnerID(id model.InternalID) *NotifyFlowUpdateOne {
	nfuo.mutation.SetOwnerID(id)
	return nfuo
}

// SetOwner sets the "owner" edge to the User entity.
func (nfuo *NotifyFlowUpdateOne) SetOwner(u *User) *NotifyFlowUpdateOne {
	return nfuo.SetOwnerID(u.ID)
}

// AddNotifyTargetIDs adds the "notify_target" edge to the NotifyTarget entity by IDs.
func (nfuo *NotifyFlowUpdateOne) AddNotifyTargetIDs(ids ...model.InternalID) *NotifyFlowUpdateOne {
	nfuo.mutation.AddNotifyTargetIDs(ids...)
	return nfuo
}

// AddNotifyTarget adds the "notify_target" edges to the NotifyTarget entity.
func (nfuo *NotifyFlowUpdateOne) AddNotifyTarget(n ...*NotifyTarget) *NotifyFlowUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfuo.AddNotifyTargetIDs(ids...)
}

// AddNotifySourceIDs adds the "notify_source" edge to the NotifySource entity by IDs.
func (nfuo *NotifyFlowUpdateOne) AddNotifySourceIDs(ids ...model.InternalID) *NotifyFlowUpdateOne {
	nfuo.mutation.AddNotifySourceIDs(ids...)
	return nfuo
}

// AddNotifySource adds the "notify_source" edges to the NotifySource entity.
func (nfuo *NotifyFlowUpdateOne) AddNotifySource(n ...*NotifySource) *NotifyFlowUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfuo.AddNotifySourceIDs(ids...)
}

// AddNotifyFlowTargetIDs adds the "notify_flow_target" edge to the NotifyFlowTarget entity by IDs.
func (nfuo *NotifyFlowUpdateOne) AddNotifyFlowTargetIDs(ids ...int) *NotifyFlowUpdateOne {
	nfuo.mutation.AddNotifyFlowTargetIDs(ids...)
	return nfuo
}

// AddNotifyFlowTarget adds the "notify_flow_target" edges to the NotifyFlowTarget entity.
func (nfuo *NotifyFlowUpdateOne) AddNotifyFlowTarget(n ...*NotifyFlowTarget) *NotifyFlowUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfuo.AddNotifyFlowTargetIDs(ids...)
}

// AddNotifyFlowSourceIDs adds the "notify_flow_source" edge to the NotifyFlowSource entity by IDs.
func (nfuo *NotifyFlowUpdateOne) AddNotifyFlowSourceIDs(ids ...int) *NotifyFlowUpdateOne {
	nfuo.mutation.AddNotifyFlowSourceIDs(ids...)
	return nfuo
}

// AddNotifyFlowSource adds the "notify_flow_source" edges to the NotifyFlowSource entity.
func (nfuo *NotifyFlowUpdateOne) AddNotifyFlowSource(n ...*NotifyFlowSource) *NotifyFlowUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfuo.AddNotifyFlowSourceIDs(ids...)
}

// Mutation returns the NotifyFlowMutation object of the builder.
func (nfuo *NotifyFlowUpdateOne) Mutation() *NotifyFlowMutation {
	return nfuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (nfuo *NotifyFlowUpdateOne) ClearOwner() *NotifyFlowUpdateOne {
	nfuo.mutation.ClearOwner()
	return nfuo
}

// ClearNotifyTarget clears all "notify_target" edges to the NotifyTarget entity.
func (nfuo *NotifyFlowUpdateOne) ClearNotifyTarget() *NotifyFlowUpdateOne {
	nfuo.mutation.ClearNotifyTarget()
	return nfuo
}

// RemoveNotifyTargetIDs removes the "notify_target" edge to NotifyTarget entities by IDs.
func (nfuo *NotifyFlowUpdateOne) RemoveNotifyTargetIDs(ids ...model.InternalID) *NotifyFlowUpdateOne {
	nfuo.mutation.RemoveNotifyTargetIDs(ids...)
	return nfuo
}

// RemoveNotifyTarget removes "notify_target" edges to NotifyTarget entities.
func (nfuo *NotifyFlowUpdateOne) RemoveNotifyTarget(n ...*NotifyTarget) *NotifyFlowUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfuo.RemoveNotifyTargetIDs(ids...)
}

// ClearNotifySource clears all "notify_source" edges to the NotifySource entity.
func (nfuo *NotifyFlowUpdateOne) ClearNotifySource() *NotifyFlowUpdateOne {
	nfuo.mutation.ClearNotifySource()
	return nfuo
}

// RemoveNotifySourceIDs removes the "notify_source" edge to NotifySource entities by IDs.
func (nfuo *NotifyFlowUpdateOne) RemoveNotifySourceIDs(ids ...model.InternalID) *NotifyFlowUpdateOne {
	nfuo.mutation.RemoveNotifySourceIDs(ids...)
	return nfuo
}

// RemoveNotifySource removes "notify_source" edges to NotifySource entities.
func (nfuo *NotifyFlowUpdateOne) RemoveNotifySource(n ...*NotifySource) *NotifyFlowUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfuo.RemoveNotifySourceIDs(ids...)
}

// ClearNotifyFlowTarget clears all "notify_flow_target" edges to the NotifyFlowTarget entity.
func (nfuo *NotifyFlowUpdateOne) ClearNotifyFlowTarget() *NotifyFlowUpdateOne {
	nfuo.mutation.ClearNotifyFlowTarget()
	return nfuo
}

// RemoveNotifyFlowTargetIDs removes the "notify_flow_target" edge to NotifyFlowTarget entities by IDs.
func (nfuo *NotifyFlowUpdateOne) RemoveNotifyFlowTargetIDs(ids ...int) *NotifyFlowUpdateOne {
	nfuo.mutation.RemoveNotifyFlowTargetIDs(ids...)
	return nfuo
}

// RemoveNotifyFlowTarget removes "notify_flow_target" edges to NotifyFlowTarget entities.
func (nfuo *NotifyFlowUpdateOne) RemoveNotifyFlowTarget(n ...*NotifyFlowTarget) *NotifyFlowUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfuo.RemoveNotifyFlowTargetIDs(ids...)
}

// ClearNotifyFlowSource clears all "notify_flow_source" edges to the NotifyFlowSource entity.
func (nfuo *NotifyFlowUpdateOne) ClearNotifyFlowSource() *NotifyFlowUpdateOne {
	nfuo.mutation.ClearNotifyFlowSource()
	return nfuo
}

// RemoveNotifyFlowSourceIDs removes the "notify_flow_source" edge to NotifyFlowSource entities by IDs.
func (nfuo *NotifyFlowUpdateOne) RemoveNotifyFlowSourceIDs(ids ...int) *NotifyFlowUpdateOne {
	nfuo.mutation.RemoveNotifyFlowSourceIDs(ids...)
	return nfuo
}

// RemoveNotifyFlowSource removes "notify_flow_source" edges to NotifyFlowSource entities.
func (nfuo *NotifyFlowUpdateOne) RemoveNotifyFlowSource(n ...*NotifyFlowSource) *NotifyFlowUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nfuo.RemoveNotifyFlowSourceIDs(ids...)
}

// Where appends a list predicates to the NotifyFlowUpdate builder.
func (nfuo *NotifyFlowUpdateOne) Where(ps ...predicate.NotifyFlow) *NotifyFlowUpdateOne {
	nfuo.mutation.Where(ps...)
	return nfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nfuo *NotifyFlowUpdateOne) Select(field string, fields ...string) *NotifyFlowUpdateOne {
	nfuo.fields = append([]string{field}, fields...)
	return nfuo
}

// Save executes the query and returns the updated NotifyFlow entity.
func (nfuo *NotifyFlowUpdateOne) Save(ctx context.Context) (*NotifyFlow, error) {
	nfuo.defaults()
	return withHooks(ctx, nfuo.sqlSave, nfuo.mutation, nfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nfuo *NotifyFlowUpdateOne) SaveX(ctx context.Context) *NotifyFlow {
	node, err := nfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nfuo *NotifyFlowUpdateOne) Exec(ctx context.Context) error {
	_, err := nfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nfuo *NotifyFlowUpdateOne) ExecX(ctx context.Context) {
	if err := nfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nfuo *NotifyFlowUpdateOne) defaults() {
	if _, ok := nfuo.mutation.UpdatedAt(); !ok {
		v := notifyflow.UpdateDefaultUpdatedAt()
		nfuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nfuo *NotifyFlowUpdateOne) check() error {
	if v, ok := nfuo.mutation.Status(); ok {
		if err := notifyflow.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "NotifyFlow.status": %w`, err)}
		}
	}
	if nfuo.mutation.OwnerCleared() && len(nfuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NotifyFlow.owner"`)
	}
	return nil
}

func (nfuo *NotifyFlowUpdateOne) sqlSave(ctx context.Context) (_node *NotifyFlow, err error) {
	if err := nfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notifyflow.Table, notifyflow.Columns, sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64))
	id, ok := nfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotifyFlow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notifyflow.FieldID)
		for _, f := range fields {
			if !notifyflow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notifyflow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nfuo.mutation.Name(); ok {
		_spec.SetField(notifyflow.FieldName, field.TypeString, value)
	}
	if value, ok := nfuo.mutation.Description(); ok {
		_spec.SetField(notifyflow.FieldDescription, field.TypeString, value)
	}
	if value, ok := nfuo.mutation.Status(); ok {
		_spec.SetField(notifyflow.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := nfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notifyflow.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nfuo.mutation.CreatedAt(); ok {
		_spec.SetField(notifyflow.FieldCreatedAt, field.TypeTime, value)
	}
	if nfuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifyflow.OwnerTable,
			Columns: []string{notifyflow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifyflow.OwnerTable,
			Columns: []string{notifyflow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nfuo.mutation.NotifyTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifyTargetTable,
			Columns: notifyflow.NotifyTargetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		createE := &NotifyFlowTargetCreate{config: nfuo.config, mutation: newNotifyFlowTargetMutation(nfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfuo.mutation.RemovedNotifyTargetIDs(); len(nodes) > 0 && !nfuo.mutation.NotifyTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifyTargetTable,
			Columns: notifyflow.NotifyTargetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NotifyFlowTargetCreate{config: nfuo.config, mutation: newNotifyFlowTargetMutation(nfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfuo.mutation.NotifyTargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifyTargetTable,
			Columns: notifyflow.NotifyTargetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NotifyFlowTargetCreate{config: nfuo.config, mutation: newNotifyFlowTargetMutation(nfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nfuo.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifySourceTable,
			Columns: notifyflow.NotifySourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		createE := &NotifyFlowSourceCreate{config: nfuo.config, mutation: newNotifyFlowSourceMutation(nfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfuo.mutation.RemovedNotifySourceIDs(); len(nodes) > 0 && !nfuo.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifySourceTable,
			Columns: notifyflow.NotifySourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NotifyFlowSourceCreate{config: nfuo.config, mutation: newNotifyFlowSourceMutation(nfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfuo.mutation.NotifySourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notifyflow.NotifySourceTable,
			Columns: notifyflow.NotifySourcePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NotifyFlowSourceCreate{config: nfuo.config, mutation: newNotifyFlowSourceMutation(nfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nfuo.mutation.NotifyFlowTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowTargetTable,
			Columns: []string{notifyflow.NotifyFlowTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowtarget.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfuo.mutation.RemovedNotifyFlowTargetIDs(); len(nodes) > 0 && !nfuo.mutation.NotifyFlowTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowTargetTable,
			Columns: []string{notifyflow.NotifyFlowTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowtarget.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfuo.mutation.NotifyFlowTargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowTargetTable,
			Columns: []string{notifyflow.NotifyFlowTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowtarget.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nfuo.mutation.NotifyFlowSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowSourceTable,
			Columns: []string{notifyflow.NotifyFlowSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowsource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfuo.mutation.RemovedNotifyFlowSourceIDs(); len(nodes) > 0 && !nfuo.mutation.NotifyFlowSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowSourceTable,
			Columns: []string{notifyflow.NotifyFlowSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowsource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nfuo.mutation.NotifyFlowSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifyflow.NotifyFlowSourceTable,
			Columns: []string{notifyflow.NotifyFlowSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowsource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotifyFlow{config: nfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifyflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nfuo.mutation.done = true
	return _node, nil
}
