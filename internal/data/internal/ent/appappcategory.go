// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/internal/data/internal/ent/appappcategory"
	"github.com/tuihub/librarian/internal/data/internal/ent/appcategory"
	"github.com/tuihub/librarian/internal/model"
)

// AppAppCategory is the model entity for the AppAppCategory schema.
type AppAppCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AppCategoryID holds the value of the "app_category_id" field.
	AppCategoryID model.InternalID `json:"app_category_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID model.InternalID `json:"app_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppAppCategoryQuery when eager-loading is set.
	Edges        AppAppCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppAppCategoryEdges holds the relations/edges for other nodes in the graph.
type AppAppCategoryEdges struct {
	// AppCategory holds the value of the app_category edge.
	AppCategory *AppCategory `json:"app_category,omitempty"`
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AppCategoryOrErr returns the AppCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppAppCategoryEdges) AppCategoryOrErr() (*AppCategory, error) {
	if e.AppCategory != nil {
		return e.AppCategory, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: appcategory.Label}
	}
	return nil, &NotLoadedError{edge: "app_category"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppAppCategoryEdges) AppOrErr() (*App, error) {
	if e.App != nil {
		return e.App, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: app.Label}
	}
	return nil, &NotLoadedError{edge: "app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppAppCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appappcategory.FieldID, appappcategory.FieldAppCategoryID, appappcategory.FieldAppID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppAppCategory fields.
func (aac *AppAppCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appappcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aac.ID = int(value.Int64)
		case appappcategory.FieldAppCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_category_id", values[i])
			} else if value.Valid {
				aac.AppCategoryID = model.InternalID(value.Int64)
			}
		case appappcategory.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				aac.AppID = model.InternalID(value.Int64)
			}
		default:
			aac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppAppCategory.
// This includes values selected through modifiers, order, etc.
func (aac *AppAppCategory) Value(name string) (ent.Value, error) {
	return aac.selectValues.Get(name)
}

// QueryAppCategory queries the "app_category" edge of the AppAppCategory entity.
func (aac *AppAppCategory) QueryAppCategory() *AppCategoryQuery {
	return NewAppAppCategoryClient(aac.config).QueryAppCategory(aac)
}

// QueryApp queries the "app" edge of the AppAppCategory entity.
func (aac *AppAppCategory) QueryApp() *AppQuery {
	return NewAppAppCategoryClient(aac.config).QueryApp(aac)
}

// Update returns a builder for updating this AppAppCategory.
// Note that you need to call AppAppCategory.Unwrap() before calling this method if this AppAppCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (aac *AppAppCategory) Update() *AppAppCategoryUpdateOne {
	return NewAppAppCategoryClient(aac.config).UpdateOne(aac)
}

// Unwrap unwraps the AppAppCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aac *AppAppCategory) Unwrap() *AppAppCategory {
	_tx, ok := aac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppAppCategory is not a transactional entity")
	}
	aac.config.driver = _tx.drv
	return aac
}

// String implements the fmt.Stringer.
func (aac *AppAppCategory) String() string {
	var builder strings.Builder
	builder.WriteString("AppAppCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aac.ID))
	builder.WriteString("app_category_id=")
	builder.WriteString(fmt.Sprintf("%v", aac.AppCategoryID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", aac.AppID))
	builder.WriteByte(')')
	return builder.String()
}

// AppAppCategories is a parsable slice of AppAppCategory.
type AppAppCategories []*AppAppCategory
