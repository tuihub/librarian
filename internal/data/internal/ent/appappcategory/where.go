// Code generated by ent, DO NOT EDIT.

package appappcategory

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.FieldLTE(FieldID, id))
}

// AppCategoryID applies equality check predicate on the "app_category_id" field. It's identical to AppCategoryIDEQ.
func AppCategoryID(v model.InternalID) predicate.AppAppCategory {
	vc := int64(v)
	return predicate.AppAppCategory(sql.FieldEQ(FieldAppCategoryID, vc))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v model.InternalID) predicate.AppAppCategory {
	vc := int64(v)
	return predicate.AppAppCategory(sql.FieldEQ(FieldAppID, vc))
}

// AppCategoryIDEQ applies the EQ predicate on the "app_category_id" field.
func AppCategoryIDEQ(v model.InternalID) predicate.AppAppCategory {
	vc := int64(v)
	return predicate.AppAppCategory(sql.FieldEQ(FieldAppCategoryID, vc))
}

// AppCategoryIDNEQ applies the NEQ predicate on the "app_category_id" field.
func AppCategoryIDNEQ(v model.InternalID) predicate.AppAppCategory {
	vc := int64(v)
	return predicate.AppAppCategory(sql.FieldNEQ(FieldAppCategoryID, vc))
}

// AppCategoryIDIn applies the In predicate on the "app_category_id" field.
func AppCategoryIDIn(vs ...model.InternalID) predicate.AppAppCategory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.AppAppCategory(sql.FieldIn(FieldAppCategoryID, v...))
}

// AppCategoryIDNotIn applies the NotIn predicate on the "app_category_id" field.
func AppCategoryIDNotIn(vs ...model.InternalID) predicate.AppAppCategory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.AppAppCategory(sql.FieldNotIn(FieldAppCategoryID, v...))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v model.InternalID) predicate.AppAppCategory {
	vc := int64(v)
	return predicate.AppAppCategory(sql.FieldEQ(FieldAppID, vc))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v model.InternalID) predicate.AppAppCategory {
	vc := int64(v)
	return predicate.AppAppCategory(sql.FieldNEQ(FieldAppID, vc))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...model.InternalID) predicate.AppAppCategory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.AppAppCategory(sql.FieldIn(FieldAppID, v...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...model.InternalID) predicate.AppAppCategory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.AppAppCategory(sql.FieldNotIn(FieldAppID, v...))
}

// HasAppCategory applies the HasEdge predicate on the "app_category" edge.
func HasAppCategory() predicate.AppAppCategory {
	return predicate.AppAppCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppCategoryTable, AppCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppCategoryWith applies the HasEdge predicate on the "app_category" edge with a given conditions (other predicates).
func HasAppCategoryWith(preds ...predicate.AppCategory) predicate.AppAppCategory {
	return predicate.AppAppCategory(func(s *sql.Selector) {
		step := newAppCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApp applies the HasEdge predicate on the "app" edge.
func HasApp() predicate.AppAppCategory {
	return predicate.AppAppCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppWith applies the HasEdge predicate on the "app" edge with a given conditions (other predicates).
func HasAppWith(preds ...predicate.App) predicate.AppAppCategory {
	return predicate.AppAppCategory(func(s *sql.Selector) {
		step := newAppStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppAppCategory) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppAppCategory) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppAppCategory) predicate.AppAppCategory {
	return predicate.AppAppCategory(sql.NotPredicates(p))
}
