// Code generated by ent, DO NOT EDIT.

package appappcategory

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the appappcategory type in the database.
	Label = "app_app_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAppCategoryID holds the string denoting the app_category_id field in the database.
	FieldAppCategoryID = "app_category_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// EdgeAppCategory holds the string denoting the app_category edge name in mutations.
	EdgeAppCategory = "app_category"
	// EdgeApp holds the string denoting the app edge name in mutations.
	EdgeApp = "app"
	// Table holds the table name of the appappcategory in the database.
	Table = "app_app_categories"
	// AppCategoryTable is the table that holds the app_category relation/edge.
	AppCategoryTable = "app_app_categories"
	// AppCategoryInverseTable is the table name for the AppCategory entity.
	// It exists in this package in order to avoid circular dependency with the "appcategory" package.
	AppCategoryInverseTable = "app_categories"
	// AppCategoryColumn is the table column denoting the app_category relation/edge.
	AppCategoryColumn = "app_category_id"
	// AppTable is the table that holds the app relation/edge.
	AppTable = "app_app_categories"
	// AppInverseTable is the table name for the App entity.
	// It exists in this package in order to avoid circular dependency with the "app" package.
	AppInverseTable = "apps"
	// AppColumn is the table column denoting the app relation/edge.
	AppColumn = "app_id"
)

// Columns holds all SQL columns for appappcategory fields.
var Columns = []string{
	FieldID,
	FieldAppCategoryID,
	FieldAppID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AppAppCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAppCategoryID orders the results by the app_category_id field.
func ByAppCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppCategoryID, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByAppCategoryField orders the results by app_category field.
func ByAppCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByAppField orders the results by app field.
func ByAppField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppStep(), sql.OrderByField(field, opts...))
	}
}
func newAppCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppCategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AppCategoryTable, AppCategoryColumn),
	)
}
func newAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
	)
}
