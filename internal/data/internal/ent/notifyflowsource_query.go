// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflow"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflowsource"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifysource"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// NotifyFlowSourceQuery is the builder for querying NotifyFlowSource entities.
type NotifyFlowSourceQuery struct {
	config
	ctx              *QueryContext
	order            []notifyflowsource.OrderOption
	inters           []Interceptor
	predicates       []predicate.NotifyFlowSource
	withNotifyFlow   *NotifyFlowQuery
	withNotifySource *NotifySourceQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NotifyFlowSourceQuery builder.
func (nfsq *NotifyFlowSourceQuery) Where(ps ...predicate.NotifyFlowSource) *NotifyFlowSourceQuery {
	nfsq.predicates = append(nfsq.predicates, ps...)
	return nfsq
}

// Limit the number of records to be returned by this query.
func (nfsq *NotifyFlowSourceQuery) Limit(limit int) *NotifyFlowSourceQuery {
	nfsq.ctx.Limit = &limit
	return nfsq
}

// Offset to start from.
func (nfsq *NotifyFlowSourceQuery) Offset(offset int) *NotifyFlowSourceQuery {
	nfsq.ctx.Offset = &offset
	return nfsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nfsq *NotifyFlowSourceQuery) Unique(unique bool) *NotifyFlowSourceQuery {
	nfsq.ctx.Unique = &unique
	return nfsq
}

// Order specifies how the records should be ordered.
func (nfsq *NotifyFlowSourceQuery) Order(o ...notifyflowsource.OrderOption) *NotifyFlowSourceQuery {
	nfsq.order = append(nfsq.order, o...)
	return nfsq
}

// QueryNotifyFlow chains the current query on the "notify_flow" edge.
func (nfsq *NotifyFlowSourceQuery) QueryNotifyFlow() *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: nfsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nfsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nfsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowsource.Table, notifyflowsource.FieldID, selector),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowsource.NotifyFlowTable, notifyflowsource.NotifyFlowColumn),
		)
		fromU = sqlgraph.SetNeighbors(nfsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotifySource chains the current query on the "notify_source" edge.
func (nfsq *NotifyFlowSourceQuery) QueryNotifySource() *NotifySourceQuery {
	query := (&NotifySourceClient{config: nfsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nfsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nfsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowsource.Table, notifyflowsource.FieldID, selector),
			sqlgraph.To(notifysource.Table, notifysource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowsource.NotifySourceTable, notifyflowsource.NotifySourceColumn),
		)
		fromU = sqlgraph.SetNeighbors(nfsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NotifyFlowSource entity from the query.
// Returns a *NotFoundError when no NotifyFlowSource was found.
func (nfsq *NotifyFlowSourceQuery) First(ctx context.Context) (*NotifyFlowSource, error) {
	nodes, err := nfsq.Limit(1).All(setContextOp(ctx, nfsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{notifyflowsource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nfsq *NotifyFlowSourceQuery) FirstX(ctx context.Context) *NotifyFlowSource {
	node, err := nfsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NotifyFlowSource ID from the query.
// Returns a *NotFoundError when no NotifyFlowSource ID was found.
func (nfsq *NotifyFlowSourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nfsq.Limit(1).IDs(setContextOp(ctx, nfsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{notifyflowsource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nfsq *NotifyFlowSourceQuery) FirstIDX(ctx context.Context) int {
	id, err := nfsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NotifyFlowSource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NotifyFlowSource entity is found.
// Returns a *NotFoundError when no NotifyFlowSource entities are found.
func (nfsq *NotifyFlowSourceQuery) Only(ctx context.Context) (*NotifyFlowSource, error) {
	nodes, err := nfsq.Limit(2).All(setContextOp(ctx, nfsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{notifyflowsource.Label}
	default:
		return nil, &NotSingularError{notifyflowsource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nfsq *NotifyFlowSourceQuery) OnlyX(ctx context.Context) *NotifyFlowSource {
	node, err := nfsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NotifyFlowSource ID in the query.
// Returns a *NotSingularError when more than one NotifyFlowSource ID is found.
// Returns a *NotFoundError when no entities are found.
func (nfsq *NotifyFlowSourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nfsq.Limit(2).IDs(setContextOp(ctx, nfsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{notifyflowsource.Label}
	default:
		err = &NotSingularError{notifyflowsource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nfsq *NotifyFlowSourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := nfsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NotifyFlowSources.
func (nfsq *NotifyFlowSourceQuery) All(ctx context.Context) ([]*NotifyFlowSource, error) {
	ctx = setContextOp(ctx, nfsq.ctx, ent.OpQueryAll)
	if err := nfsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NotifyFlowSource, *NotifyFlowSourceQuery]()
	return withInterceptors[[]*NotifyFlowSource](ctx, nfsq, qr, nfsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (nfsq *NotifyFlowSourceQuery) AllX(ctx context.Context) []*NotifyFlowSource {
	nodes, err := nfsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NotifyFlowSource IDs.
func (nfsq *NotifyFlowSourceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if nfsq.ctx.Unique == nil && nfsq.path != nil {
		nfsq.Unique(true)
	}
	ctx = setContextOp(ctx, nfsq.ctx, ent.OpQueryIDs)
	if err = nfsq.Select(notifyflowsource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nfsq *NotifyFlowSourceQuery) IDsX(ctx context.Context) []int {
	ids, err := nfsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nfsq *NotifyFlowSourceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, nfsq.ctx, ent.OpQueryCount)
	if err := nfsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, nfsq, querierCount[*NotifyFlowSourceQuery](), nfsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (nfsq *NotifyFlowSourceQuery) CountX(ctx context.Context) int {
	count, err := nfsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nfsq *NotifyFlowSourceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, nfsq.ctx, ent.OpQueryExist)
	switch _, err := nfsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (nfsq *NotifyFlowSourceQuery) ExistX(ctx context.Context) bool {
	exist, err := nfsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NotifyFlowSourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nfsq *NotifyFlowSourceQuery) Clone() *NotifyFlowSourceQuery {
	if nfsq == nil {
		return nil
	}
	return &NotifyFlowSourceQuery{
		config:           nfsq.config,
		ctx:              nfsq.ctx.Clone(),
		order:            append([]notifyflowsource.OrderOption{}, nfsq.order...),
		inters:           append([]Interceptor{}, nfsq.inters...),
		predicates:       append([]predicate.NotifyFlowSource{}, nfsq.predicates...),
		withNotifyFlow:   nfsq.withNotifyFlow.Clone(),
		withNotifySource: nfsq.withNotifySource.Clone(),
		// clone intermediate query.
		sql:  nfsq.sql.Clone(),
		path: nfsq.path,
	}
}

// WithNotifyFlow tells the query-builder to eager-load the nodes that are connected to
// the "notify_flow" edge. The optional arguments are used to configure the query builder of the edge.
func (nfsq *NotifyFlowSourceQuery) WithNotifyFlow(opts ...func(*NotifyFlowQuery)) *NotifyFlowSourceQuery {
	query := (&NotifyFlowClient{config: nfsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nfsq.withNotifyFlow = query
	return nfsq
}

// WithNotifySource tells the query-builder to eager-load the nodes that are connected to
// the "notify_source" edge. The optional arguments are used to configure the query builder of the edge.
func (nfsq *NotifyFlowSourceQuery) WithNotifySource(opts ...func(*NotifySourceQuery)) *NotifyFlowSourceQuery {
	query := (&NotifySourceClient{config: nfsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nfsq.withNotifySource = query
	return nfsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		NotifyFlowID model.InternalID `json:"notify_flow_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NotifyFlowSource.Query().
//		GroupBy(notifyflowsource.FieldNotifyFlowID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nfsq *NotifyFlowSourceQuery) GroupBy(field string, fields ...string) *NotifyFlowSourceGroupBy {
	nfsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NotifyFlowSourceGroupBy{build: nfsq}
	grbuild.flds = &nfsq.ctx.Fields
	grbuild.label = notifyflowsource.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		NotifyFlowID model.InternalID `json:"notify_flow_id,omitempty"`
//	}
//
//	client.NotifyFlowSource.Query().
//		Select(notifyflowsource.FieldNotifyFlowID).
//		Scan(ctx, &v)
func (nfsq *NotifyFlowSourceQuery) Select(fields ...string) *NotifyFlowSourceSelect {
	nfsq.ctx.Fields = append(nfsq.ctx.Fields, fields...)
	sbuild := &NotifyFlowSourceSelect{NotifyFlowSourceQuery: nfsq}
	sbuild.label = notifyflowsource.Label
	sbuild.flds, sbuild.scan = &nfsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NotifyFlowSourceSelect configured with the given aggregations.
func (nfsq *NotifyFlowSourceQuery) Aggregate(fns ...AggregateFunc) *NotifyFlowSourceSelect {
	return nfsq.Select().Aggregate(fns...)
}

func (nfsq *NotifyFlowSourceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range nfsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, nfsq); err != nil {
				return err
			}
		}
	}
	for _, f := range nfsq.ctx.Fields {
		if !notifyflowsource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nfsq.path != nil {
		prev, err := nfsq.path(ctx)
		if err != nil {
			return err
		}
		nfsq.sql = prev
	}
	return nil
}

func (nfsq *NotifyFlowSourceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NotifyFlowSource, error) {
	var (
		nodes       = []*NotifyFlowSource{}
		_spec       = nfsq.querySpec()
		loadedTypes = [2]bool{
			nfsq.withNotifyFlow != nil,
			nfsq.withNotifySource != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NotifyFlowSource).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NotifyFlowSource{config: nfsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nfsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nfsq.withNotifyFlow; query != nil {
		if err := nfsq.loadNotifyFlow(ctx, query, nodes, nil,
			func(n *NotifyFlowSource, e *NotifyFlow) { n.Edges.NotifyFlow = e }); err != nil {
			return nil, err
		}
	}
	if query := nfsq.withNotifySource; query != nil {
		if err := nfsq.loadNotifySource(ctx, query, nodes, nil,
			func(n *NotifyFlowSource, e *NotifySource) { n.Edges.NotifySource = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nfsq *NotifyFlowSourceQuery) loadNotifyFlow(ctx context.Context, query *NotifyFlowQuery, nodes []*NotifyFlowSource, init func(*NotifyFlowSource), assign func(*NotifyFlowSource, *NotifyFlow)) error {
	ids := make([]model.InternalID, 0, len(nodes))
	nodeids := make(map[model.InternalID][]*NotifyFlowSource)
	for i := range nodes {
		fk := nodes[i].NotifyFlowID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(notifyflow.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "notify_flow_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (nfsq *NotifyFlowSourceQuery) loadNotifySource(ctx context.Context, query *NotifySourceQuery, nodes []*NotifyFlowSource, init func(*NotifyFlowSource), assign func(*NotifyFlowSource, *NotifySource)) error {
	ids := make([]model.InternalID, 0, len(nodes))
	nodeids := make(map[model.InternalID][]*NotifyFlowSource)
	for i := range nodes {
		fk := nodes[i].NotifySourceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(notifysource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "notify_source_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (nfsq *NotifyFlowSourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nfsq.querySpec()
	_spec.Node.Columns = nfsq.ctx.Fields
	if len(nfsq.ctx.Fields) > 0 {
		_spec.Unique = nfsq.ctx.Unique != nil && *nfsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, nfsq.driver, _spec)
}

func (nfsq *NotifyFlowSourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(notifyflowsource.Table, notifyflowsource.Columns, sqlgraph.NewFieldSpec(notifyflowsource.FieldID, field.TypeInt))
	_spec.From = nfsq.sql
	if unique := nfsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if nfsq.path != nil {
		_spec.Unique = true
	}
	if fields := nfsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notifyflowsource.FieldID)
		for i := range fields {
			if fields[i] != notifyflowsource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if nfsq.withNotifyFlow != nil {
			_spec.Node.AddColumnOnce(notifyflowsource.FieldNotifyFlowID)
		}
		if nfsq.withNotifySource != nil {
			_spec.Node.AddColumnOnce(notifyflowsource.FieldNotifySourceID)
		}
	}
	if ps := nfsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nfsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nfsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nfsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nfsq *NotifyFlowSourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nfsq.driver.Dialect())
	t1 := builder.Table(notifyflowsource.Table)
	columns := nfsq.ctx.Fields
	if len(columns) == 0 {
		columns = notifyflowsource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nfsq.sql != nil {
		selector = nfsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nfsq.ctx.Unique != nil && *nfsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range nfsq.predicates {
		p(selector)
	}
	for _, p := range nfsq.order {
		p(selector)
	}
	if offset := nfsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nfsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NotifyFlowSourceGroupBy is the group-by builder for NotifyFlowSource entities.
type NotifyFlowSourceGroupBy struct {
	selector
	build *NotifyFlowSourceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nfsgb *NotifyFlowSourceGroupBy) Aggregate(fns ...AggregateFunc) *NotifyFlowSourceGroupBy {
	nfsgb.fns = append(nfsgb.fns, fns...)
	return nfsgb
}

// Scan applies the selector query and scans the result into the given value.
func (nfsgb *NotifyFlowSourceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nfsgb.build.ctx, ent.OpQueryGroupBy)
	if err := nfsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NotifyFlowSourceQuery, *NotifyFlowSourceGroupBy](ctx, nfsgb.build, nfsgb, nfsgb.build.inters, v)
}

func (nfsgb *NotifyFlowSourceGroupBy) sqlScan(ctx context.Context, root *NotifyFlowSourceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(nfsgb.fns))
	for _, fn := range nfsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*nfsgb.flds)+len(nfsgb.fns))
		for _, f := range *nfsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*nfsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nfsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NotifyFlowSourceSelect is the builder for selecting fields of NotifyFlowSource entities.
type NotifyFlowSourceSelect struct {
	*NotifyFlowSourceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nfss *NotifyFlowSourceSelect) Aggregate(fns ...AggregateFunc) *NotifyFlowSourceSelect {
	nfss.fns = append(nfss.fns, fns...)
	return nfss
}

// Scan applies the selector query and scans the result into the given value.
func (nfss *NotifyFlowSourceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nfss.ctx, ent.OpQuerySelect)
	if err := nfss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NotifyFlowSourceQuery, *NotifyFlowSourceSelect](ctx, nfss.NotifyFlowSourceQuery, nfss, nfss.inters, v)
}

func (nfss *NotifyFlowSourceSelect) sqlScan(ctx context.Context, root *NotifyFlowSourceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nfss.fns))
	for _, fn := range nfss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nfss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nfss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
