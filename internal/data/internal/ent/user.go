// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Status holds the value of the "status" field.
	Status user.Status `json:"status,omitempty"`
	// Type holds the value of the "type" field.
	Type user.Type `json:"type,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges             UserEdges `json:"edges"`
	user_created_user *model.InternalID
	selectValues      sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// BindAccount holds the value of the bind_account edge.
	BindAccount []*Account `json:"bind_account,omitempty"`
	// PurchasedApp holds the value of the purchased_app edge.
	PurchasedApp []*AppInfo `json:"purchased_app,omitempty"`
	// App holds the value of the app edge.
	App []*App `json:"app,omitempty"`
	// AppInst holds the value of the app_inst edge.
	AppInst []*AppInst `json:"app_inst,omitempty"`
	// FeedConfig holds the value of the feed_config edge.
	FeedConfig []*FeedConfig `json:"feed_config,omitempty"`
	// FeedActionSet holds the value of the feed_action_set edge.
	FeedActionSet []*FeedActionSet `json:"feed_action_set,omitempty"`
	// FeedItemCollection holds the value of the feed_item_collection edge.
	FeedItemCollection []*FeedItemCollection `json:"feed_item_collection,omitempty"`
	// NotifySource holds the value of the notify_source edge.
	NotifySource []*NotifySource `json:"notify_source,omitempty"`
	// NotifyTarget holds the value of the notify_target edge.
	NotifyTarget []*NotifyTarget `json:"notify_target,omitempty"`
	// NotifyFlow holds the value of the notify_flow edge.
	NotifyFlow []*NotifyFlow `json:"notify_flow,omitempty"`
	// Image holds the value of the image edge.
	Image []*Image `json:"image,omitempty"`
	// File holds the value of the file edge.
	File []*File `json:"file,omitempty"`
	// DeviceInfo holds the value of the device_info edge.
	DeviceInfo []*DeviceInfo `json:"device_info,omitempty"`
	// Tag holds the value of the tag edge.
	Tag []*Tag `json:"tag,omitempty"`
	// PorterContext holds the value of the porter_context edge.
	PorterContext []*PorterContext `json:"porter_context,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// CreatedUser holds the value of the created_user edge.
	CreatedUser []*User `json:"created_user,omitempty"`
	// UserDevice holds the value of the user_device edge.
	UserDevice []*UserDevice `json:"user_device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [18]bool
}

// BindAccountOrErr returns the BindAccount value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BindAccountOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.BindAccount, nil
	}
	return nil, &NotLoadedError{edge: "bind_account"}
}

// PurchasedAppOrErr returns the PurchasedApp value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PurchasedAppOrErr() ([]*AppInfo, error) {
	if e.loadedTypes[1] {
		return e.PurchasedApp, nil
	}
	return nil, &NotLoadedError{edge: "purchased_app"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AppOrErr() ([]*App, error) {
	if e.loadedTypes[2] {
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// AppInstOrErr returns the AppInst value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AppInstOrErr() ([]*AppInst, error) {
	if e.loadedTypes[3] {
		return e.AppInst, nil
	}
	return nil, &NotLoadedError{edge: "app_inst"}
}

// FeedConfigOrErr returns the FeedConfig value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FeedConfigOrErr() ([]*FeedConfig, error) {
	if e.loadedTypes[4] {
		return e.FeedConfig, nil
	}
	return nil, &NotLoadedError{edge: "feed_config"}
}

// FeedActionSetOrErr returns the FeedActionSet value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FeedActionSetOrErr() ([]*FeedActionSet, error) {
	if e.loadedTypes[5] {
		return e.FeedActionSet, nil
	}
	return nil, &NotLoadedError{edge: "feed_action_set"}
}

// FeedItemCollectionOrErr returns the FeedItemCollection value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FeedItemCollectionOrErr() ([]*FeedItemCollection, error) {
	if e.loadedTypes[6] {
		return e.FeedItemCollection, nil
	}
	return nil, &NotLoadedError{edge: "feed_item_collection"}
}

// NotifySourceOrErr returns the NotifySource value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NotifySourceOrErr() ([]*NotifySource, error) {
	if e.loadedTypes[7] {
		return e.NotifySource, nil
	}
	return nil, &NotLoadedError{edge: "notify_source"}
}

// NotifyTargetOrErr returns the NotifyTarget value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NotifyTargetOrErr() ([]*NotifyTarget, error) {
	if e.loadedTypes[8] {
		return e.NotifyTarget, nil
	}
	return nil, &NotLoadedError{edge: "notify_target"}
}

// NotifyFlowOrErr returns the NotifyFlow value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NotifyFlowOrErr() ([]*NotifyFlow, error) {
	if e.loadedTypes[9] {
		return e.NotifyFlow, nil
	}
	return nil, &NotLoadedError{edge: "notify_flow"}
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ImageOrErr() ([]*Image, error) {
	if e.loadedTypes[10] {
		return e.Image, nil
	}
	return nil, &NotLoadedError{edge: "image"}
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FileOrErr() ([]*File, error) {
	if e.loadedTypes[11] {
		return e.File, nil
	}
	return nil, &NotLoadedError{edge: "file"}
}

// DeviceInfoOrErr returns the DeviceInfo value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DeviceInfoOrErr() ([]*DeviceInfo, error) {
	if e.loadedTypes[12] {
		return e.DeviceInfo, nil
	}
	return nil, &NotLoadedError{edge: "device_info"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[13] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// PorterContextOrErr returns the PorterContext value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PorterContextOrErr() ([]*PorterContext, error) {
	if e.loadedTypes[14] {
		return e.PorterContext, nil
	}
	return nil, &NotLoadedError{edge: "porter_context"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[15] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// CreatedUserOrErr returns the CreatedUser value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedUserOrErr() ([]*User, error) {
	if e.loadedTypes[16] {
		return e.CreatedUser, nil
	}
	return nil, &NotLoadedError{edge: "created_user"}
}

// UserDeviceOrErr returns the UserDevice value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserDeviceOrErr() ([]*UserDevice, error) {
	if e.loadedTypes[17] {
		return e.UserDevice, nil
	}
	return nil, &NotLoadedError{edge: "user_device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldPassword, user.FieldStatus, user.FieldType:
			values[i] = new(sql.NullString)
		case user.FieldUpdatedAt, user.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // user_created_user
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = model.InternalID(value.Int64)
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = user.Status(value.String)
			}
		case user.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				u.Type = user.Type(value.String)
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_created_user", values[i])
			} else if value.Valid {
				u.user_created_user = new(model.InternalID)
				*u.user_created_user = model.InternalID(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryBindAccount queries the "bind_account" edge of the User entity.
func (u *User) QueryBindAccount() *AccountQuery {
	return NewUserClient(u.config).QueryBindAccount(u)
}

// QueryPurchasedApp queries the "purchased_app" edge of the User entity.
func (u *User) QueryPurchasedApp() *AppInfoQuery {
	return NewUserClient(u.config).QueryPurchasedApp(u)
}

// QueryApp queries the "app" edge of the User entity.
func (u *User) QueryApp() *AppQuery {
	return NewUserClient(u.config).QueryApp(u)
}

// QueryAppInst queries the "app_inst" edge of the User entity.
func (u *User) QueryAppInst() *AppInstQuery {
	return NewUserClient(u.config).QueryAppInst(u)
}

// QueryFeedConfig queries the "feed_config" edge of the User entity.
func (u *User) QueryFeedConfig() *FeedConfigQuery {
	return NewUserClient(u.config).QueryFeedConfig(u)
}

// QueryFeedActionSet queries the "feed_action_set" edge of the User entity.
func (u *User) QueryFeedActionSet() *FeedActionSetQuery {
	return NewUserClient(u.config).QueryFeedActionSet(u)
}

// QueryFeedItemCollection queries the "feed_item_collection" edge of the User entity.
func (u *User) QueryFeedItemCollection() *FeedItemCollectionQuery {
	return NewUserClient(u.config).QueryFeedItemCollection(u)
}

// QueryNotifySource queries the "notify_source" edge of the User entity.
func (u *User) QueryNotifySource() *NotifySourceQuery {
	return NewUserClient(u.config).QueryNotifySource(u)
}

// QueryNotifyTarget queries the "notify_target" edge of the User entity.
func (u *User) QueryNotifyTarget() *NotifyTargetQuery {
	return NewUserClient(u.config).QueryNotifyTarget(u)
}

// QueryNotifyFlow queries the "notify_flow" edge of the User entity.
func (u *User) QueryNotifyFlow() *NotifyFlowQuery {
	return NewUserClient(u.config).QueryNotifyFlow(u)
}

// QueryImage queries the "image" edge of the User entity.
func (u *User) QueryImage() *ImageQuery {
	return NewUserClient(u.config).QueryImage(u)
}

// QueryFile queries the "file" edge of the User entity.
func (u *User) QueryFile() *FileQuery {
	return NewUserClient(u.config).QueryFile(u)
}

// QueryDeviceInfo queries the "device_info" edge of the User entity.
func (u *User) QueryDeviceInfo() *DeviceInfoQuery {
	return NewUserClient(u.config).QueryDeviceInfo(u)
}

// QueryTag queries the "tag" edge of the User entity.
func (u *User) QueryTag() *TagQuery {
	return NewUserClient(u.config).QueryTag(u)
}

// QueryPorterContext queries the "porter_context" edge of the User entity.
func (u *User) QueryPorterContext() *PorterContextQuery {
	return NewUserClient(u.config).QueryPorterContext(u)
}

// QueryCreator queries the "creator" edge of the User entity.
func (u *User) QueryCreator() *UserQuery {
	return NewUserClient(u.config).QueryCreator(u)
}

// QueryCreatedUser queries the "created_user" edge of the User entity.
func (u *User) QueryCreatedUser() *UserQuery {
	return NewUserClient(u.config).QueryCreatedUser(u)
}

// QueryUserDevice queries the "user_device" edge of the User entity.
func (u *User) QueryUserDevice() *UserDeviceQuery {
	return NewUserClient(u.config).QueryUserDevice(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", u.Type))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
