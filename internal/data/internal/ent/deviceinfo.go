// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/deviceinfo"
	"github.com/tuihub/librarian/internal/model"
)

// DeviceInfo is the model entity for the DeviceInfo schema.
type DeviceInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// DeviceName holds the value of the "device_name" field.
	DeviceName string `json:"device_name,omitempty"`
	// SystemType holds the value of the "system_type" field.
	SystemType deviceinfo.SystemType `json:"system_type,omitempty"`
	// SystemVersion holds the value of the "system_version" field.
	SystemVersion string `json:"system_version,omitempty"`
	// ClientName holds the value of the "client_name" field.
	ClientName string `json:"client_name,omitempty"`
	// ClientSourceCodeAddress holds the value of the "client_source_code_address" field.
	ClientSourceCodeAddress string `json:"client_source_code_address,omitempty"`
	// ClientVersion holds the value of the "client_version" field.
	ClientVersion string `json:"client_version,omitempty"`
	// ClientLocalID holds the value of the "client_local_id" field.
	ClientLocalID string `json:"client_local_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeviceInfoQuery when eager-loading is set.
	Edges        DeviceInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DeviceInfoEdges holds the relations/edges for other nodes in the graph.
type DeviceInfoEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// UserSession holds the value of the user_session edge.
	UserSession []*UserSession `json:"user_session,omitempty"`
	// UserDevice holds the value of the user_device edge.
	UserDevice []*UserDevice `json:"user_device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e DeviceInfoEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// UserSessionOrErr returns the UserSession value or an error if the edge
// was not loaded in eager-loading.
func (e DeviceInfoEdges) UserSessionOrErr() ([]*UserSession, error) {
	if e.loadedTypes[1] {
		return e.UserSession, nil
	}
	return nil, &NotLoadedError{edge: "user_session"}
}

// UserDeviceOrErr returns the UserDevice value or an error if the edge
// was not loaded in eager-loading.
func (e DeviceInfoEdges) UserDeviceOrErr() ([]*UserDevice, error) {
	if e.loadedTypes[2] {
		return e.UserDevice, nil
	}
	return nil, &NotLoadedError{edge: "user_device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeviceInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deviceinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case deviceinfo.FieldDeviceName, deviceinfo.FieldSystemType, deviceinfo.FieldSystemVersion, deviceinfo.FieldClientName, deviceinfo.FieldClientSourceCodeAddress, deviceinfo.FieldClientVersion, deviceinfo.FieldClientLocalID:
			values[i] = new(sql.NullString)
		case deviceinfo.FieldUpdatedAt, deviceinfo.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeviceInfo fields.
func (di *DeviceInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deviceinfo.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				di.ID = model.InternalID(value.Int64)
			}
		case deviceinfo.FieldDeviceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_name", values[i])
			} else if value.Valid {
				di.DeviceName = value.String
			}
		case deviceinfo.FieldSystemType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_type", values[i])
			} else if value.Valid {
				di.SystemType = deviceinfo.SystemType(value.String)
			}
		case deviceinfo.FieldSystemVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_version", values[i])
			} else if value.Valid {
				di.SystemVersion = value.String
			}
		case deviceinfo.FieldClientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_name", values[i])
			} else if value.Valid {
				di.ClientName = value.String
			}
		case deviceinfo.FieldClientSourceCodeAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_source_code_address", values[i])
			} else if value.Valid {
				di.ClientSourceCodeAddress = value.String
			}
		case deviceinfo.FieldClientVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_version", values[i])
			} else if value.Valid {
				di.ClientVersion = value.String
			}
		case deviceinfo.FieldClientLocalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_local_id", values[i])
			} else if value.Valid {
				di.ClientLocalID = value.String
			}
		case deviceinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				di.UpdatedAt = value.Time
			}
		case deviceinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				di.CreatedAt = value.Time
			}
		default:
			di.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeviceInfo.
// This includes values selected through modifiers, order, etc.
func (di *DeviceInfo) Value(name string) (ent.Value, error) {
	return di.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the DeviceInfo entity.
func (di *DeviceInfo) QueryUser() *UserQuery {
	return NewDeviceInfoClient(di.config).QueryUser(di)
}

// QueryUserSession queries the "user_session" edge of the DeviceInfo entity.
func (di *DeviceInfo) QueryUserSession() *UserSessionQuery {
	return NewDeviceInfoClient(di.config).QueryUserSession(di)
}

// QueryUserDevice queries the "user_device" edge of the DeviceInfo entity.
func (di *DeviceInfo) QueryUserDevice() *UserDeviceQuery {
	return NewDeviceInfoClient(di.config).QueryUserDevice(di)
}

// Update returns a builder for updating this DeviceInfo.
// Note that you need to call DeviceInfo.Unwrap() before calling this method if this DeviceInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (di *DeviceInfo) Update() *DeviceInfoUpdateOne {
	return NewDeviceInfoClient(di.config).UpdateOne(di)
}

// Unwrap unwraps the DeviceInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (di *DeviceInfo) Unwrap() *DeviceInfo {
	_tx, ok := di.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeviceInfo is not a transactional entity")
	}
	di.config.driver = _tx.drv
	return di
}

// String implements the fmt.Stringer.
func (di *DeviceInfo) String() string {
	var builder strings.Builder
	builder.WriteString("DeviceInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", di.ID))
	builder.WriteString("device_name=")
	builder.WriteString(di.DeviceName)
	builder.WriteString(", ")
	builder.WriteString("system_type=")
	builder.WriteString(fmt.Sprintf("%v", di.SystemType))
	builder.WriteString(", ")
	builder.WriteString("system_version=")
	builder.WriteString(di.SystemVersion)
	builder.WriteString(", ")
	builder.WriteString("client_name=")
	builder.WriteString(di.ClientName)
	builder.WriteString(", ")
	builder.WriteString("client_source_code_address=")
	builder.WriteString(di.ClientSourceCodeAddress)
	builder.WriteString(", ")
	builder.WriteString("client_version=")
	builder.WriteString(di.ClientVersion)
	builder.WriteString(", ")
	builder.WriteString("client_local_id=")
	builder.WriteString(di.ClientLocalID)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(di.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(di.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DeviceInfos is a parsable slice of DeviceInfo.
type DeviceInfos []*DeviceInfo
