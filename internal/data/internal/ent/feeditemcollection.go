// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditemcollection"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// FeedItemCollection is the model entity for the FeedItemCollection schema.
type FeedItemCollection struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedItemCollectionQuery when eager-loading is set.
	Edges                     FeedItemCollectionEdges `json:"edges"`
	user_feed_item_collection *model.InternalID
	selectValues              sql.SelectValues
}

// FeedItemCollectionEdges holds the relations/edges for other nodes in the graph.
type FeedItemCollectionEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// FeedItem holds the value of the feed_item edge.
	FeedItem []*FeedItem `json:"feed_item,omitempty"`
	// NotifySource holds the value of the notify_source edge.
	NotifySource []*NotifySource `json:"notify_source,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeedItemCollectionEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// FeedItemOrErr returns the FeedItem value or an error if the edge
// was not loaded in eager-loading.
func (e FeedItemCollectionEdges) FeedItemOrErr() ([]*FeedItem, error) {
	if e.loadedTypes[1] {
		return e.FeedItem, nil
	}
	return nil, &NotLoadedError{edge: "feed_item"}
}

// NotifySourceOrErr returns the NotifySource value or an error if the edge
// was not loaded in eager-loading.
func (e FeedItemCollectionEdges) NotifySourceOrErr() ([]*NotifySource, error) {
	if e.loadedTypes[2] {
		return e.NotifySource, nil
	}
	return nil, &NotLoadedError{edge: "notify_source"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeedItemCollection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feeditemcollection.FieldID:
			values[i] = new(sql.NullInt64)
		case feeditemcollection.FieldName, feeditemcollection.FieldDescription, feeditemcollection.FieldCategory:
			values[i] = new(sql.NullString)
		case feeditemcollection.FieldUpdatedAt, feeditemcollection.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case feeditemcollection.ForeignKeys[0]: // user_feed_item_collection
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeedItemCollection fields.
func (fic *FeedItemCollection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feeditemcollection.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				fic.ID = model.InternalID(value.Int64)
			}
		case feeditemcollection.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fic.Name = value.String
			}
		case feeditemcollection.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fic.Description = value.String
			}
		case feeditemcollection.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				fic.Category = value.String
			}
		case feeditemcollection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fic.UpdatedAt = value.Time
			}
		case feeditemcollection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fic.CreatedAt = value.Time
			}
		case feeditemcollection.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_feed_item_collection", values[i])
			} else if value.Valid {
				fic.user_feed_item_collection = new(model.InternalID)
				*fic.user_feed_item_collection = model.InternalID(value.Int64)
			}
		default:
			fic.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FeedItemCollection.
// This includes values selected through modifiers, order, etc.
func (fic *FeedItemCollection) Value(name string) (ent.Value, error) {
	return fic.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the FeedItemCollection entity.
func (fic *FeedItemCollection) QueryOwner() *UserQuery {
	return NewFeedItemCollectionClient(fic.config).QueryOwner(fic)
}

// QueryFeedItem queries the "feed_item" edge of the FeedItemCollection entity.
func (fic *FeedItemCollection) QueryFeedItem() *FeedItemQuery {
	return NewFeedItemCollectionClient(fic.config).QueryFeedItem(fic)
}

// QueryNotifySource queries the "notify_source" edge of the FeedItemCollection entity.
func (fic *FeedItemCollection) QueryNotifySource() *NotifySourceQuery {
	return NewFeedItemCollectionClient(fic.config).QueryNotifySource(fic)
}

// Update returns a builder for updating this FeedItemCollection.
// Note that you need to call FeedItemCollection.Unwrap() before calling this method if this FeedItemCollection
// was returned from a transaction, and the transaction was committed or rolled back.
func (fic *FeedItemCollection) Update() *FeedItemCollectionUpdateOne {
	return NewFeedItemCollectionClient(fic.config).UpdateOne(fic)
}

// Unwrap unwraps the FeedItemCollection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fic *FeedItemCollection) Unwrap() *FeedItemCollection {
	_tx, ok := fic.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeedItemCollection is not a transactional entity")
	}
	fic.config.driver = _tx.drv
	return fic
}

// String implements the fmt.Stringer.
func (fic *FeedItemCollection) String() string {
	var builder strings.Builder
	builder.WriteString("FeedItemCollection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fic.ID))
	builder.WriteString("name=")
	builder.WriteString(fic.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fic.Description)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fic.Category)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fic.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fic.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FeedItemCollections is a parsable slice of FeedItemCollection.
type FeedItemCollections []*FeedItemCollection
