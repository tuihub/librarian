// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflow"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
)

// NotifyFlowDelete is the builder for deleting a NotifyFlow entity.
type NotifyFlowDelete struct {
	config
	hooks    []Hook
	mutation *NotifyFlowMutation
}

// Where appends a list predicates to the NotifyFlowDelete builder.
func (nfd *NotifyFlowDelete) Where(ps ...predicate.NotifyFlow) *NotifyFlowDelete {
	nfd.mutation.Where(ps...)
	return nfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nfd *NotifyFlowDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nfd.sqlExec, nfd.mutation, nfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nfd *NotifyFlowDelete) ExecX(ctx context.Context) int {
	n, err := nfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nfd *NotifyFlowDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(notifyflow.Table, sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64))
	if ps := nfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nfd.mutation.done = true
	return affected, err
}

// NotifyFlowDeleteOne is the builder for deleting a single NotifyFlow entity.
type NotifyFlowDeleteOne struct {
	nfd *NotifyFlowDelete
}

// Where appends a list predicates to the NotifyFlowDelete builder.
func (nfdo *NotifyFlowDeleteOne) Where(ps ...predicate.NotifyFlow) *NotifyFlowDeleteOne {
	nfdo.nfd.mutation.Where(ps...)
	return nfdo
}

// Exec executes the deletion query.
func (nfdo *NotifyFlowDeleteOne) Exec(ctx context.Context) error {
	n, err := nfdo.nfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{notifyflow.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nfdo *NotifyFlowDeleteOne) ExecX(ctx context.Context) {
	if err := nfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
