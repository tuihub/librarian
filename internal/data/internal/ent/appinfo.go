// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinfo"
	"github.com/tuihub/librarian/internal/model"
)

// AppInfo is the model entity for the AppInfo schema.
type AppInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// Internal holds the value of the "internal" field.
	Internal bool `json:"internal,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// SourceAppID holds the value of the "source_app_id" field.
	SourceAppID string `json:"source_app_id,omitempty"`
	// SourceURL holds the value of the "source_url" field.
	SourceURL string `json:"source_url,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type appinfo.Type `json:"type,omitempty"`
	// ShortDescription holds the value of the "short_description" field.
	ShortDescription string `json:"short_description,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// IconImageURL holds the value of the "icon_image_url" field.
	IconImageURL string `json:"icon_image_url,omitempty"`
	// BackgroundImageURL holds the value of the "background_image_url" field.
	BackgroundImageURL string `json:"background_image_url,omitempty"`
	// CoverImageURL holds the value of the "cover_image_url" field.
	CoverImageURL string `json:"cover_image_url,omitempty"`
	// ReleaseDate holds the value of the "release_date" field.
	ReleaseDate string `json:"release_date,omitempty"`
	// Developer holds the value of the "developer" field.
	Developer string `json:"developer,omitempty"`
	// Publisher holds the value of the "publisher" field.
	Publisher string `json:"publisher,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppInfoQuery when eager-loading is set.
	Edges                  AppInfoEdges `json:"edges"`
	app_info_bind_external *model.InternalID
	selectValues           sql.SelectValues
}

// AppInfoEdges holds the relations/edges for other nodes in the graph.
type AppInfoEdges struct {
	// PurchasedByAccount holds the value of the purchased_by_account edge.
	PurchasedByAccount []*Account `json:"purchased_by_account,omitempty"`
	// PurchasedByUser holds the value of the purchased_by_user edge.
	PurchasedByUser []*User `json:"purchased_by_user,omitempty"`
	// App holds the value of the app edge.
	App []*App `json:"app,omitempty"`
	// AppBinary holds the value of the app_binary edge.
	AppBinary []*AppBinary `json:"app_binary,omitempty"`
	// BindInternal holds the value of the bind_internal edge.
	BindInternal *AppInfo `json:"bind_internal,omitempty"`
	// BindExternal holds the value of the bind_external edge.
	BindExternal []*AppInfo `json:"bind_external,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// PurchasedByAccountOrErr returns the PurchasedByAccount value or an error if the edge
// was not loaded in eager-loading.
func (e AppInfoEdges) PurchasedByAccountOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.PurchasedByAccount, nil
	}
	return nil, &NotLoadedError{edge: "purchased_by_account"}
}

// PurchasedByUserOrErr returns the PurchasedByUser value or an error if the edge
// was not loaded in eager-loading.
func (e AppInfoEdges) PurchasedByUserOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.PurchasedByUser, nil
	}
	return nil, &NotLoadedError{edge: "purchased_by_user"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading.
func (e AppInfoEdges) AppOrErr() ([]*App, error) {
	if e.loadedTypes[2] {
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// AppBinaryOrErr returns the AppBinary value or an error if the edge
// was not loaded in eager-loading.
func (e AppInfoEdges) AppBinaryOrErr() ([]*AppBinary, error) {
	if e.loadedTypes[3] {
		return e.AppBinary, nil
	}
	return nil, &NotLoadedError{edge: "app_binary"}
}

// BindInternalOrErr returns the BindInternal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppInfoEdges) BindInternalOrErr() (*AppInfo, error) {
	if e.BindInternal != nil {
		return e.BindInternal, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: appinfo.Label}
	}
	return nil, &NotLoadedError{edge: "bind_internal"}
}

// BindExternalOrErr returns the BindExternal value or an error if the edge
// was not loaded in eager-loading.
func (e AppInfoEdges) BindExternalOrErr() ([]*AppInfo, error) {
	if e.loadedTypes[5] {
		return e.BindExternal, nil
	}
	return nil, &NotLoadedError{edge: "bind_external"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appinfo.FieldInternal:
			values[i] = new(sql.NullBool)
		case appinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case appinfo.FieldSource, appinfo.FieldSourceAppID, appinfo.FieldSourceURL, appinfo.FieldName, appinfo.FieldType, appinfo.FieldShortDescription, appinfo.FieldDescription, appinfo.FieldIconImageURL, appinfo.FieldBackgroundImageURL, appinfo.FieldCoverImageURL, appinfo.FieldReleaseDate, appinfo.FieldDeveloper, appinfo.FieldPublisher, appinfo.FieldVersion:
			values[i] = new(sql.NullString)
		case appinfo.FieldUpdatedAt, appinfo.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case appinfo.ForeignKeys[0]: // app_info_bind_external
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppInfo fields.
func (ai *AppInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appinfo.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ai.ID = model.InternalID(value.Int64)
			}
		case appinfo.FieldInternal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field internal", values[i])
			} else if value.Valid {
				ai.Internal = value.Bool
			}
		case appinfo.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				ai.Source = value.String
			}
		case appinfo.FieldSourceAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_app_id", values[i])
			} else if value.Valid {
				ai.SourceAppID = value.String
			}
		case appinfo.FieldSourceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_url", values[i])
			} else if value.Valid {
				ai.SourceURL = value.String
			}
		case appinfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ai.Name = value.String
			}
		case appinfo.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ai.Type = appinfo.Type(value.String)
			}
		case appinfo.FieldShortDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_description", values[i])
			} else if value.Valid {
				ai.ShortDescription = value.String
			}
		case appinfo.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ai.Description = value.String
			}
		case appinfo.FieldIconImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_image_url", values[i])
			} else if value.Valid {
				ai.IconImageURL = value.String
			}
		case appinfo.FieldBackgroundImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field background_image_url", values[i])
			} else if value.Valid {
				ai.BackgroundImageURL = value.String
			}
		case appinfo.FieldCoverImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover_image_url", values[i])
			} else if value.Valid {
				ai.CoverImageURL = value.String
			}
		case appinfo.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field release_date", values[i])
			} else if value.Valid {
				ai.ReleaseDate = value.String
			}
		case appinfo.FieldDeveloper:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field developer", values[i])
			} else if value.Valid {
				ai.Developer = value.String
			}
		case appinfo.FieldPublisher:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publisher", values[i])
			} else if value.Valid {
				ai.Publisher = value.String
			}
		case appinfo.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ai.Version = value.String
			}
		case appinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ai.UpdatedAt = value.Time
			}
		case appinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ai.CreatedAt = value.Time
			}
		case appinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_info_bind_external", values[i])
			} else if value.Valid {
				ai.app_info_bind_external = new(model.InternalID)
				*ai.app_info_bind_external = model.InternalID(value.Int64)
			}
		default:
			ai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppInfo.
// This includes values selected through modifiers, order, etc.
func (ai *AppInfo) Value(name string) (ent.Value, error) {
	return ai.selectValues.Get(name)
}

// QueryPurchasedByAccount queries the "purchased_by_account" edge of the AppInfo entity.
func (ai *AppInfo) QueryPurchasedByAccount() *AccountQuery {
	return NewAppInfoClient(ai.config).QueryPurchasedByAccount(ai)
}

// QueryPurchasedByUser queries the "purchased_by_user" edge of the AppInfo entity.
func (ai *AppInfo) QueryPurchasedByUser() *UserQuery {
	return NewAppInfoClient(ai.config).QueryPurchasedByUser(ai)
}

// QueryApp queries the "app" edge of the AppInfo entity.
func (ai *AppInfo) QueryApp() *AppQuery {
	return NewAppInfoClient(ai.config).QueryApp(ai)
}

// QueryAppBinary queries the "app_binary" edge of the AppInfo entity.
func (ai *AppInfo) QueryAppBinary() *AppBinaryQuery {
	return NewAppInfoClient(ai.config).QueryAppBinary(ai)
}

// QueryBindInternal queries the "bind_internal" edge of the AppInfo entity.
func (ai *AppInfo) QueryBindInternal() *AppInfoQuery {
	return NewAppInfoClient(ai.config).QueryBindInternal(ai)
}

// QueryBindExternal queries the "bind_external" edge of the AppInfo entity.
func (ai *AppInfo) QueryBindExternal() *AppInfoQuery {
	return NewAppInfoClient(ai.config).QueryBindExternal(ai)
}

// Update returns a builder for updating this AppInfo.
// Note that you need to call AppInfo.Unwrap() before calling this method if this AppInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AppInfo) Update() *AppInfoUpdateOne {
	return NewAppInfoClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the AppInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AppInfo) Unwrap() *AppInfo {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppInfo is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AppInfo) String() string {
	var builder strings.Builder
	builder.WriteString("AppInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("internal=")
	builder.WriteString(fmt.Sprintf("%v", ai.Internal))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(ai.Source)
	builder.WriteString(", ")
	builder.WriteString("source_app_id=")
	builder.WriteString(ai.SourceAppID)
	builder.WriteString(", ")
	builder.WriteString("source_url=")
	builder.WriteString(ai.SourceURL)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ai.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ai.Type))
	builder.WriteString(", ")
	builder.WriteString("short_description=")
	builder.WriteString(ai.ShortDescription)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ai.Description)
	builder.WriteString(", ")
	builder.WriteString("icon_image_url=")
	builder.WriteString(ai.IconImageURL)
	builder.WriteString(", ")
	builder.WriteString("background_image_url=")
	builder.WriteString(ai.BackgroundImageURL)
	builder.WriteString(", ")
	builder.WriteString("cover_image_url=")
	builder.WriteString(ai.CoverImageURL)
	builder.WriteString(", ")
	builder.WriteString("release_date=")
	builder.WriteString(ai.ReleaseDate)
	builder.WriteString(", ")
	builder.WriteString("developer=")
	builder.WriteString(ai.Developer)
	builder.WriteString(", ")
	builder.WriteString("publisher=")
	builder.WriteString(ai.Publisher)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(ai.Version)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ai.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ai.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppInfos is a parsable slice of AppInfo.
type AppInfos []*AppInfo
