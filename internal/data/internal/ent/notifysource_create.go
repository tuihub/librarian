// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditemcollection"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflow"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflowsource"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifysource"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// NotifySourceCreate is the builder for creating a NotifySource entity.
type NotifySourceCreate struct {
	config
	mutation *NotifySourceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFeedConfigID sets the "feed_config_id" field.
func (nsc *NotifySourceCreate) SetFeedConfigID(mi model.InternalID) *NotifySourceCreate {
	nsc.mutation.SetFeedConfigID(mi)
	return nsc
}

// SetNillableFeedConfigID sets the "feed_config_id" field if the given value is not nil.
func (nsc *NotifySourceCreate) SetNillableFeedConfigID(mi *model.InternalID) *NotifySourceCreate {
	if mi != nil {
		nsc.SetFeedConfigID(*mi)
	}
	return nsc
}

// SetFeedItemCollectionID sets the "feed_item_collection_id" field.
func (nsc *NotifySourceCreate) SetFeedItemCollectionID(mi model.InternalID) *NotifySourceCreate {
	nsc.mutation.SetFeedItemCollectionID(mi)
	return nsc
}

// SetNillableFeedItemCollectionID sets the "feed_item_collection_id" field if the given value is not nil.
func (nsc *NotifySourceCreate) SetNillableFeedItemCollectionID(mi *model.InternalID) *NotifySourceCreate {
	if mi != nil {
		nsc.SetFeedItemCollectionID(*mi)
	}
	return nsc
}

// SetUpdatedAt sets the "updated_at" field.
func (nsc *NotifySourceCreate) SetUpdatedAt(t time.Time) *NotifySourceCreate {
	nsc.mutation.SetUpdatedAt(t)
	return nsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nsc *NotifySourceCreate) SetNillableUpdatedAt(t *time.Time) *NotifySourceCreate {
	if t != nil {
		nsc.SetUpdatedAt(*t)
	}
	return nsc
}

// SetCreatedAt sets the "created_at" field.
func (nsc *NotifySourceCreate) SetCreatedAt(t time.Time) *NotifySourceCreate {
	nsc.mutation.SetCreatedAt(t)
	return nsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nsc *NotifySourceCreate) SetNillableCreatedAt(t *time.Time) *NotifySourceCreate {
	if t != nil {
		nsc.SetCreatedAt(*t)
	}
	return nsc
}

// SetID sets the "id" field.
func (nsc *NotifySourceCreate) SetID(mi model.InternalID) *NotifySourceCreate {
	nsc.mutation.SetID(mi)
	return nsc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (nsc *NotifySourceCreate) SetOwnerID(id model.InternalID) *NotifySourceCreate {
	nsc.mutation.SetOwnerID(id)
	return nsc
}

// SetOwner sets the "owner" edge to the User entity.
func (nsc *NotifySourceCreate) SetOwner(u *User) *NotifySourceCreate {
	return nsc.SetOwnerID(u.ID)
}

// AddNotifyFlowIDs adds the "notify_flow" edge to the NotifyFlow entity by IDs.
func (nsc *NotifySourceCreate) AddNotifyFlowIDs(ids ...model.InternalID) *NotifySourceCreate {
	nsc.mutation.AddNotifyFlowIDs(ids...)
	return nsc
}

// AddNotifyFlow adds the "notify_flow" edges to the NotifyFlow entity.
func (nsc *NotifySourceCreate) AddNotifyFlow(n ...*NotifyFlow) *NotifySourceCreate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nsc.AddNotifyFlowIDs(ids...)
}

// SetFeedConfig sets the "feed_config" edge to the FeedConfig entity.
func (nsc *NotifySourceCreate) SetFeedConfig(f *FeedConfig) *NotifySourceCreate {
	return nsc.SetFeedConfigID(f.ID)
}

// SetFeedItemCollection sets the "feed_item_collection" edge to the FeedItemCollection entity.
func (nsc *NotifySourceCreate) SetFeedItemCollection(f *FeedItemCollection) *NotifySourceCreate {
	return nsc.SetFeedItemCollectionID(f.ID)
}

// AddNotifyFlowSourceIDs adds the "notify_flow_source" edge to the NotifyFlowSource entity by IDs.
func (nsc *NotifySourceCreate) AddNotifyFlowSourceIDs(ids ...int) *NotifySourceCreate {
	nsc.mutation.AddNotifyFlowSourceIDs(ids...)
	return nsc
}

// AddNotifyFlowSource adds the "notify_flow_source" edges to the NotifyFlowSource entity.
func (nsc *NotifySourceCreate) AddNotifyFlowSource(n ...*NotifyFlowSource) *NotifySourceCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nsc.AddNotifyFlowSourceIDs(ids...)
}

// Mutation returns the NotifySourceMutation object of the builder.
func (nsc *NotifySourceCreate) Mutation() *NotifySourceMutation {
	return nsc.mutation
}

// Save creates the NotifySource in the database.
func (nsc *NotifySourceCreate) Save(ctx context.Context) (*NotifySource, error) {
	nsc.defaults()
	return withHooks(ctx, nsc.sqlSave, nsc.mutation, nsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nsc *NotifySourceCreate) SaveX(ctx context.Context) *NotifySource {
	v, err := nsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nsc *NotifySourceCreate) Exec(ctx context.Context) error {
	_, err := nsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsc *NotifySourceCreate) ExecX(ctx context.Context) {
	if err := nsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nsc *NotifySourceCreate) defaults() {
	if _, ok := nsc.mutation.UpdatedAt(); !ok {
		v := notifysource.DefaultUpdatedAt()
		nsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nsc.mutation.CreatedAt(); !ok {
		v := notifysource.DefaultCreatedAt()
		nsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsc *NotifySourceCreate) check() error {
	if _, ok := nsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NotifySource.updated_at"`)}
	}
	if _, ok := nsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NotifySource.created_at"`)}
	}
	if len(nsc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "NotifySource.owner"`)}
	}
	return nil
}

func (nsc *NotifySourceCreate) sqlSave(ctx context.Context) (*NotifySource, error) {
	if err := nsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	nsc.mutation.id = &_node.ID
	nsc.mutation.done = true
	return _node, nil
}

func (nsc *NotifySourceCreate) createSpec() (*NotifySource, *sqlgraph.CreateSpec) {
	var (
		_node = &NotifySource{config: nsc.config}
		_spec = sqlgraph.NewCreateSpec(notifysource.Table, sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = nsc.conflict
	if id, ok := nsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nsc.mutation.UpdatedAt(); ok {
		_spec.SetField(notifysource.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := nsc.mutation.CreatedAt(); ok {
		_spec.SetField(notifysource.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := nsc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifysource.OwnerTable,
			Columns: []string{notifysource.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_notify_source = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nsc.mutation.NotifyFlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notifysource.NotifyFlowTable,
			Columns: notifysource.NotifyFlowPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NotifyFlowSourceCreate{config: nsc.config, mutation: newNotifyFlowSourceMutation(nsc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nsc.mutation.FeedConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifysource.FeedConfigTable,
			Columns: []string{notifysource.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeedConfigID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nsc.mutation.FeedItemCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifysource.FeedItemCollectionTable,
			Columns: []string{notifysource.FeedItemCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeedItemCollectionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nsc.mutation.NotifyFlowSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   notifysource.NotifyFlowSourceTable,
			Columns: []string{notifysource.NotifyFlowSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflowsource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotifySource.Create().
//		SetFeedConfigID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotifySourceUpsert) {
//			SetFeedConfigID(v+v).
//		}).
//		Exec(ctx)
func (nsc *NotifySourceCreate) OnConflict(opts ...sql.ConflictOption) *NotifySourceUpsertOne {
	nsc.conflict = opts
	return &NotifySourceUpsertOne{
		create: nsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotifySource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nsc *NotifySourceCreate) OnConflictColumns(columns ...string) *NotifySourceUpsertOne {
	nsc.conflict = append(nsc.conflict, sql.ConflictColumns(columns...))
	return &NotifySourceUpsertOne{
		create: nsc,
	}
}

type (
	// NotifySourceUpsertOne is the builder for "upsert"-ing
	//  one NotifySource node.
	NotifySourceUpsertOne struct {
		create *NotifySourceCreate
	}

	// NotifySourceUpsert is the "OnConflict" setter.
	NotifySourceUpsert struct {
		*sql.UpdateSet
	}
)

// SetFeedConfigID sets the "feed_config_id" field.
func (u *NotifySourceUpsert) SetFeedConfigID(v model.InternalID) *NotifySourceUpsert {
	u.Set(notifysource.FieldFeedConfigID, v)
	return u
}

// UpdateFeedConfigID sets the "feed_config_id" field to the value that was provided on create.
func (u *NotifySourceUpsert) UpdateFeedConfigID() *NotifySourceUpsert {
	u.SetExcluded(notifysource.FieldFeedConfigID)
	return u
}

// ClearFeedConfigID clears the value of the "feed_config_id" field.
func (u *NotifySourceUpsert) ClearFeedConfigID() *NotifySourceUpsert {
	u.SetNull(notifysource.FieldFeedConfigID)
	return u
}

// SetFeedItemCollectionID sets the "feed_item_collection_id" field.
func (u *NotifySourceUpsert) SetFeedItemCollectionID(v model.InternalID) *NotifySourceUpsert {
	u.Set(notifysource.FieldFeedItemCollectionID, v)
	return u
}

// UpdateFeedItemCollectionID sets the "feed_item_collection_id" field to the value that was provided on create.
func (u *NotifySourceUpsert) UpdateFeedItemCollectionID() *NotifySourceUpsert {
	u.SetExcluded(notifysource.FieldFeedItemCollectionID)
	return u
}

// ClearFeedItemCollectionID clears the value of the "feed_item_collection_id" field.
func (u *NotifySourceUpsert) ClearFeedItemCollectionID() *NotifySourceUpsert {
	u.SetNull(notifysource.FieldFeedItemCollectionID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifySourceUpsert) SetUpdatedAt(v time.Time) *NotifySourceUpsert {
	u.Set(notifysource.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifySourceUpsert) UpdateUpdatedAt() *NotifySourceUpsert {
	u.SetExcluded(notifysource.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *NotifySourceUpsert) SetCreatedAt(v time.Time) *NotifySourceUpsert {
	u.Set(notifysource.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifySourceUpsert) UpdateCreatedAt() *NotifySourceUpsert {
	u.SetExcluded(notifysource.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotifySource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notifysource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotifySourceUpsertOne) UpdateNewValues() *NotifySourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notifysource.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotifySource.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotifySourceUpsertOne) Ignore() *NotifySourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotifySourceUpsertOne) DoNothing() *NotifySourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotifySourceCreate.OnConflict
// documentation for more info.
func (u *NotifySourceUpsertOne) Update(set func(*NotifySourceUpsert)) *NotifySourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotifySourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetFeedConfigID sets the "feed_config_id" field.
func (u *NotifySourceUpsertOne) SetFeedConfigID(v model.InternalID) *NotifySourceUpsertOne {
	return u.Update(func(s *NotifySourceUpsert) {
		s.SetFeedConfigID(v)
	})
}

// UpdateFeedConfigID sets the "feed_config_id" field to the value that was provided on create.
func (u *NotifySourceUpsertOne) UpdateFeedConfigID() *NotifySourceUpsertOne {
	return u.Update(func(s *NotifySourceUpsert) {
		s.UpdateFeedConfigID()
	})
}

// ClearFeedConfigID clears the value of the "feed_config_id" field.
func (u *NotifySourceUpsertOne) ClearFeedConfigID() *NotifySourceUpsertOne {
	return u.Update(func(s *NotifySourceUpsert) {
		s.ClearFeedConfigID()
	})
}

// SetFeedItemCollectionID sets the "feed_item_collection_id" field.
func (u *NotifySourceUpsertOne) SetFeedItemCollectionID(v model.InternalID) *NotifySourceUpsertOne {
	return u.Update(func(s *NotifySourceUpsert) {
		s.SetFeedItemCollectionID(v)
	})
}

// UpdateFeedItemCollectionID sets the "feed_item_collection_id" field to the value that was provided on create.
func (u *NotifySourceUpsertOne) UpdateFeedItemCollectionID() *NotifySourceUpsertOne {
	return u.Update(func(s *NotifySourceUpsert) {
		s.UpdateFeedItemCollectionID()
	})
}

// ClearFeedItemCollectionID clears the value of the "feed_item_collection_id" field.
func (u *NotifySourceUpsertOne) ClearFeedItemCollectionID() *NotifySourceUpsertOne {
	return u.Update(func(s *NotifySourceUpsert) {
		s.ClearFeedItemCollectionID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifySourceUpsertOne) SetUpdatedAt(v time.Time) *NotifySourceUpsertOne {
	return u.Update(func(s *NotifySourceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifySourceUpsertOne) UpdateUpdatedAt() *NotifySourceUpsertOne {
	return u.Update(func(s *NotifySourceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *NotifySourceUpsertOne) SetCreatedAt(v time.Time) *NotifySourceUpsertOne {
	return u.Update(func(s *NotifySourceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifySourceUpsertOne) UpdateCreatedAt() *NotifySourceUpsertOne {
	return u.Update(func(s *NotifySourceUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *NotifySourceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotifySourceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotifySourceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotifySourceUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotifySourceUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotifySourceCreateBulk is the builder for creating many NotifySource entities in bulk.
type NotifySourceCreateBulk struct {
	config
	err      error
	builders []*NotifySourceCreate
	conflict []sql.ConflictOption
}

// Save creates the NotifySource entities in the database.
func (nscb *NotifySourceCreateBulk) Save(ctx context.Context) ([]*NotifySource, error) {
	if nscb.err != nil {
		return nil, nscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nscb.builders))
	nodes := make([]*NotifySource, len(nscb.builders))
	mutators := make([]Mutator, len(nscb.builders))
	for i := range nscb.builders {
		func(i int, root context.Context) {
			builder := nscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotifySourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nscb *NotifySourceCreateBulk) SaveX(ctx context.Context) []*NotifySource {
	v, err := nscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nscb *NotifySourceCreateBulk) Exec(ctx context.Context) error {
	_, err := nscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nscb *NotifySourceCreateBulk) ExecX(ctx context.Context) {
	if err := nscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotifySource.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotifySourceUpsert) {
//			SetFeedConfigID(v+v).
//		}).
//		Exec(ctx)
func (nscb *NotifySourceCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotifySourceUpsertBulk {
	nscb.conflict = opts
	return &NotifySourceUpsertBulk{
		create: nscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotifySource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nscb *NotifySourceCreateBulk) OnConflictColumns(columns ...string) *NotifySourceUpsertBulk {
	nscb.conflict = append(nscb.conflict, sql.ConflictColumns(columns...))
	return &NotifySourceUpsertBulk{
		create: nscb,
	}
}

// NotifySourceUpsertBulk is the builder for "upsert"-ing
// a bulk of NotifySource nodes.
type NotifySourceUpsertBulk struct {
	create *NotifySourceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotifySource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notifysource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotifySourceUpsertBulk) UpdateNewValues() *NotifySourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notifysource.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotifySource.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotifySourceUpsertBulk) Ignore() *NotifySourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotifySourceUpsertBulk) DoNothing() *NotifySourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotifySourceCreateBulk.OnConflict
// documentation for more info.
func (u *NotifySourceUpsertBulk) Update(set func(*NotifySourceUpsert)) *NotifySourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotifySourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetFeedConfigID sets the "feed_config_id" field.
func (u *NotifySourceUpsertBulk) SetFeedConfigID(v model.InternalID) *NotifySourceUpsertBulk {
	return u.Update(func(s *NotifySourceUpsert) {
		s.SetFeedConfigID(v)
	})
}

// UpdateFeedConfigID sets the "feed_config_id" field to the value that was provided on create.
func (u *NotifySourceUpsertBulk) UpdateFeedConfigID() *NotifySourceUpsertBulk {
	return u.Update(func(s *NotifySourceUpsert) {
		s.UpdateFeedConfigID()
	})
}

// ClearFeedConfigID clears the value of the "feed_config_id" field.
func (u *NotifySourceUpsertBulk) ClearFeedConfigID() *NotifySourceUpsertBulk {
	return u.Update(func(s *NotifySourceUpsert) {
		s.ClearFeedConfigID()
	})
}

// SetFeedItemCollectionID sets the "feed_item_collection_id" field.
func (u *NotifySourceUpsertBulk) SetFeedItemCollectionID(v model.InternalID) *NotifySourceUpsertBulk {
	return u.Update(func(s *NotifySourceUpsert) {
		s.SetFeedItemCollectionID(v)
	})
}

// UpdateFeedItemCollectionID sets the "feed_item_collection_id" field to the value that was provided on create.
func (u *NotifySourceUpsertBulk) UpdateFeedItemCollectionID() *NotifySourceUpsertBulk {
	return u.Update(func(s *NotifySourceUpsert) {
		s.UpdateFeedItemCollectionID()
	})
}

// ClearFeedItemCollectionID clears the value of the "feed_item_collection_id" field.
func (u *NotifySourceUpsertBulk) ClearFeedItemCollectionID() *NotifySourceUpsertBulk {
	return u.Update(func(s *NotifySourceUpsert) {
		s.ClearFeedItemCollectionID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifySourceUpsertBulk) SetUpdatedAt(v time.Time) *NotifySourceUpsertBulk {
	return u.Update(func(s *NotifySourceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifySourceUpsertBulk) UpdateUpdatedAt() *NotifySourceUpsertBulk {
	return u.Update(func(s *NotifySourceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *NotifySourceUpsertBulk) SetCreatedAt(v time.Time) *NotifySourceUpsertBulk {
	return u.Update(func(s *NotifySourceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifySourceUpsertBulk) UpdateCreatedAt() *NotifySourceUpsertBulk {
	return u.Update(func(s *NotifySourceUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *NotifySourceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NotifySourceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotifySourceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotifySourceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
