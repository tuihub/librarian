// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/systemnotification"
	"github.com/tuihub/librarian/internal/model"
)

// SystemNotification is the model entity for the SystemNotification schema.
type SystemNotification struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID model.InternalID `json:"user_id,omitempty"`
	// Type holds the value of the "type" field.
	Type systemnotification.Type `json:"type,omitempty"`
	// Level holds the value of the "level" field.
	Level systemnotification.Level `json:"level,omitempty"`
	// Status holds the value of the "status" field.
	Status systemnotification.Status `json:"status,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemNotification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemnotification.FieldID, systemnotification.FieldUserID:
			values[i] = new(sql.NullInt64)
		case systemnotification.FieldType, systemnotification.FieldLevel, systemnotification.FieldStatus, systemnotification.FieldTitle, systemnotification.FieldContent:
			values[i] = new(sql.NullString)
		case systemnotification.FieldUpdatedAt, systemnotification.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemNotification fields.
func (sn *SystemNotification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemnotification.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sn.ID = model.InternalID(value.Int64)
			}
		case systemnotification.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sn.UserID = model.InternalID(value.Int64)
			}
		case systemnotification.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sn.Type = systemnotification.Type(value.String)
			}
		case systemnotification.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				sn.Level = systemnotification.Level(value.String)
			}
		case systemnotification.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sn.Status = systemnotification.Status(value.String)
			}
		case systemnotification.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				sn.Title = value.String
			}
		case systemnotification.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				sn.Content = value.String
			}
		case systemnotification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sn.UpdatedAt = value.Time
			}
		case systemnotification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sn.CreatedAt = value.Time
			}
		default:
			sn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemNotification.
// This includes values selected through modifiers, order, etc.
func (sn *SystemNotification) Value(name string) (ent.Value, error) {
	return sn.selectValues.Get(name)
}

// Update returns a builder for updating this SystemNotification.
// Note that you need to call SystemNotification.Unwrap() before calling this method if this SystemNotification
// was returned from a transaction, and the transaction was committed or rolled back.
func (sn *SystemNotification) Update() *SystemNotificationUpdateOne {
	return NewSystemNotificationClient(sn.config).UpdateOne(sn)
}

// Unwrap unwraps the SystemNotification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sn *SystemNotification) Unwrap() *SystemNotification {
	_tx, ok := sn.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemNotification is not a transactional entity")
	}
	sn.config.driver = _tx.drv
	return sn
}

// String implements the fmt.Stringer.
func (sn *SystemNotification) String() string {
	var builder strings.Builder
	builder.WriteString("SystemNotification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sn.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sn.UserID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", sn.Type))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", sn.Level))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sn.Status))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(sn.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(sn.Content)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sn.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sn.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemNotifications is a parsable slice of SystemNotification.
type SystemNotifications []*SystemNotification
