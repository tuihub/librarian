// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinstruntime"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// AppInstRunTimeUpdate is the builder for updating AppInstRunTime entities.
type AppInstRunTimeUpdate struct {
	config
	hooks    []Hook
	mutation *AppInstRunTimeMutation
}

// Where appends a list predicates to the AppInstRunTimeUpdate builder.
func (airtu *AppInstRunTimeUpdate) Where(ps ...predicate.AppInstRunTime) *AppInstRunTimeUpdate {
	airtu.mutation.Where(ps...)
	return airtu
}

// SetUserID sets the "user_id" field.
func (airtu *AppInstRunTimeUpdate) SetUserID(mi model.InternalID) *AppInstRunTimeUpdate {
	airtu.mutation.ResetUserID()
	airtu.mutation.SetUserID(mi)
	return airtu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (airtu *AppInstRunTimeUpdate) SetNillableUserID(mi *model.InternalID) *AppInstRunTimeUpdate {
	if mi != nil {
		airtu.SetUserID(*mi)
	}
	return airtu
}

// AddUserID adds mi to the "user_id" field.
func (airtu *AppInstRunTimeUpdate) AddUserID(mi model.InternalID) *AppInstRunTimeUpdate {
	airtu.mutation.AddUserID(mi)
	return airtu
}

// SetAppInstID sets the "app_inst_id" field.
func (airtu *AppInstRunTimeUpdate) SetAppInstID(mi model.InternalID) *AppInstRunTimeUpdate {
	airtu.mutation.ResetAppInstID()
	airtu.mutation.SetAppInstID(mi)
	return airtu
}

// SetNillableAppInstID sets the "app_inst_id" field if the given value is not nil.
func (airtu *AppInstRunTimeUpdate) SetNillableAppInstID(mi *model.InternalID) *AppInstRunTimeUpdate {
	if mi != nil {
		airtu.SetAppInstID(*mi)
	}
	return airtu
}

// AddAppInstID adds mi to the "app_inst_id" field.
func (airtu *AppInstRunTimeUpdate) AddAppInstID(mi model.InternalID) *AppInstRunTimeUpdate {
	airtu.mutation.AddAppInstID(mi)
	return airtu
}

// SetStartTime sets the "start_time" field.
func (airtu *AppInstRunTimeUpdate) SetStartTime(t time.Time) *AppInstRunTimeUpdate {
	airtu.mutation.SetStartTime(t)
	return airtu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (airtu *AppInstRunTimeUpdate) SetNillableStartTime(t *time.Time) *AppInstRunTimeUpdate {
	if t != nil {
		airtu.SetStartTime(*t)
	}
	return airtu
}

// SetRunDuration sets the "run_duration" field.
func (airtu *AppInstRunTimeUpdate) SetRunDuration(t time.Duration) *AppInstRunTimeUpdate {
	airtu.mutation.ResetRunDuration()
	airtu.mutation.SetRunDuration(t)
	return airtu
}

// SetNillableRunDuration sets the "run_duration" field if the given value is not nil.
func (airtu *AppInstRunTimeUpdate) SetNillableRunDuration(t *time.Duration) *AppInstRunTimeUpdate {
	if t != nil {
		airtu.SetRunDuration(*t)
	}
	return airtu
}

// AddRunDuration adds t to the "run_duration" field.
func (airtu *AppInstRunTimeUpdate) AddRunDuration(t time.Duration) *AppInstRunTimeUpdate {
	airtu.mutation.AddRunDuration(t)
	return airtu
}

// SetUpdatedAt sets the "updated_at" field.
func (airtu *AppInstRunTimeUpdate) SetUpdatedAt(t time.Time) *AppInstRunTimeUpdate {
	airtu.mutation.SetUpdatedAt(t)
	return airtu
}

// SetCreatedAt sets the "created_at" field.
func (airtu *AppInstRunTimeUpdate) SetCreatedAt(t time.Time) *AppInstRunTimeUpdate {
	airtu.mutation.SetCreatedAt(t)
	return airtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (airtu *AppInstRunTimeUpdate) SetNillableCreatedAt(t *time.Time) *AppInstRunTimeUpdate {
	if t != nil {
		airtu.SetCreatedAt(*t)
	}
	return airtu
}

// Mutation returns the AppInstRunTimeMutation object of the builder.
func (airtu *AppInstRunTimeUpdate) Mutation() *AppInstRunTimeMutation {
	return airtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (airtu *AppInstRunTimeUpdate) Save(ctx context.Context) (int, error) {
	airtu.defaults()
	return withHooks(ctx, airtu.sqlSave, airtu.mutation, airtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (airtu *AppInstRunTimeUpdate) SaveX(ctx context.Context) int {
	affected, err := airtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (airtu *AppInstRunTimeUpdate) Exec(ctx context.Context) error {
	_, err := airtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (airtu *AppInstRunTimeUpdate) ExecX(ctx context.Context) {
	if err := airtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (airtu *AppInstRunTimeUpdate) defaults() {
	if _, ok := airtu.mutation.UpdatedAt(); !ok {
		v := appinstruntime.UpdateDefaultUpdatedAt()
		airtu.mutation.SetUpdatedAt(v)
	}
}

func (airtu *AppInstRunTimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appinstruntime.Table, appinstruntime.Columns, sqlgraph.NewFieldSpec(appinstruntime.FieldID, field.TypeInt))
	if ps := airtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := airtu.mutation.UserID(); ok {
		_spec.SetField(appinstruntime.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := airtu.mutation.AddedUserID(); ok {
		_spec.AddField(appinstruntime.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := airtu.mutation.AppInstID(); ok {
		_spec.SetField(appinstruntime.FieldAppInstID, field.TypeInt64, value)
	}
	if value, ok := airtu.mutation.AddedAppInstID(); ok {
		_spec.AddField(appinstruntime.FieldAppInstID, field.TypeInt64, value)
	}
	if value, ok := airtu.mutation.StartTime(); ok {
		_spec.SetField(appinstruntime.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := airtu.mutation.RunDuration(); ok {
		_spec.SetField(appinstruntime.FieldRunDuration, field.TypeInt64, value)
	}
	if value, ok := airtu.mutation.AddedRunDuration(); ok {
		_spec.AddField(appinstruntime.FieldRunDuration, field.TypeInt64, value)
	}
	if value, ok := airtu.mutation.UpdatedAt(); ok {
		_spec.SetField(appinstruntime.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := airtu.mutation.CreatedAt(); ok {
		_spec.SetField(appinstruntime.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, airtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appinstruntime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	airtu.mutation.done = true
	return n, nil
}

// AppInstRunTimeUpdateOne is the builder for updating a single AppInstRunTime entity.
type AppInstRunTimeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppInstRunTimeMutation
}

// SetUserID sets the "user_id" field.
func (airtuo *AppInstRunTimeUpdateOne) SetUserID(mi model.InternalID) *AppInstRunTimeUpdateOne {
	airtuo.mutation.ResetUserID()
	airtuo.mutation.SetUserID(mi)
	return airtuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (airtuo *AppInstRunTimeUpdateOne) SetNillableUserID(mi *model.InternalID) *AppInstRunTimeUpdateOne {
	if mi != nil {
		airtuo.SetUserID(*mi)
	}
	return airtuo
}

// AddUserID adds mi to the "user_id" field.
func (airtuo *AppInstRunTimeUpdateOne) AddUserID(mi model.InternalID) *AppInstRunTimeUpdateOne {
	airtuo.mutation.AddUserID(mi)
	return airtuo
}

// SetAppInstID sets the "app_inst_id" field.
func (airtuo *AppInstRunTimeUpdateOne) SetAppInstID(mi model.InternalID) *AppInstRunTimeUpdateOne {
	airtuo.mutation.ResetAppInstID()
	airtuo.mutation.SetAppInstID(mi)
	return airtuo
}

// SetNillableAppInstID sets the "app_inst_id" field if the given value is not nil.
func (airtuo *AppInstRunTimeUpdateOne) SetNillableAppInstID(mi *model.InternalID) *AppInstRunTimeUpdateOne {
	if mi != nil {
		airtuo.SetAppInstID(*mi)
	}
	return airtuo
}

// AddAppInstID adds mi to the "app_inst_id" field.
func (airtuo *AppInstRunTimeUpdateOne) AddAppInstID(mi model.InternalID) *AppInstRunTimeUpdateOne {
	airtuo.mutation.AddAppInstID(mi)
	return airtuo
}

// SetStartTime sets the "start_time" field.
func (airtuo *AppInstRunTimeUpdateOne) SetStartTime(t time.Time) *AppInstRunTimeUpdateOne {
	airtuo.mutation.SetStartTime(t)
	return airtuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (airtuo *AppInstRunTimeUpdateOne) SetNillableStartTime(t *time.Time) *AppInstRunTimeUpdateOne {
	if t != nil {
		airtuo.SetStartTime(*t)
	}
	return airtuo
}

// SetRunDuration sets the "run_duration" field.
func (airtuo *AppInstRunTimeUpdateOne) SetRunDuration(t time.Duration) *AppInstRunTimeUpdateOne {
	airtuo.mutation.ResetRunDuration()
	airtuo.mutation.SetRunDuration(t)
	return airtuo
}

// SetNillableRunDuration sets the "run_duration" field if the given value is not nil.
func (airtuo *AppInstRunTimeUpdateOne) SetNillableRunDuration(t *time.Duration) *AppInstRunTimeUpdateOne {
	if t != nil {
		airtuo.SetRunDuration(*t)
	}
	return airtuo
}

// AddRunDuration adds t to the "run_duration" field.
func (airtuo *AppInstRunTimeUpdateOne) AddRunDuration(t time.Duration) *AppInstRunTimeUpdateOne {
	airtuo.mutation.AddRunDuration(t)
	return airtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (airtuo *AppInstRunTimeUpdateOne) SetUpdatedAt(t time.Time) *AppInstRunTimeUpdateOne {
	airtuo.mutation.SetUpdatedAt(t)
	return airtuo
}

// SetCreatedAt sets the "created_at" field.
func (airtuo *AppInstRunTimeUpdateOne) SetCreatedAt(t time.Time) *AppInstRunTimeUpdateOne {
	airtuo.mutation.SetCreatedAt(t)
	return airtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (airtuo *AppInstRunTimeUpdateOne) SetNillableCreatedAt(t *time.Time) *AppInstRunTimeUpdateOne {
	if t != nil {
		airtuo.SetCreatedAt(*t)
	}
	return airtuo
}

// Mutation returns the AppInstRunTimeMutation object of the builder.
func (airtuo *AppInstRunTimeUpdateOne) Mutation() *AppInstRunTimeMutation {
	return airtuo.mutation
}

// Where appends a list predicates to the AppInstRunTimeUpdate builder.
func (airtuo *AppInstRunTimeUpdateOne) Where(ps ...predicate.AppInstRunTime) *AppInstRunTimeUpdateOne {
	airtuo.mutation.Where(ps...)
	return airtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (airtuo *AppInstRunTimeUpdateOne) Select(field string, fields ...string) *AppInstRunTimeUpdateOne {
	airtuo.fields = append([]string{field}, fields...)
	return airtuo
}

// Save executes the query and returns the updated AppInstRunTime entity.
func (airtuo *AppInstRunTimeUpdateOne) Save(ctx context.Context) (*AppInstRunTime, error) {
	airtuo.defaults()
	return withHooks(ctx, airtuo.sqlSave, airtuo.mutation, airtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (airtuo *AppInstRunTimeUpdateOne) SaveX(ctx context.Context) *AppInstRunTime {
	node, err := airtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (airtuo *AppInstRunTimeUpdateOne) Exec(ctx context.Context) error {
	_, err := airtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (airtuo *AppInstRunTimeUpdateOne) ExecX(ctx context.Context) {
	if err := airtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (airtuo *AppInstRunTimeUpdateOne) defaults() {
	if _, ok := airtuo.mutation.UpdatedAt(); !ok {
		v := appinstruntime.UpdateDefaultUpdatedAt()
		airtuo.mutation.SetUpdatedAt(v)
	}
}

func (airtuo *AppInstRunTimeUpdateOne) sqlSave(ctx context.Context) (_node *AppInstRunTime, err error) {
	_spec := sqlgraph.NewUpdateSpec(appinstruntime.Table, appinstruntime.Columns, sqlgraph.NewFieldSpec(appinstruntime.FieldID, field.TypeInt))
	id, ok := airtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppInstRunTime.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := airtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appinstruntime.FieldID)
		for _, f := range fields {
			if !appinstruntime.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appinstruntime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := airtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := airtuo.mutation.UserID(); ok {
		_spec.SetField(appinstruntime.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := airtuo.mutation.AddedUserID(); ok {
		_spec.AddField(appinstruntime.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := airtuo.mutation.AppInstID(); ok {
		_spec.SetField(appinstruntime.FieldAppInstID, field.TypeInt64, value)
	}
	if value, ok := airtuo.mutation.AddedAppInstID(); ok {
		_spec.AddField(appinstruntime.FieldAppInstID, field.TypeInt64, value)
	}
	if value, ok := airtuo.mutation.StartTime(); ok {
		_spec.SetField(appinstruntime.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := airtuo.mutation.RunDuration(); ok {
		_spec.SetField(appinstruntime.FieldRunDuration, field.TypeInt64, value)
	}
	if value, ok := airtuo.mutation.AddedRunDuration(); ok {
		_spec.AddField(appinstruntime.FieldRunDuration, field.TypeInt64, value)
	}
	if value, ok := airtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appinstruntime.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := airtuo.mutation.CreatedAt(); ok {
		_spec.SetField(appinstruntime.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &AppInstRunTime{config: airtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, airtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appinstruntime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	airtuo.mutation.done = true
	return _node, nil
}
