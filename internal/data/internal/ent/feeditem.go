// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/feed"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditem"
	"github.com/tuihub/librarian/internal/model"
	"github.com/tuihub/librarian/internal/model/modelfeed"
)

// FeedItem is the model entity for the FeedItem schema.
type FeedItem struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// FeedID holds the value of the "feed_id" field.
	FeedID model.InternalID `json:"feed_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Authors holds the value of the "authors" field.
	Authors []*modelfeed.Person `json:"authors,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// GUID holds the value of the "guid" field.
	GUID string `json:"guid,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Image holds the value of the "image" field.
	Image *modelfeed.Image `json:"image,omitempty"`
	// Published holds the value of the "published" field.
	Published string `json:"published,omitempty"`
	// PublishedParsed holds the value of the "published_parsed" field.
	PublishedParsed time.Time `json:"published_parsed,omitempty"`
	// Updated holds the value of the "updated" field.
	Updated string `json:"updated,omitempty"`
	// UpdatedParsed holds the value of the "updated_parsed" field.
	UpdatedParsed *time.Time `json:"updated_parsed,omitempty"`
	// Enclosures holds the value of the "enclosures" field.
	Enclosures []*modelfeed.Enclosure `json:"enclosures,omitempty"`
	// PublishPlatform holds the value of the "publish_platform" field.
	PublishPlatform string `json:"publish_platform,omitempty"`
	// ReadCount holds the value of the "read_count" field.
	ReadCount int64 `json:"read_count,omitempty"`
	// DigestDescription holds the value of the "digest_description" field.
	DigestDescription string `json:"digest_description,omitempty"`
	// DigestImages holds the value of the "digest_images" field.
	DigestImages []*modelfeed.Image `json:"digest_images,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedItemQuery when eager-loading is set.
	Edges        FeedItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FeedItemEdges holds the relations/edges for other nodes in the graph.
type FeedItemEdges struct {
	// Feed holds the value of the feed edge.
	Feed *Feed `json:"feed,omitempty"`
	// FeedItemCollection holds the value of the feed_item_collection edge.
	FeedItemCollection []*FeedItemCollection `json:"feed_item_collection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FeedOrErr returns the Feed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeedItemEdges) FeedOrErr() (*Feed, error) {
	if e.Feed != nil {
		return e.Feed, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: feed.Label}
	}
	return nil, &NotLoadedError{edge: "feed"}
}

// FeedItemCollectionOrErr returns the FeedItemCollection value or an error if the edge
// was not loaded in eager-loading.
func (e FeedItemEdges) FeedItemCollectionOrErr() ([]*FeedItemCollection, error) {
	if e.loadedTypes[1] {
		return e.FeedItemCollection, nil
	}
	return nil, &NotLoadedError{edge: "feed_item_collection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeedItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feeditem.FieldAuthors, feeditem.FieldImage, feeditem.FieldEnclosures, feeditem.FieldDigestImages:
			values[i] = new([]byte)
		case feeditem.FieldID, feeditem.FieldFeedID, feeditem.FieldReadCount:
			values[i] = new(sql.NullInt64)
		case feeditem.FieldTitle, feeditem.FieldDescription, feeditem.FieldContent, feeditem.FieldGUID, feeditem.FieldLink, feeditem.FieldPublished, feeditem.FieldUpdated, feeditem.FieldPublishPlatform, feeditem.FieldDigestDescription:
			values[i] = new(sql.NullString)
		case feeditem.FieldPublishedParsed, feeditem.FieldUpdatedParsed, feeditem.FieldUpdatedAt, feeditem.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeedItem fields.
func (fi *FeedItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feeditem.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				fi.ID = model.InternalID(value.Int64)
			}
		case feeditem.FieldFeedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feed_id", values[i])
			} else if value.Valid {
				fi.FeedID = model.InternalID(value.Int64)
			}
		case feeditem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				fi.Title = value.String
			}
		case feeditem.FieldAuthors:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field authors", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fi.Authors); err != nil {
					return fmt.Errorf("unmarshal field authors: %w", err)
				}
			}
		case feeditem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fi.Description = value.String
			}
		case feeditem.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				fi.Content = value.String
			}
		case feeditem.FieldGUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guid", values[i])
			} else if value.Valid {
				fi.GUID = value.String
			}
		case feeditem.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				fi.Link = value.String
			}
		case feeditem.FieldImage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fi.Image); err != nil {
					return fmt.Errorf("unmarshal field image: %w", err)
				}
			}
		case feeditem.FieldPublished:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field published", values[i])
			} else if value.Valid {
				fi.Published = value.String
			}
		case feeditem.FieldPublishedParsed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_parsed", values[i])
			} else if value.Valid {
				fi.PublishedParsed = value.Time
			}
		case feeditem.FieldUpdated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated", values[i])
			} else if value.Valid {
				fi.Updated = value.String
			}
		case feeditem.FieldUpdatedParsed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_parsed", values[i])
			} else if value.Valid {
				fi.UpdatedParsed = new(time.Time)
				*fi.UpdatedParsed = value.Time
			}
		case feeditem.FieldEnclosures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field enclosures", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fi.Enclosures); err != nil {
					return fmt.Errorf("unmarshal field enclosures: %w", err)
				}
			}
		case feeditem.FieldPublishPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publish_platform", values[i])
			} else if value.Valid {
				fi.PublishPlatform = value.String
			}
		case feeditem.FieldReadCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field read_count", values[i])
			} else if value.Valid {
				fi.ReadCount = value.Int64
			}
		case feeditem.FieldDigestDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field digest_description", values[i])
			} else if value.Valid {
				fi.DigestDescription = value.String
			}
		case feeditem.FieldDigestImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field digest_images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fi.DigestImages); err != nil {
					return fmt.Errorf("unmarshal field digest_images: %w", err)
				}
			}
		case feeditem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fi.UpdatedAt = value.Time
			}
		case feeditem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fi.CreatedAt = value.Time
			}
		default:
			fi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FeedItem.
// This includes values selected through modifiers, order, etc.
func (fi *FeedItem) Value(name string) (ent.Value, error) {
	return fi.selectValues.Get(name)
}

// QueryFeed queries the "feed" edge of the FeedItem entity.
func (fi *FeedItem) QueryFeed() *FeedQuery {
	return NewFeedItemClient(fi.config).QueryFeed(fi)
}

// QueryFeedItemCollection queries the "feed_item_collection" edge of the FeedItem entity.
func (fi *FeedItem) QueryFeedItemCollection() *FeedItemCollectionQuery {
	return NewFeedItemClient(fi.config).QueryFeedItemCollection(fi)
}

// Update returns a builder for updating this FeedItem.
// Note that you need to call FeedItem.Unwrap() before calling this method if this FeedItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FeedItem) Update() *FeedItemUpdateOne {
	return NewFeedItemClient(fi.config).UpdateOne(fi)
}

// Unwrap unwraps the FeedItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FeedItem) Unwrap() *FeedItem {
	_tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeedItem is not a transactional entity")
	}
	fi.config.driver = _tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FeedItem) String() string {
	var builder strings.Builder
	builder.WriteString("FeedItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fi.ID))
	builder.WriteString("feed_id=")
	builder.WriteString(fmt.Sprintf("%v", fi.FeedID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fi.Title)
	builder.WriteString(", ")
	builder.WriteString("authors=")
	builder.WriteString(fmt.Sprintf("%v", fi.Authors))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fi.Description)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fi.Content)
	builder.WriteString(", ")
	builder.WriteString("guid=")
	builder.WriteString(fi.GUID)
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(fi.Link)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(fmt.Sprintf("%v", fi.Image))
	builder.WriteString(", ")
	builder.WriteString("published=")
	builder.WriteString(fi.Published)
	builder.WriteString(", ")
	builder.WriteString("published_parsed=")
	builder.WriteString(fi.PublishedParsed.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated=")
	builder.WriteString(fi.Updated)
	builder.WriteString(", ")
	if v := fi.UpdatedParsed; v != nil {
		builder.WriteString("updated_parsed=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("enclosures=")
	builder.WriteString(fmt.Sprintf("%v", fi.Enclosures))
	builder.WriteString(", ")
	builder.WriteString("publish_platform=")
	builder.WriteString(fi.PublishPlatform)
	builder.WriteString(", ")
	builder.WriteString("read_count=")
	builder.WriteString(fmt.Sprintf("%v", fi.ReadCount))
	builder.WriteString(", ")
	builder.WriteString("digest_description=")
	builder.WriteString(fi.DigestDescription)
	builder.WriteString(", ")
	builder.WriteString("digest_images=")
	builder.WriteString(fmt.Sprintf("%v", fi.DigestImages))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fi.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FeedItems is a parsable slice of FeedItem.
type FeedItems []*FeedItem
