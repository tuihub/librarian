// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/deviceinfo"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
)

// DeviceInfoDelete is the builder for deleting a DeviceInfo entity.
type DeviceInfoDelete struct {
	config
	hooks    []Hook
	mutation *DeviceInfoMutation
}

// Where appends a list predicates to the DeviceInfoDelete builder.
func (did *DeviceInfoDelete) Where(ps ...predicate.DeviceInfo) *DeviceInfoDelete {
	did.mutation.Where(ps...)
	return did
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (did *DeviceInfoDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, did.sqlExec, did.mutation, did.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (did *DeviceInfoDelete) ExecX(ctx context.Context) int {
	n, err := did.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (did *DeviceInfoDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(deviceinfo.Table, sqlgraph.NewFieldSpec(deviceinfo.FieldID, field.TypeInt64))
	if ps := did.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, did.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	did.mutation.done = true
	return affected, err
}

// DeviceInfoDeleteOne is the builder for deleting a single DeviceInfo entity.
type DeviceInfoDeleteOne struct {
	did *DeviceInfoDelete
}

// Where appends a list predicates to the DeviceInfoDelete builder.
func (dido *DeviceInfoDeleteOne) Where(ps ...predicate.DeviceInfo) *DeviceInfoDeleteOne {
	dido.did.mutation.Where(ps...)
	return dido
}

// Exec executes the deletion query.
func (dido *DeviceInfoDeleteOne) Exec(ctx context.Context) error {
	n, err := dido.did.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{deviceinfo.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dido *DeviceInfoDeleteOne) ExecX(ctx context.Context) {
	if err := dido.Exec(ctx); err != nil {
		panic(err)
	}
}
