// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinst"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// AppInst is the model entity for the AppInst schema.
type AppInst struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// DeviceID holds the value of the "device_id" field.
	DeviceID model.InternalID `json:"device_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID model.InternalID `json:"app_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppInstQuery when eager-loading is set.
	Edges         AppInstEdges `json:"edges"`
	user_app_inst *model.InternalID
	selectValues  sql.SelectValues
}

// AppInstEdges holds the relations/edges for other nodes in the graph.
type AppInstEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppInstEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppInst) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appinst.FieldID, appinst.FieldDeviceID, appinst.FieldAppID:
			values[i] = new(sql.NullInt64)
		case appinst.FieldUpdatedAt, appinst.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case appinst.ForeignKeys[0]: // user_app_inst
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppInst fields.
func (ai *AppInst) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appinst.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ai.ID = model.InternalID(value.Int64)
			}
		case appinst.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				ai.DeviceID = model.InternalID(value.Int64)
			}
		case appinst.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				ai.AppID = model.InternalID(value.Int64)
			}
		case appinst.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ai.UpdatedAt = value.Time
			}
		case appinst.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ai.CreatedAt = value.Time
			}
		case appinst.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_app_inst", values[i])
			} else if value.Valid {
				ai.user_app_inst = new(model.InternalID)
				*ai.user_app_inst = model.InternalID(value.Int64)
			}
		default:
			ai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppInst.
// This includes values selected through modifiers, order, etc.
func (ai *AppInst) Value(name string) (ent.Value, error) {
	return ai.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the AppInst entity.
func (ai *AppInst) QueryOwner() *UserQuery {
	return NewAppInstClient(ai.config).QueryOwner(ai)
}

// Update returns a builder for updating this AppInst.
// Note that you need to call AppInst.Unwrap() before calling this method if this AppInst
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AppInst) Update() *AppInstUpdateOne {
	return NewAppInstClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the AppInst entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AppInst) Unwrap() *AppInst {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppInst is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AppInst) String() string {
	var builder strings.Builder
	builder.WriteString("AppInst(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", ai.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ai.AppID))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ai.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ai.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppInsts is a parsable slice of AppInst.
type AppInsts []*AppInst
