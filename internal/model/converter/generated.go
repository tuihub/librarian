// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	libauth "github.com/tuihub/librarian/internal/lib/libauth"
	model "github.com/tuihub/librarian/internal/model"
	"github.com/tuihub/librarian/internal/model/modelbinah"
	modelfeed "github.com/tuihub/librarian/internal/model/modelfeed"
	"github.com/tuihub/librarian/internal/model/modelgebura"
	"github.com/tuihub/librarian/internal/model/modelnetzach"
	"github.com/tuihub/librarian/internal/model/modelsupervisor"
	"github.com/tuihub/librarian/internal/model/modeltiphereth"
	"github.com/tuihub/librarian/internal/model/modelyesod"
	v11 "github.com/tuihub/protos/pkg/librarian/sephirah/v1"
	v1 "github.com/tuihub/protos/pkg/librarian/v1"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	"time"
)

func ToBizAccountAppRelationType(source v1.AccountAppRelationType) model.AccountAppRelationType {
	var modelAccountAppRelationType model.AccountAppRelationType
	switch source {
	case v1.AccountAppRelationType_ACCOUNT_APP_RELATION_TYPE_OWN:
		modelAccountAppRelationType = model.AccountAppRelationTypeOwner
	case v1.AccountAppRelationType_ACCOUNT_APP_RELATION_TYPE_UNSPECIFIED:
		modelAccountAppRelationType = model.AccountAppRelationTypeUnspecified
	default:
		modelAccountAppRelationType = model.AccountAppRelationTypeUnspecified
	}
	return modelAccountAppRelationType
}
func ToBizApp(source *v11.App) *modelgebura.App {
	var pModelgeburaApp *modelgebura.App
	if source != nil {
		var modelgeburaApp modelgebura.App
		modelgeburaApp.ID = ToBizInternalID((*source).Id)
		modelgeburaApp.Name = (*source).Name
		modelgeburaApp.Description = (*source).Description
		modelgeburaApp.DeviceID = ToBizInternalID((*source).DeviceId)
		modelgeburaApp.Public = (*source).Public
		modelgeburaApp.AssignedAppInfoID = ToBizInternalID((*source).AssignedAppInfoId)
		pModelgeburaApp = &modelgeburaApp
	}
	return pModelgeburaApp
}
func ToBizAppBinary(source *v11.AppBinary) *modelgebura.AppBinary {
	var pModelgeburaAppBinary *modelgebura.AppBinary
	if source != nil {
		var modelgeburaAppBinary modelgebura.AppBinary
		modelgeburaAppBinary.Name = (*source).Name
		modelgeburaAppBinary.SizeBytes = (*source).SizeBytes
		modelgeburaAppBinary.PublicURL = (*source).PublicUrl
		if (*source).Sha256 != nil {
			modelgeburaAppBinary.Sha256 = make([]uint8, len((*source).Sha256))
			for i := 0; i < len((*source).Sha256); i++ {
				modelgeburaAppBinary.Sha256[i] = (*source).Sha256[i]
			}
		}
		pModelgeburaAppBinary = &modelgeburaAppBinary
	}
	return pModelgeburaAppBinary
}
func ToBizAppBinaryList(source []*v11.AppBinary) []*modelgebura.AppBinary {
	var pModelgeburaAppBinaryList []*modelgebura.AppBinary
	if source != nil {
		pModelgeburaAppBinaryList = make([]*modelgebura.AppBinary, len(source))
		for i := 0; i < len(source); i++ {
			pModelgeburaAppBinaryList[i] = ToBizAppBinary(source[i])
		}
	}
	return pModelgeburaAppBinaryList
}
func ToBizAppInfo(source *v1.AppInfo) *modelgebura.AppInfo {
	var pModelgeburaAppInfo *modelgebura.AppInfo
	if source != nil {
		var modelgeburaAppInfo modelgebura.AppInfo
		modelgeburaAppInfo.ID = ToBizInternalID((*source).Id)
		modelgeburaAppInfo.Internal = (*source).Internal
		modelgeburaAppInfo.Source = (*source).Source
		modelgeburaAppInfo.SourceAppID = (*source).SourceAppId
		modelgeburaAppInfo.SourceURL = PtrToString((*source).SourceUrl)
		modelgeburaAppInfo.Name = (*source).Name
		modelgeburaAppInfo.Type = ToBizAppType((*source).Type)
		modelgeburaAppInfo.ShortDescription = (*source).ShortDescription
		modelgeburaAppInfo.IconImageURL = (*source).IconImageUrl
		modelgeburaAppInfo.BackgroundImageURL = (*source).BackgroundImageUrl
		modelgeburaAppInfo.CoverImageURL = (*source).CoverImageUrl
		if (*source).Tags != nil {
			modelgeburaAppInfo.Tags = make([]string, len((*source).Tags))
			for i := 0; i < len((*source).Tags); i++ {
				modelgeburaAppInfo.Tags[i] = (*source).Tags[i]
			}
		}
		modelgeburaAppInfo.Details = ToBizAppInfoDetail((*source).Details)
		pModelgeburaAppInfo = &modelgeburaAppInfo
	}
	return pModelgeburaAppInfo
}
func ToBizAppInfoDetail(source *v1.AppInfoDetails) *modelgebura.AppInfoDetails {
	var pModelgeburaAppInfoDetails *modelgebura.AppInfoDetails
	if source != nil {
		var modelgeburaAppInfoDetails modelgebura.AppInfoDetails
		modelgeburaAppInfoDetails.Description = (*source).Description
		modelgeburaAppInfoDetails.ReleaseDate = (*source).ReleaseDate
		modelgeburaAppInfoDetails.Developer = (*source).Developer
		modelgeburaAppInfoDetails.Publisher = (*source).Publisher
		modelgeburaAppInfoDetails.Version = (*source).Version
		pModelgeburaAppInfoDetails = &modelgeburaAppInfoDetails
	}
	return pModelgeburaAppInfoDetails
}
func ToBizAppInfoID(source *v1.AppInfoID) *modelgebura.AppInfoID {
	var pModelgeburaAppInfoID *modelgebura.AppInfoID
	if source != nil {
		var modelgeburaAppInfoID modelgebura.AppInfoID
		modelgeburaAppInfoID.Internal = (*source).Internal
		modelgeburaAppInfoID.Source = (*source).Source
		modelgeburaAppInfoID.SourceAppID = (*source).SourceAppId
		pModelgeburaAppInfoID = &modelgeburaAppInfoID
	}
	return pModelgeburaAppInfoID
}
func ToBizAppInfoIDList(source []*v1.AppInfoID) []*modelgebura.AppInfoID {
	var pModelgeburaAppInfoIDList []*modelgebura.AppInfoID
	if source != nil {
		pModelgeburaAppInfoIDList = make([]*modelgebura.AppInfoID, len(source))
		for i := 0; i < len(source); i++ {
			pModelgeburaAppInfoIDList[i] = ToBizAppInfoID(source[i])
		}
	}
	return pModelgeburaAppInfoIDList
}
func ToBizAppInfoList(source []*v1.AppInfo) []*modelgebura.AppInfo {
	var pModelgeburaAppInfoList []*modelgebura.AppInfo
	if source != nil {
		pModelgeburaAppInfoList = make([]*modelgebura.AppInfo, len(source))
		for i := 0; i < len(source); i++ {
			pModelgeburaAppInfoList[i] = ToBizAppInfo(source[i])
		}
	}
	return pModelgeburaAppInfoList
}
func ToBizAppType(source v1.AppType) modelgebura.AppType {
	var modelgeburaAppType modelgebura.AppType
	switch source {
	case v1.AppType_APP_TYPE_GAME:
		modelgeburaAppType = modelgebura.AppTypeGame
	case v1.AppType_APP_TYPE_UNSPECIFIED:
		modelgeburaAppType = modelgebura.AppTypeUnspecified
	default:
		modelgeburaAppType = modelgebura.AppTypeUnspecified
	}
	return modelgeburaAppType
}
func ToBizAppTypeList(source []v1.AppType) []modelgebura.AppType {
	var modelgeburaAppTypeList []modelgebura.AppType
	if source != nil {
		modelgeburaAppTypeList = make([]modelgebura.AppType, len(source))
		for i := 0; i < len(source); i++ {
			modelgeburaAppTypeList[i] = ToBizAppType(source[i])
		}
	}
	return modelgeburaAppTypeList
}
func ToBizDeviceInfo(source *v11.DeviceInfo) *modeltiphereth.DeviceInfo {
	var pModeltipherethDeviceInfo *modeltiphereth.DeviceInfo
	if source != nil {
		var modeltipherethDeviceInfo modeltiphereth.DeviceInfo
		modeltipherethDeviceInfo.ID = ToBizInternalID((*source).DeviceId)
		modeltipherethDeviceInfo.DeviceName = (*source).DeviceName
		modeltipherethDeviceInfo.SystemType = ToBizSystemType((*source).SystemType)
		modeltipherethDeviceInfo.SystemVersion = (*source).SystemVersion
		modeltipherethDeviceInfo.ClientName = (*source).ClientName
		modeltipherethDeviceInfo.ClientSourceCodeAddress = (*source).ClientSourceCodeAddress
		modeltipherethDeviceInfo.ClientVersion = (*source).ClientVersion
		pModeltipherethDeviceInfo = &modeltipherethDeviceInfo
	}
	return pModeltipherethDeviceInfo
}
func ToBizFeatureFlag(source *v1.FeatureFlag) *modelsupervisor.FeatureFlag {
	var pModelsupervisorFeatureFlag *modelsupervisor.FeatureFlag
	if source != nil {
		var modelsupervisorFeatureFlag modelsupervisor.FeatureFlag
		modelsupervisorFeatureFlag.ID = (*source).Id
		modelsupervisorFeatureFlag.Name = (*source).Name
		modelsupervisorFeatureFlag.Description = (*source).Description
		modelsupervisorFeatureFlag.ConfigJSONSchema = (*source).ConfigJsonSchema
		modelsupervisorFeatureFlag.RequireContext = (*source).RequireContext
		if (*source).Extra != nil {
			modelsupervisorFeatureFlag.Extra = make(map[string]string, len((*source).Extra))
			for key, value := range (*source).Extra {
				modelsupervisorFeatureFlag.Extra[key] = value
			}
		}
		pModelsupervisorFeatureFlag = &modelsupervisorFeatureFlag
	}
	return pModelsupervisorFeatureFlag
}
func ToBizFeatureRequest(source *v1.FeatureRequest) *modelsupervisor.FeatureRequest {
	var pModelsupervisorFeatureRequest *modelsupervisor.FeatureRequest
	if source != nil {
		var modelsupervisorFeatureRequest modelsupervisor.FeatureRequest
		modelsupervisorFeatureRequest.ID = (*source).Id
		modelsupervisorFeatureRequest.Region = (*source).Region
		modelsupervisorFeatureRequest.ConfigJSON = (*source).ConfigJson
		modelsupervisorFeatureRequest.ContextID = ToBizInternalID((*source).ContextId)
		pModelsupervisorFeatureRequest = &modelsupervisorFeatureRequest
	}
	return pModelsupervisorFeatureRequest
}
func ToBizFeedActionSet(source *v11.FeedActionSet) *modelyesod.FeedActionSet {
	var pModelyesodFeedActionSet *modelyesod.FeedActionSet
	if source != nil {
		var modelyesodFeedActionSet modelyesod.FeedActionSet
		modelyesodFeedActionSet.ID = ToBizInternalID((*source).Id)
		modelyesodFeedActionSet.Name = (*source).Name
		modelyesodFeedActionSet.Description = (*source).Description
		if (*source).Actions != nil {
			modelyesodFeedActionSet.Actions = make([]*modelsupervisor.FeatureRequest, len((*source).Actions))
			for i := 0; i < len((*source).Actions); i++ {
				modelyesodFeedActionSet.Actions[i] = ToBizFeatureRequest((*source).Actions[i])
			}
		}
		pModelyesodFeedActionSet = &modelyesodFeedActionSet
	}
	return pModelyesodFeedActionSet
}
func ToBizFeedConfig(source *v11.FeedConfig) *modelyesod.FeedConfig {
	var pModelyesodFeedConfig *modelyesod.FeedConfig
	if source != nil {
		var modelyesodFeedConfig modelyesod.FeedConfig
		modelyesodFeedConfig.ID = ToBizInternalID((*source).Id)
		modelyesodFeedConfig.Name = (*source).Name
		modelyesodFeedConfig.Description = (*source).Description
		modelyesodFeedConfig.Source = ToBizFeatureRequest((*source).Source)
		modelyesodFeedConfig.ActionSets = ToBizInternalIDList((*source).ActionSets)
		modelyesodFeedConfig.Category = (*source).Category
		modelyesodFeedConfig.Status = ToBizFeedConfigStatus((*source).Status)
		modelyesodFeedConfig.PullInterval = DurationPBToDuration((*source).PullInterval)
		if (*source).LatestPullStatus != nil {
			modelyesodFeedConfig.LatestPullStatus = ToBizFeedConfigPullStatus(*(*source).LatestPullStatus)
		}
		modelyesodFeedConfig.LatestPullMessage = PtrToString((*source).LatestPullMessage)
		modelyesodFeedConfig.HideItems = (*source).HideItems
		pModelyesodFeedConfig = &modelyesodFeedConfig
	}
	return pModelyesodFeedConfig
}
func ToBizFeedConfigPullStatus(source v11.FeedConfigPullStatus) modelyesod.FeedConfigPullStatus {
	var modelyesodFeedConfigPullStatus modelyesod.FeedConfigPullStatus
	switch source {
	case v11.FeedConfigPullStatus_FEED_CONFIG_PULL_STATUS_FAILED:
		modelyesodFeedConfigPullStatus = modelyesod.FeedConfigPullStatusFailed
	case v11.FeedConfigPullStatus_FEED_CONFIG_PULL_STATUS_PROCESSING:
		modelyesodFeedConfigPullStatus = modelyesod.FeedConfigPullStatusProcessing
	case v11.FeedConfigPullStatus_FEED_CONFIG_PULL_STATUS_SUCCESS:
		modelyesodFeedConfigPullStatus = modelyesod.FeedConfigPullStatusSuccess
	case v11.FeedConfigPullStatus_FEED_CONFIG_PULL_STATUS_UNSPECIFIED:
		modelyesodFeedConfigPullStatus = modelyesod.FeedConfigPullStatusUnspecified
	default:
		modelyesodFeedConfigPullStatus = modelyesod.FeedConfigPullStatusUnspecified
	}
	return modelyesodFeedConfigPullStatus
}
func ToBizFeedConfigStatus(source v11.FeedConfigStatus) modelyesod.FeedConfigStatus {
	var modelyesodFeedConfigStatus modelyesod.FeedConfigStatus
	switch source {
	case v11.FeedConfigStatus_FEED_CONFIG_STATUS_ACTIVE:
		modelyesodFeedConfigStatus = modelyesod.FeedConfigStatusActive
	case v11.FeedConfigStatus_FEED_CONFIG_STATUS_SUSPEND:
		modelyesodFeedConfigStatus = modelyesod.FeedConfigStatusSuspend
	case v11.FeedConfigStatus_FEED_CONFIG_STATUS_UNSPECIFIED:
		modelyesodFeedConfigStatus = modelyesod.FeedConfigStatusUnspecified
	default:
		modelyesodFeedConfigStatus = modelyesod.FeedConfigStatusUnspecified
	}
	return modelyesodFeedConfigStatus
}
func ToBizFeedConfigStatusList(source []v11.FeedConfigStatus) []modelyesod.FeedConfigStatus {
	var modelyesodFeedConfigStatusList []modelyesod.FeedConfigStatus
	if source != nil {
		modelyesodFeedConfigStatusList = make([]modelyesod.FeedConfigStatus, len(source))
		for i := 0; i < len(source); i++ {
			modelyesodFeedConfigStatusList[i] = ToBizFeedConfigStatus(source[i])
		}
	}
	return modelyesodFeedConfigStatusList
}
func ToBizFeedItem(source *v1.FeedItem) *modelfeed.Item {
	var pModelfeedItem *modelfeed.Item
	if source != nil {
		var modelfeedItem modelfeed.Item
		modelfeedItem.ID = ToBizInternalID((*source).Id)
		modelfeedItem.Title = (*source).Title
		modelfeedItem.Description = (*source).Description
		modelfeedItem.Content = (*source).Content
		modelfeedItem.Link = (*source).Link
		modelfeedItem.Updated = (*source).Updated
		modelfeedItem.UpdatedParsed = pTimestamppbTimestampToPTimeTime((*source).UpdatedParsed)
		modelfeedItem.Published = (*source).Published
		modelfeedItem.PublishedParsed = pTimestamppbTimestampToPTimeTime((*source).PublishedParsed)
		if (*source).Authors != nil {
			modelfeedItem.Authors = make([]*modelfeed.Person, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				modelfeedItem.Authors[i] = pV1FeedPersonToPModelfeedPerson((*source).Authors[i])
			}
		}
		modelfeedItem.GUID = (*source).Guid
		modelfeedItem.Image = pV1FeedImageToPModelfeedImage((*source).Image)
		if (*source).Enclosures != nil {
			modelfeedItem.Enclosures = make([]*modelfeed.Enclosure, len((*source).Enclosures))
			for j := 0; j < len((*source).Enclosures); j++ {
				modelfeedItem.Enclosures[j] = pV1FeedEnclosureToPModelfeedEnclosure((*source).Enclosures[j])
			}
		}
		modelfeedItem.PublishPlatform = (*source).PublishPlatform
		modelfeedItem.ReadCount = (*source).ReadCount
		pModelfeedItem = &modelfeedItem
	}
	return pModelfeedItem
}
func ToBizFeedItemCollection(source *v11.FeedItemCollection) *modelyesod.FeedItemCollection {
	var pModelyesodFeedItemCollection *modelyesod.FeedItemCollection
	if source != nil {
		var modelyesodFeedItemCollection modelyesod.FeedItemCollection
		modelyesodFeedItemCollection.ID = ToBizInternalID((*source).Id)
		modelyesodFeedItemCollection.Name = (*source).Name
		modelyesodFeedItemCollection.Description = (*source).Description
		modelyesodFeedItemCollection.Category = (*source).Category
		pModelyesodFeedItemCollection = &modelyesodFeedItemCollection
	}
	return pModelyesodFeedItemCollection
}
func ToBizFileMetadata(source *v11.FileMetadata) *modelbinah.FileMetadata {
	var pModelbinahFileMetadata *modelbinah.FileMetadata
	if source != nil {
		var modelbinahFileMetadata modelbinah.FileMetadata
		modelbinahFileMetadata.ID = ToBizInternalID((*source).Id)
		modelbinahFileMetadata.Name = (*source).Name
		modelbinahFileMetadata.SizeBytes = (*source).SizeBytes
		modelbinahFileMetadata.Type = ToBizFileType((*source).Type)
		if (*source).Sha256 != nil {
			modelbinahFileMetadata.Sha256 = make([]uint8, len((*source).Sha256))
			for i := 0; i < len((*source).Sha256); i++ {
				modelbinahFileMetadata.Sha256[i] = (*source).Sha256[i]
			}
		}
		pModelbinahFileMetadata = &modelbinahFileMetadata
	}
	return pModelbinahFileMetadata
}
func ToBizFileType(source v11.FileType) modelbinah.FileType {
	var modelbinahFileType modelbinah.FileType
	switch source {
	case v11.FileType_FILE_TYPE_CHESED_IMAGE:
		modelbinahFileType = modelbinah.FileTypeChesedImage
	case v11.FileType_FILE_TYPE_GEBURA_SAVE:
		modelbinahFileType = modelbinah.FileTypeGeburaSave
	case v11.FileType_FILE_TYPE_UNSPECIFIED:
		modelbinahFileType = modelbinah.FileTypeUnspecified
	default:
		modelbinahFileType = modelbinah.FileTypeUnspecified
	}
	return modelbinahFileType
}
func ToBizInternalIDList(source []*v1.InternalID) []model.InternalID {
	var modelInternalIDList []model.InternalID
	if source != nil {
		modelInternalIDList = make([]model.InternalID, len(source))
		for i := 0; i < len(source); i++ {
			modelInternalIDList[i] = ToBizInternalID(source[i])
		}
	}
	return modelInternalIDList
}
func ToBizNotifyFilter(source *v11.NotifyFilter) *modelnetzach.NotifyFilter {
	var pModelnetzachNotifyFilter *modelnetzach.NotifyFilter
	if source != nil {
		var modelnetzachNotifyFilter modelnetzach.NotifyFilter
		if (*source).ExcludeKeywords != nil {
			modelnetzachNotifyFilter.ExcludeKeywords = make([]string, len((*source).ExcludeKeywords))
			for i := 0; i < len((*source).ExcludeKeywords); i++ {
				modelnetzachNotifyFilter.ExcludeKeywords[i] = (*source).ExcludeKeywords[i]
			}
		}
		if (*source).IncludeKeywords != nil {
			modelnetzachNotifyFilter.IncludeKeywords = make([]string, len((*source).IncludeKeywords))
			for j := 0; j < len((*source).IncludeKeywords); j++ {
				modelnetzachNotifyFilter.IncludeKeywords[j] = (*source).IncludeKeywords[j]
			}
		}
		pModelnetzachNotifyFilter = &modelnetzachNotifyFilter
	}
	return pModelnetzachNotifyFilter
}
func ToBizNotifyFlow(source *v11.NotifyFlow) *modelnetzach.NotifyFlow {
	var pModelnetzachNotifyFlow *modelnetzach.NotifyFlow
	if source != nil {
		var modelnetzachNotifyFlow modelnetzach.NotifyFlow
		modelnetzachNotifyFlow.ID = ToBizInternalID((*source).Id)
		modelnetzachNotifyFlow.Name = (*source).Name
		modelnetzachNotifyFlow.Description = (*source).Description
		if (*source).Sources != nil {
			modelnetzachNotifyFlow.Sources = make([]*modelnetzach.NotifyFlowSource, len((*source).Sources))
			for i := 0; i < len((*source).Sources); i++ {
				modelnetzachNotifyFlow.Sources[i] = ToBizNotifyFlowSource((*source).Sources[i])
			}
		}
		if (*source).Targets != nil {
			modelnetzachNotifyFlow.Targets = make([]*modelnetzach.NotifyFlowTarget, len((*source).Targets))
			for j := 0; j < len((*source).Targets); j++ {
				modelnetzachNotifyFlow.Targets[j] = ToBizNotifyFlowTarget((*source).Targets[j])
			}
		}
		modelnetzachNotifyFlow.Status = ToBizNotifyFlowStatus((*source).Status)
		pModelnetzachNotifyFlow = &modelnetzachNotifyFlow
	}
	return pModelnetzachNotifyFlow
}
func ToBizNotifyFlowSource(source *v11.NotifyFlowSource) *modelnetzach.NotifyFlowSource {
	var pModelnetzachNotifyFlowSource *modelnetzach.NotifyFlowSource
	if source != nil {
		var modelnetzachNotifyFlowSource modelnetzach.NotifyFlowSource
		modelnetzachNotifyFlowSource.SourceID = ToBizInternalID((*source).SourceId)
		modelnetzachNotifyFlowSource.Filter = ToBizNotifyFilter((*source).Filter)
		pModelnetzachNotifyFlowSource = &modelnetzachNotifyFlowSource
	}
	return pModelnetzachNotifyFlowSource
}
func ToBizNotifyFlowStatus(source v11.NotifyFlowStatus) modelnetzach.NotifyFlowStatus {
	var modelnetzachNotifyFlowStatus modelnetzach.NotifyFlowStatus
	switch source {
	case v11.NotifyFlowStatus_NOTIFY_FLOW_STATUS_ACTIVE:
		modelnetzachNotifyFlowStatus = modelnetzach.NotifyFlowStatusActive
	case v11.NotifyFlowStatus_NOTIFY_FLOW_STATUS_SUSPEND:
		modelnetzachNotifyFlowStatus = modelnetzach.NotifyFlowStatusSuspend
	case v11.NotifyFlowStatus_NOTIFY_FLOW_STATUS_UNSPECIFIED:
		modelnetzachNotifyFlowStatus = modelnetzach.NotifyFlowStatusUnspecified
	default:
		modelnetzachNotifyFlowStatus = modelnetzach.NotifyFlowStatusUnspecified
	}
	return modelnetzachNotifyFlowStatus
}
func ToBizNotifyFlowTarget(source *v11.NotifyFlowTarget) *modelnetzach.NotifyFlowTarget {
	var pModelnetzachNotifyFlowTarget *modelnetzach.NotifyFlowTarget
	if source != nil {
		var modelnetzachNotifyFlowTarget modelnetzach.NotifyFlowTarget
		modelnetzachNotifyFlowTarget.TargetID = ToBizInternalID((*source).TargetId)
		modelnetzachNotifyFlowTarget.Filter = ToBizNotifyFilter((*source).Filter)
		pModelnetzachNotifyFlowTarget = &modelnetzachNotifyFlowTarget
	}
	return pModelnetzachNotifyFlowTarget
}
func ToBizNotifyTarget(source *v11.NotifyTarget) *modelnetzach.NotifyTarget {
	var pModelnetzachNotifyTarget *modelnetzach.NotifyTarget
	if source != nil {
		var modelnetzachNotifyTarget modelnetzach.NotifyTarget
		modelnetzachNotifyTarget.ID = ToBizInternalID((*source).Id)
		modelnetzachNotifyTarget.Name = (*source).Name
		modelnetzachNotifyTarget.Description = (*source).Description
		modelnetzachNotifyTarget.Destination = ToBizFeatureRequest((*source).Destination)
		modelnetzachNotifyTarget.Status = ToBizNotifyTargetStatus((*source).Status)
		pModelnetzachNotifyTarget = &modelnetzachNotifyTarget
	}
	return pModelnetzachNotifyTarget
}
func ToBizNotifyTargetStatus(source v11.NotifyTargetStatus) modelnetzach.NotifyTargetStatus {
	var modelnetzachNotifyTargetStatus modelnetzach.NotifyTargetStatus
	switch source {
	case v11.NotifyTargetStatus_NOTIFY_TARGET_STATUS_ACTIVE:
		modelnetzachNotifyTargetStatus = modelnetzach.NotifyTargetStatusActive
	case v11.NotifyTargetStatus_NOTIFY_TARGET_STATUS_SUSPEND:
		modelnetzachNotifyTargetStatus = modelnetzach.NotifyTargetStatusSuspend
	case v11.NotifyTargetStatus_NOTIFY_TARGET_STATUS_UNSPECIFIED:
		modelnetzachNotifyTargetStatus = modelnetzach.NotifyTargetStatusUnspecified
	default:
		modelnetzachNotifyTargetStatus = modelnetzach.NotifyTargetStatusUnspecified
	}
	return modelnetzachNotifyTargetStatus
}
func ToBizNotifyTargetStatusList(source []v11.NotifyTargetStatus) []modelnetzach.NotifyTargetStatus {
	var modelnetzachNotifyTargetStatusList []modelnetzach.NotifyTargetStatus
	if source != nil {
		modelnetzachNotifyTargetStatusList = make([]modelnetzach.NotifyTargetStatus, len(source))
		for i := 0; i < len(source); i++ {
			modelnetzachNotifyTargetStatusList[i] = ToBizNotifyTargetStatus(source[i])
		}
	}
	return modelnetzachNotifyTargetStatusList
}
func ToBizPorterBinarySummary(source *v1.PorterBinarySummary) *modelsupervisor.PorterBinarySummary {
	var pModelsupervisorPorterBinarySummary *modelsupervisor.PorterBinarySummary
	if source != nil {
		var modelsupervisorPorterBinarySummary modelsupervisor.PorterBinarySummary
		modelsupervisorPorterBinarySummary.Name = (*source).Name
		modelsupervisorPorterBinarySummary.Version = (*source).Version
		modelsupervisorPorterBinarySummary.Description = (*source).Description
		modelsupervisorPorterBinarySummary.SourceCodeAddress = (*source).SourceCodeAddress
		modelsupervisorPorterBinarySummary.BuildVersion = (*source).BuildVersion
		modelsupervisorPorterBinarySummary.BuildDate = (*source).BuildDate
		pModelsupervisorPorterBinarySummary = &modelsupervisorPorterBinarySummary
	}
	return pModelsupervisorPorterBinarySummary
}
func ToBizPorterContext(source *v11.PorterContext) *modelsupervisor.PorterContext {
	var pModelsupervisorPorterContext *modelsupervisor.PorterContext
	if source != nil {
		var modelsupervisorPorterContext modelsupervisor.PorterContext
		modelsupervisorPorterContext.ID = ToBizInternalID((*source).Id)
		modelsupervisorPorterContext.GlobalName = (*source).GlobalName
		modelsupervisorPorterContext.Region = (*source).Region
		modelsupervisorPorterContext.ContextJSON = (*source).ContextJson
		modelsupervisorPorterContext.Name = (*source).Name
		modelsupervisorPorterContext.Description = (*source).Description
		modelsupervisorPorterContext.Status = ToBizPorterContextStatus((*source).Status)
		pModelsupervisorPorterContext = &modelsupervisorPorterContext
	}
	return pModelsupervisorPorterContext
}
func ToBizPorterContextHandleStatus(source v11.PorterContextHandleStatus) modelsupervisor.PorterContextHandleStatus {
	var modelsupervisorPorterContextHandleStatus modelsupervisor.PorterContextHandleStatus
	switch source {
	case v11.PorterContextHandleStatus_PORTER_CONTEXT_HANDLE_STATUS_ACTIVE:
		modelsupervisorPorterContextHandleStatus = modelsupervisor.PorterContextHandleStatusActive
	case v11.PorterContextHandleStatus_PORTER_CONTEXT_HANDLE_STATUS_BLOCKED:
		modelsupervisorPorterContextHandleStatus = modelsupervisor.PorterContextHandleStatusBlocked
	case v11.PorterContextHandleStatus_PORTER_CONTEXT_HANDLE_STATUS_DOWNGRADED:
		modelsupervisorPorterContextHandleStatus = modelsupervisor.PorterContextHandleStatusDowngraded
	case v11.PorterContextHandleStatus_PORTER_CONTEXT_HANDLE_STATUS_QUEUEING:
		modelsupervisorPorterContextHandleStatus = modelsupervisor.PorterContextHandleStatusQueueing
	case v11.PorterContextHandleStatus_PORTER_CONTEXT_HANDLE_STATUS_UNSPECIFIED:
		modelsupervisorPorterContextHandleStatus = modelsupervisor.PorterContextHandleStatusUnspecified
	default:
		modelsupervisorPorterContextHandleStatus = modelsupervisor.PorterContextHandleStatusUnspecified
	}
	return modelsupervisorPorterContextHandleStatus
}
func ToBizPorterContextStatus(source v11.PorterContextStatus) modelsupervisor.PorterContextStatus {
	var modelsupervisorPorterContextStatus modelsupervisor.PorterContextStatus
	switch source {
	case v11.PorterContextStatus_PORTER_CONTEXT_STATUS_ACTIVE:
		modelsupervisorPorterContextStatus = modelsupervisor.PorterContextStatusActive
	case v11.PorterContextStatus_PORTER_CONTEXT_STATUS_DISABLED:
		modelsupervisorPorterContextStatus = modelsupervisor.PorterContextStatusDisabled
	case v11.PorterContextStatus_PORTER_CONTEXT_STATUS_UNSPECIFIED:
		modelsupervisorPorterContextStatus = modelsupervisor.PorterContextStatusUnspecified
	default:
		modelsupervisorPorterContextStatus = modelsupervisor.PorterContextStatusUnspecified
	}
	return modelsupervisorPorterContextStatus
}
func ToBizPorterFeatureSummary(source *v1.FeatureSummary) *modelsupervisor.PorterFeatureSummary {
	var pModelsupervisorPorterFeatureSummary *modelsupervisor.PorterFeatureSummary
	if source != nil {
		var modelsupervisorPorterFeatureSummary modelsupervisor.PorterFeatureSummary
		if (*source).AccountPlatforms != nil {
			modelsupervisorPorterFeatureSummary.AccountPlatforms = make([]*modelsupervisor.FeatureFlag, len((*source).AccountPlatforms))
			for i := 0; i < len((*source).AccountPlatforms); i++ {
				modelsupervisorPorterFeatureSummary.AccountPlatforms[i] = ToBizFeatureFlag((*source).AccountPlatforms[i])
			}
		}
		if (*source).AppInfoSources != nil {
			modelsupervisorPorterFeatureSummary.AppInfoSources = make([]*modelsupervisor.FeatureFlag, len((*source).AppInfoSources))
			for j := 0; j < len((*source).AppInfoSources); j++ {
				modelsupervisorPorterFeatureSummary.AppInfoSources[j] = ToBizFeatureFlag((*source).AppInfoSources[j])
			}
		}
		if (*source).FeedSources != nil {
			modelsupervisorPorterFeatureSummary.FeedSources = make([]*modelsupervisor.FeatureFlag, len((*source).FeedSources))
			for k := 0; k < len((*source).FeedSources); k++ {
				modelsupervisorPorterFeatureSummary.FeedSources[k] = ToBizFeatureFlag((*source).FeedSources[k])
			}
		}
		if (*source).NotifyDestinations != nil {
			modelsupervisorPorterFeatureSummary.NotifyDestinations = make([]*modelsupervisor.FeatureFlag, len((*source).NotifyDestinations))
			for l := 0; l < len((*source).NotifyDestinations); l++ {
				modelsupervisorPorterFeatureSummary.NotifyDestinations[l] = ToBizFeatureFlag((*source).NotifyDestinations[l])
			}
		}
		if (*source).FeedItemActions != nil {
			modelsupervisorPorterFeatureSummary.FeedItemActions = make([]*modelsupervisor.FeatureFlag, len((*source).FeedItemActions))
			for m := 0; m < len((*source).FeedItemActions); m++ {
				modelsupervisorPorterFeatureSummary.FeedItemActions[m] = ToBizFeatureFlag((*source).FeedItemActions[m])
			}
		}
		if (*source).FeedGetters != nil {
			modelsupervisorPorterFeatureSummary.FeedGetters = make([]*modelsupervisor.FeatureFlag, len((*source).FeedGetters))
			for n := 0; n < len((*source).FeedGetters); n++ {
				modelsupervisorPorterFeatureSummary.FeedGetters[n] = ToBizFeatureFlag((*source).FeedGetters[n])
			}
		}
		if (*source).FeedSetters != nil {
			modelsupervisorPorterFeatureSummary.FeedSetters = make([]*modelsupervisor.FeatureFlag, len((*source).FeedSetters))
			for o := 0; o < len((*source).FeedSetters); o++ {
				modelsupervisorPorterFeatureSummary.FeedSetters[o] = ToBizFeatureFlag((*source).FeedSetters[o])
			}
		}
		pModelsupervisorPorterFeatureSummary = &modelsupervisorPorterFeatureSummary
	}
	return pModelsupervisorPorterFeatureSummary
}
func ToBizSystemNotificationLevel(source v11.SystemNotificationLevel) modelnetzach.SystemNotificationLevel {
	var modelnetzachSystemNotificationLevel modelnetzach.SystemNotificationLevel
	switch source {
	case v11.SystemNotificationLevel_SYSTEM_NOTIFICATION_LEVEL_ERROR:
		modelnetzachSystemNotificationLevel = modelnetzach.SystemNotificationLevelError
	case v11.SystemNotificationLevel_SYSTEM_NOTIFICATION_LEVEL_INFO:
		modelnetzachSystemNotificationLevel = modelnetzach.SystemNotificationLevelInfo
	case v11.SystemNotificationLevel_SYSTEM_NOTIFICATION_LEVEL_ONGOING:
		modelnetzachSystemNotificationLevel = modelnetzach.SystemNotificationLevelOngoing
	case v11.SystemNotificationLevel_SYSTEM_NOTIFICATION_LEVEL_UNSPECIFIED:
		modelnetzachSystemNotificationLevel = modelnetzach.SystemNotificationLevelUnspecified
	case v11.SystemNotificationLevel_SYSTEM_NOTIFICATION_LEVEL_WARNING:
		modelnetzachSystemNotificationLevel = modelnetzach.SystemNotificationLevelWarning
	default:
		modelnetzachSystemNotificationLevel = modelnetzach.SystemNotificationLevelUnspecified
	}
	return modelnetzachSystemNotificationLevel
}
func ToBizSystemNotificationLevelList(source []v11.SystemNotificationLevel) []modelnetzach.SystemNotificationLevel {
	var modelnetzachSystemNotificationLevelList []modelnetzach.SystemNotificationLevel
	if source != nil {
		modelnetzachSystemNotificationLevelList = make([]modelnetzach.SystemNotificationLevel, len(source))
		for i := 0; i < len(source); i++ {
			modelnetzachSystemNotificationLevelList[i] = ToBizSystemNotificationLevel(source[i])
		}
	}
	return modelnetzachSystemNotificationLevelList
}
func ToBizSystemNotificationStatus(source v11.SystemNotificationStatus) modelnetzach.SystemNotificationStatus {
	var modelnetzachSystemNotificationStatus modelnetzach.SystemNotificationStatus
	switch source {
	case v11.SystemNotificationStatus_SYSTEM_NOTIFICATION_STATUS_DISMISSED:
		modelnetzachSystemNotificationStatus = modelnetzach.SystemNotificationStatusDismissed
	case v11.SystemNotificationStatus_SYSTEM_NOTIFICATION_STATUS_READ:
		modelnetzachSystemNotificationStatus = modelnetzach.SystemNotificationStatusRead
	case v11.SystemNotificationStatus_SYSTEM_NOTIFICATION_STATUS_UNREAD:
		modelnetzachSystemNotificationStatus = modelnetzach.SystemNotificationStatusUnread
	case v11.SystemNotificationStatus_SYSTEM_NOTIFICATION_STATUS_UNSPECIFIED:
		modelnetzachSystemNotificationStatus = modelnetzach.SystemNotificationStatusUnspecified
	default:
		modelnetzachSystemNotificationStatus = modelnetzach.SystemNotificationStatusUnspecified
	}
	return modelnetzachSystemNotificationStatus
}
func ToBizSystemNotificationStatusList(source []v11.SystemNotificationStatus) []modelnetzach.SystemNotificationStatus {
	var modelnetzachSystemNotificationStatusList []modelnetzach.SystemNotificationStatus
	if source != nil {
		modelnetzachSystemNotificationStatusList = make([]modelnetzach.SystemNotificationStatus, len(source))
		for i := 0; i < len(source); i++ {
			modelnetzachSystemNotificationStatusList[i] = ToBizSystemNotificationStatus(source[i])
		}
	}
	return modelnetzachSystemNotificationStatusList
}
func ToBizSystemNotificationType(source v11.SystemNotificationType) modelnetzach.SystemNotificationType {
	var modelnetzachSystemNotificationType modelnetzach.SystemNotificationType
	switch source {
	case v11.SystemNotificationType_SYSTEM_NOTIFICATION_TYPE_SYSTEM:
		modelnetzachSystemNotificationType = modelnetzach.SystemNotificationTypeSystem
	case v11.SystemNotificationType_SYSTEM_NOTIFICATION_TYPE_UNSPECIFIED:
		modelnetzachSystemNotificationType = modelnetzach.SystemNotificationTypeUnspecified
	case v11.SystemNotificationType_SYSTEM_NOTIFICATION_TYPE_USER:
		modelnetzachSystemNotificationType = modelnetzach.SystemNotificationTypeUser
	default:
		modelnetzachSystemNotificationType = modelnetzach.SystemNotificationTypeUnspecified
	}
	return modelnetzachSystemNotificationType
}
func ToBizSystemNotificationTypeList(source []v11.SystemNotificationType) []modelnetzach.SystemNotificationType {
	var modelnetzachSystemNotificationTypeList []modelnetzach.SystemNotificationType
	if source != nil {
		modelnetzachSystemNotificationTypeList = make([]modelnetzach.SystemNotificationType, len(source))
		for i := 0; i < len(source); i++ {
			modelnetzachSystemNotificationTypeList[i] = ToBizSystemNotificationType(source[i])
		}
	}
	return modelnetzachSystemNotificationTypeList
}
func ToBizSystemType(source v11.SystemType) modeltiphereth.SystemType {
	var modeltipherethSystemType modeltiphereth.SystemType
	switch source {
	case v11.SystemType_SYSTEM_TYPE_ANDROID:
		modeltipherethSystemType = modeltiphereth.SystemTypeAndroid
	case v11.SystemType_SYSTEM_TYPE_IOS:
		modeltipherethSystemType = modeltiphereth.SystemTypeIOS
	case v11.SystemType_SYSTEM_TYPE_LINUX:
		modeltipherethSystemType = modeltiphereth.SystemTypeLinux
	case v11.SystemType_SYSTEM_TYPE_MACOS:
		modeltipherethSystemType = modeltiphereth.SystemTypeMacOS
	case v11.SystemType_SYSTEM_TYPE_UNSPECIFIED:
		modeltipherethSystemType = modeltiphereth.SystemTypeUnspecified
	case v11.SystemType_SYSTEM_TYPE_WEB:
		modeltipherethSystemType = modeltiphereth.SystemTypeWeb
	case v11.SystemType_SYSTEM_TYPE_WINDOWS:
		modeltipherethSystemType = modeltiphereth.SystemTypeWindows
	default:
		modeltipherethSystemType = modeltiphereth.SystemTypeUnspecified
	}
	return modeltipherethSystemType
}
func ToBizTimeRange(source *v1.TimeRange) *model.TimeRange {
	var pModelTimeRange *model.TimeRange
	if source != nil {
		var modelTimeRange model.TimeRange
		modelTimeRange.StartTime = ToBizTime((*source).StartTime)
		modelTimeRange.Duration = DurationPBToDuration((*source).Duration)
		pModelTimeRange = &modelTimeRange
	}
	return pModelTimeRange
}
func ToBizUser(source *v11.User) *modeltiphereth.User {
	var pModeltipherethUser *modeltiphereth.User
	if source != nil {
		var modeltipherethUser modeltiphereth.User
		modeltipherethUser.ID = ToBizInternalID((*source).Id)
		modeltipherethUser.UserName = (*source).Username
		modeltipherethUser.PassWord = (*source).Password
		modeltipherethUser.Type = ToLibAuthUserType((*source).Type)
		modeltipherethUser.Status = ToBizUserStatus((*source).Status)
		pModeltipherethUser = &modeltipherethUser
	}
	return pModeltipherethUser
}
func ToBizUserStatus(source v11.UserStatus) modeltiphereth.UserStatus {
	var modeltipherethUserStatus modeltiphereth.UserStatus
	switch source {
	case v11.UserStatus_USER_STATUS_ACTIVE:
		modeltipherethUserStatus = modeltiphereth.UserStatusActive
	case v11.UserStatus_USER_STATUS_BLOCKED:
		modeltipherethUserStatus = modeltiphereth.UserStatusBlocked
	case v11.UserStatus_USER_STATUS_UNSPECIFIED:
		modeltipherethUserStatus = modeltiphereth.UserStatusUnspecified
	default:
		modeltipherethUserStatus = modeltiphereth.UserStatusUnspecified
	}
	return modeltipherethUserStatus
}
func ToBizUserStatusList(source []v11.UserStatus) []modeltiphereth.UserStatus {
	var modeltipherethUserStatusList []modeltiphereth.UserStatus
	if source != nil {
		modeltipherethUserStatusList = make([]modeltiphereth.UserStatus, len(source))
		for i := 0; i < len(source); i++ {
			modeltipherethUserStatusList[i] = ToBizUserStatus(source[i])
		}
	}
	return modeltipherethUserStatusList
}
func ToLibAuthUserType(source v11.UserType) libauth.UserType {
	var libauthUserType libauth.UserType
	switch source {
	case v11.UserType_USER_TYPE_ADMIN:
		libauthUserType = libauth.UserTypeAdmin
	case v11.UserType_USER_TYPE_NORMAL:
		libauthUserType = libauth.UserTypeNormal
	case v11.UserType_USER_TYPE_PORTER:
		libauthUserType = libauth.UserTypePorter
	case v11.UserType_USER_TYPE_SENTINEL:
		libauthUserType = libauth.UserTypeSentinel
	case v11.UserType_USER_TYPE_UNSPECIFIED:
		libauthUserType = libauth.UserTypeUnspecified
	default:
		libauthUserType = libauth.UserTypeUnspecified
	}
	return libauthUserType
}
func ToLibAuthUserTypeList(source []v11.UserType) []libauth.UserType {
	var libauthUserTypeList []libauth.UserType
	if source != nil {
		libauthUserTypeList = make([]libauth.UserType, len(source))
		for i := 0; i < len(source); i++ {
			libauthUserTypeList[i] = ToLibAuthUserType(source[i])
		}
	}
	return libauthUserTypeList
}
func pTimestamppbTimestampToPTimeTime(source *timestamppb.Timestamp) *time.Time {
	var pTimeTime *time.Time
	if source != nil {
		var timeTime time.Time
		_ = (*source)
		pTimeTime = &timeTime
	}
	return pTimeTime
}
func pV1FeedEnclosureToPModelfeedEnclosure(source *v1.FeedEnclosure) *modelfeed.Enclosure {
	var pModelfeedEnclosure *modelfeed.Enclosure
	if source != nil {
		var modelfeedEnclosure modelfeed.Enclosure
		modelfeedEnclosure.URL = (*source).Url
		modelfeedEnclosure.Length = (*source).Length
		modelfeedEnclosure.Type = (*source).Type
		pModelfeedEnclosure = &modelfeedEnclosure
	}
	return pModelfeedEnclosure
}
func pV1FeedImageToPModelfeedImage(source *v1.FeedImage) *modelfeed.Image {
	var pModelfeedImage *modelfeed.Image
	if source != nil {
		var modelfeedImage modelfeed.Image
		modelfeedImage.URL = (*source).Url
		modelfeedImage.Title = (*source).Title
		pModelfeedImage = &modelfeedImage
	}
	return pModelfeedImage
}
func pV1FeedPersonToPModelfeedPerson(source *v1.FeedPerson) *modelfeed.Person {
	var pModelfeedPerson *modelfeed.Person
	if source != nil {
		var modelfeedPerson modelfeed.Person
		modelfeedPerson.Name = (*source).Name
		modelfeedPerson.Email = (*source).Email
		pModelfeedPerson = &modelfeedPerson
	}
	return pModelfeedPerson
}
func ToPBAccount(source *modeltiphereth.Account) *v1.Account {
	var pV1Account *v1.Account
	if source != nil {
		var v1Account v1.Account
		v1Account.Id = ToPBInternalID((*source).ID)
		v1Account.Platform = (*source).Platform
		v1Account.PlatformAccountId = (*source).PlatformAccountID
		v1Account.Name = (*source).Name
		v1Account.ProfileUrl = (*source).ProfileURL
		v1Account.AvatarUrl = (*source).AvatarURL
		v1Account.LatestUpdateTime = ToPBTime((*source).LatestUpdateTime)
		pV1Account = &v1Account
	}
	return pV1Account
}
func ToPBAccountList(source []*modeltiphereth.Account) []*v1.Account {
	var pV1AccountList []*v1.Account
	if source != nil {
		pV1AccountList = make([]*v1.Account, len(source))
		for i := 0; i < len(source); i++ {
			pV1AccountList[i] = ToPBAccount(source[i])
		}
	}
	return pV1AccountList
}
func ToPBApp(source *modelgebura.App) *v11.App {
	var pV1App *v11.App
	if source != nil {
		var v1App v11.App
		v1App.Id = ToPBInternalID((*source).ID)
		v1App.Name = (*source).Name
		v1App.Description = (*source).Description
		v1App.AssignedAppInfoId = ToPBInternalID((*source).AssignedAppInfoID)
		v1App.DeviceId = ToPBInternalID((*source).DeviceID)
		v1App.Public = (*source).Public
		pV1App = &v1App
	}
	return pV1App
}
func ToPBAppBinary(source *modelgebura.AppBinary) *v11.AppBinary {
	var pV1AppBinary *v11.AppBinary
	if source != nil {
		var v1AppBinary v11.AppBinary
		v1AppBinary.Name = (*source).Name
		v1AppBinary.SizeBytes = (*source).SizeBytes
		v1AppBinary.PublicUrl = (*source).PublicURL
		if (*source).Sha256 != nil {
			v1AppBinary.Sha256 = make([]uint8, len((*source).Sha256))
			for i := 0; i < len((*source).Sha256); i++ {
				v1AppBinary.Sha256[i] = (*source).Sha256[i]
			}
		}
		pV1AppBinary = &v1AppBinary
	}
	return pV1AppBinary
}
func ToPBAppInfo(source *modelgebura.AppInfo) *v1.AppInfo {
	var pV1AppInfo *v1.AppInfo
	if source != nil {
		var v1AppInfo v1.AppInfo
		v1AppInfo.Id = ToPBInternalID((*source).ID)
		v1AppInfo.Internal = (*source).Internal
		v1AppInfo.Source = (*source).Source
		v1AppInfo.SourceAppId = (*source).SourceAppID
		pString := (*source).SourceURL
		v1AppInfo.SourceUrl = &pString
		v1AppInfo.Details = ToPBAppInfoDetail((*source).Details)
		v1AppInfo.Name = (*source).Name
		v1AppInfo.Type = ToPBAppType((*source).Type)
		v1AppInfo.ShortDescription = (*source).ShortDescription
		v1AppInfo.IconImageUrl = (*source).IconImageURL
		v1AppInfo.BackgroundImageUrl = (*source).BackgroundImageURL
		v1AppInfo.CoverImageUrl = (*source).CoverImageURL
		if (*source).Tags != nil {
			v1AppInfo.Tags = make([]string, len((*source).Tags))
			for i := 0; i < len((*source).Tags); i++ {
				v1AppInfo.Tags[i] = (*source).Tags[i]
			}
		}
		pV1AppInfo = &v1AppInfo
	}
	return pV1AppInfo
}
func ToPBAppInfoDetail(source *modelgebura.AppInfoDetails) *v1.AppInfoDetails {
	var pV1AppInfoDetails *v1.AppInfoDetails
	if source != nil {
		var v1AppInfoDetails v1.AppInfoDetails
		v1AppInfoDetails.Description = (*source).Description
		v1AppInfoDetails.ReleaseDate = (*source).ReleaseDate
		v1AppInfoDetails.Developer = (*source).Developer
		v1AppInfoDetails.Publisher = (*source).Publisher
		v1AppInfoDetails.Version = (*source).Version
		pV1AppInfoDetails = &v1AppInfoDetails
	}
	return pV1AppInfoDetails
}
func ToPBAppInfoList(source []*modelgebura.AppInfo) []*v1.AppInfo {
	var pV1AppInfoList []*v1.AppInfo
	if source != nil {
		pV1AppInfoList = make([]*v1.AppInfo, len(source))
		for i := 0; i < len(source); i++ {
			pV1AppInfoList[i] = ToPBAppInfo(source[i])
		}
	}
	return pV1AppInfoList
}
func ToPBAppInfoMixed(source *modelgebura.AppInfoMixed) *v1.AppInfoMixed {
	var pV1AppInfoMixed *v1.AppInfoMixed
	if source != nil {
		var v1AppInfoMixed v1.AppInfoMixed
		v1AppInfoMixed.Id = ToPBInternalID((*source).ID)
		v1AppInfoMixed.Details = ToPBAppInfoDetail((*source).Details)
		v1AppInfoMixed.Name = (*source).Name
		v1AppInfoMixed.Type = ToPBAppType((*source).Type)
		v1AppInfoMixed.ShortDescription = (*source).ShortDescription
		v1AppInfoMixed.IconImageUrl = (*source).IconImageURL
		v1AppInfoMixed.BackgroundImageUrl = (*source).BackgroundImageURL
		v1AppInfoMixed.CoverImageUrl = (*source).CoverImageURL
		if (*source).Tags != nil {
			v1AppInfoMixed.Tags = make([]string, len((*source).Tags))
			for i := 0; i < len((*source).Tags); i++ {
				v1AppInfoMixed.Tags[i] = (*source).Tags[i]
			}
		}
		pV1AppInfoMixed = &v1AppInfoMixed
	}
	return pV1AppInfoMixed
}
func ToPBAppInfoMixedList(source []*modelgebura.AppInfoMixed) []*v1.AppInfoMixed {
	var pV1AppInfoMixedList []*v1.AppInfoMixed
	if source != nil {
		pV1AppInfoMixedList = make([]*v1.AppInfoMixed, len(source))
		for i := 0; i < len(source); i++ {
			pV1AppInfoMixedList[i] = ToPBAppInfoMixed(source[i])
		}
	}
	return pV1AppInfoMixedList
}
func ToPBAppList(source []*modelgebura.App) []*v11.App {
	var pV1AppList []*v11.App
	if source != nil {
		pV1AppList = make([]*v11.App, len(source))
		for i := 0; i < len(source); i++ {
			pV1AppList[i] = ToPBApp(source[i])
		}
	}
	return pV1AppList
}
func ToPBAppType(source modelgebura.AppType) v1.AppType {
	var v1AppType v1.AppType
	switch source {
	case modelgebura.AppTypeGame:
		v1AppType = v1.AppType_APP_TYPE_GAME
	case modelgebura.AppTypeUnspecified:
		v1AppType = v1.AppType_APP_TYPE_UNSPECIFIED
	default:
		v1AppType = v1.AppType_APP_TYPE_UNSPECIFIED
	}
	return v1AppType
}
func ToPBDeviceInfo(source *modeltiphereth.DeviceInfo) *v11.DeviceInfo {
	var pV1DeviceInfo *v11.DeviceInfo
	if source != nil {
		var v1DeviceInfo v11.DeviceInfo
		v1DeviceInfo.DeviceId = ToPBInternalID((*source).ID)
		v1DeviceInfo.DeviceName = (*source).DeviceName
		v1DeviceInfo.SystemType = ToPBSystemType((*source).SystemType)
		v1DeviceInfo.SystemVersion = (*source).SystemVersion
		v1DeviceInfo.ClientName = (*source).ClientName
		v1DeviceInfo.ClientSourceCodeAddress = (*source).ClientSourceCodeAddress
		v1DeviceInfo.ClientVersion = (*source).ClientVersion
		pV1DeviceInfo = &v1DeviceInfo
	}
	return pV1DeviceInfo
}
func ToPBDeviceInfoList(source []*modeltiphereth.DeviceInfo) []*v11.DeviceInfo {
	var pV1DeviceInfoList []*v11.DeviceInfo
	if source != nil {
		pV1DeviceInfoList = make([]*v11.DeviceInfo, len(source))
		for i := 0; i < len(source); i++ {
			pV1DeviceInfoList[i] = ToPBDeviceInfo(source[i])
		}
	}
	return pV1DeviceInfoList
}
func ToPBEnclosure(source *modelfeed.Enclosure) *v1.FeedEnclosure {
	var pV1FeedEnclosure *v1.FeedEnclosure
	if source != nil {
		var v1FeedEnclosure v1.FeedEnclosure
		v1FeedEnclosure.Url = (*source).URL
		v1FeedEnclosure.Length = (*source).Length
		v1FeedEnclosure.Type = (*source).Type
		pV1FeedEnclosure = &v1FeedEnclosure
	}
	return pV1FeedEnclosure
}
func ToPBFeatureFlag(source *modelsupervisor.FeatureFlag) *v1.FeatureFlag {
	var pV1FeatureFlag *v1.FeatureFlag
	if source != nil {
		var v1FeatureFlag v1.FeatureFlag
		v1FeatureFlag.Id = (*source).ID
		v1FeatureFlag.Name = (*source).Name
		v1FeatureFlag.Description = (*source).Description
		v1FeatureFlag.ConfigJsonSchema = (*source).ConfigJSONSchema
		v1FeatureFlag.RequireContext = (*source).RequireContext
		if (*source).Extra != nil {
			v1FeatureFlag.Extra = make(map[string]string, len((*source).Extra))
			for key, value := range (*source).Extra {
				v1FeatureFlag.Extra[key] = value
			}
		}
		pV1FeatureFlag = &v1FeatureFlag
	}
	return pV1FeatureFlag
}
func ToPBFeatureFlagList(source []*modelsupervisor.FeatureFlag) []*v1.FeatureFlag {
	var pV1FeatureFlagList []*v1.FeatureFlag
	if source != nil {
		pV1FeatureFlagList = make([]*v1.FeatureFlag, len(source))
		for i := 0; i < len(source); i++ {
			pV1FeatureFlagList[i] = ToPBFeatureFlag(source[i])
		}
	}
	return pV1FeatureFlagList
}
func ToPBFeatureRequest(source *modelsupervisor.FeatureRequest) *v1.FeatureRequest {
	var pV1FeatureRequest *v1.FeatureRequest
	if source != nil {
		var v1FeatureRequest v1.FeatureRequest
		v1FeatureRequest.Id = (*source).ID
		v1FeatureRequest.Region = (*source).Region
		v1FeatureRequest.ConfigJson = (*source).ConfigJSON
		v1FeatureRequest.ContextId = ToPBInternalID((*source).ContextID)
		pV1FeatureRequest = &v1FeatureRequest
	}
	return pV1FeatureRequest
}
func ToPBFeed(source *modelfeed.Feed) *v1.Feed {
	var pV1Feed *v1.Feed
	if source != nil {
		var v1Feed v1.Feed
		v1Feed.Id = ToPBInternalID((*source).ID)
		v1Feed.Title = (*source).Title
		v1Feed.Link = (*source).Link
		v1Feed.Description = (*source).Description
		v1Feed.Items = ToPBFeedItemList((*source).Items)
		v1Feed.Language = (*source).Language
		v1Feed.Image = ToPBFeedImage((*source).Image)
		if (*source).Authors != nil {
			v1Feed.Authors = make([]*v1.FeedPerson, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				v1Feed.Authors[i] = pModelfeedPersonToPV1FeedPerson((*source).Authors[i])
			}
		}
		pV1Feed = &v1Feed
	}
	return pV1Feed
}
func ToPBFeedActionSet(source *modelyesod.FeedActionSet) *v11.FeedActionSet {
	var pV1FeedActionSet *v11.FeedActionSet
	if source != nil {
		var v1FeedActionSet v11.FeedActionSet
		v1FeedActionSet.Id = ToPBInternalID((*source).ID)
		v1FeedActionSet.Name = (*source).Name
		v1FeedActionSet.Description = (*source).Description
		if (*source).Actions != nil {
			v1FeedActionSet.Actions = make([]*v1.FeatureRequest, len((*source).Actions))
			for i := 0; i < len((*source).Actions); i++ {
				v1FeedActionSet.Actions[i] = ToPBFeatureRequest((*source).Actions[i])
			}
		}
		pV1FeedActionSet = &v1FeedActionSet
	}
	return pV1FeedActionSet
}
func ToPBFeedActionSetList(source []*modelyesod.FeedActionSet) []*v11.FeedActionSet {
	var pV1FeedActionSetList []*v11.FeedActionSet
	if source != nil {
		pV1FeedActionSetList = make([]*v11.FeedActionSet, len(source))
		for i := 0; i < len(source); i++ {
			pV1FeedActionSetList[i] = ToPBFeedActionSet(source[i])
		}
	}
	return pV1FeedActionSetList
}
func ToPBFeedConfig(source *modelyesod.FeedConfig) *v11.FeedConfig {
	var pV1FeedConfig *v11.FeedConfig
	if source != nil {
		var v1FeedConfig v11.FeedConfig
		v1FeedConfig.Id = ToPBInternalID((*source).ID)
		v1FeedConfig.Name = (*source).Name
		v1FeedConfig.Description = (*source).Description
		v1FeedConfig.Source = ToPBFeatureRequest((*source).Source)
		v1FeedConfig.ActionSets = ToPBInternalIDList((*source).ActionSets)
		v1FeedConfig.Status = ToPBFeedConfigStatus((*source).Status)
		v1FeedConfig.PullInterval = ToPBDuration((*source).PullInterval)
		v1FeedConfig.Category = (*source).Category
		v1FeedConfig.HideItems = (*source).HideItems
		v1FeedConfig.LatestPullTime = ToPBTime((*source).LatestPullTime)
		v1FeedConfig.LatestPullStatus = ToPBFeedConfigPullStatus((*source).LatestPullStatus)
		pString := (*source).LatestPullMessage
		v1FeedConfig.LatestPullMessage = &pString
		pV1FeedConfig = &v1FeedConfig
	}
	return pV1FeedConfig
}
func ToPBFeedConfigStatus(source modelyesod.FeedConfigStatus) v11.FeedConfigStatus {
	var v1FeedConfigStatus v11.FeedConfigStatus
	switch source {
	case modelyesod.FeedConfigStatusActive:
		v1FeedConfigStatus = v11.FeedConfigStatus_FEED_CONFIG_STATUS_ACTIVE
	case modelyesod.FeedConfigStatusSuspend:
		v1FeedConfigStatus = v11.FeedConfigStatus_FEED_CONFIG_STATUS_SUSPEND
	case modelyesod.FeedConfigStatusUnspecified:
		v1FeedConfigStatus = v11.FeedConfigStatus_FEED_CONFIG_STATUS_UNSPECIFIED
	default:
		v1FeedConfigStatus = v11.FeedConfigStatus_FEED_CONFIG_STATUS_UNSPECIFIED
	}
	return v1FeedConfigStatus
}
func ToPBFeedImage(source *modelfeed.Image) *v1.FeedImage {
	var pV1FeedImage *v1.FeedImage
	if source != nil {
		var v1FeedImage v1.FeedImage
		v1FeedImage.Url = (*source).URL
		v1FeedImage.Title = (*source).Title
		pV1FeedImage = &v1FeedImage
	}
	return pV1FeedImage
}
func ToPBFeedItem(source *modelfeed.Item) *v1.FeedItem {
	var pV1FeedItem *v1.FeedItem
	if source != nil {
		var v1FeedItem v1.FeedItem
		v1FeedItem.Id = ToPBInternalID((*source).ID)
		v1FeedItem.Title = (*source).Title
		if (*source).Authors != nil {
			v1FeedItem.Authors = make([]*v1.FeedPerson, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				v1FeedItem.Authors[i] = pModelfeedPersonToPV1FeedPerson((*source).Authors[i])
			}
		}
		v1FeedItem.Description = (*source).Description
		v1FeedItem.Content = (*source).Content
		v1FeedItem.Guid = (*source).GUID
		v1FeedItem.Link = (*source).Link
		v1FeedItem.Image = ToPBFeedImage((*source).Image)
		v1FeedItem.Published = (*source).Published
		v1FeedItem.PublishedParsed = ToPBTimePtr((*source).PublishedParsed)
		v1FeedItem.Updated = (*source).Updated
		v1FeedItem.UpdatedParsed = ToPBTimePtr((*source).UpdatedParsed)
		if (*source).Enclosures != nil {
			v1FeedItem.Enclosures = make([]*v1.FeedEnclosure, len((*source).Enclosures))
			for j := 0; j < len((*source).Enclosures); j++ {
				v1FeedItem.Enclosures[j] = ToPBEnclosure((*source).Enclosures[j])
			}
		}
		v1FeedItem.PublishPlatform = (*source).PublishPlatform
		v1FeedItem.ReadCount = (*source).ReadCount
		pV1FeedItem = &v1FeedItem
	}
	return pV1FeedItem
}
func ToPBFeedItemCollection(source *modelyesod.FeedItemCollection) *v11.FeedItemCollection {
	var pV1FeedItemCollection *v11.FeedItemCollection
	if source != nil {
		var v1FeedItemCollection v11.FeedItemCollection
		v1FeedItemCollection.Id = ToPBInternalID((*source).ID)
		v1FeedItemCollection.Name = (*source).Name
		v1FeedItemCollection.Description = (*source).Description
		v1FeedItemCollection.Category = (*source).Category
		pV1FeedItemCollection = &v1FeedItemCollection
	}
	return pV1FeedItemCollection
}
func ToPBFeedItemCollectionList(source []*modelyesod.FeedItemCollection) []*v11.FeedItemCollection {
	var pV1FeedItemCollectionList []*v11.FeedItemCollection
	if source != nil {
		pV1FeedItemCollectionList = make([]*v11.FeedItemCollection, len(source))
		for i := 0; i < len(source); i++ {
			pV1FeedItemCollectionList[i] = ToPBFeedItemCollection(source[i])
		}
	}
	return pV1FeedItemCollectionList
}
func ToPBFeedItemDigest(source *modelyesod.FeedItemDigest) *v11.FeedItemDigest {
	var pV1FeedItemDigest *v11.FeedItemDigest
	if source != nil {
		var v1FeedItemDigest v11.FeedItemDigest
		v1FeedItemDigest.FeedId = ToPBInternalID((*source).FeedID)
		v1FeedItemDigest.ItemId = ToPBInternalID((*source).ItemID)
		v1FeedItemDigest.AvatarUrl = (*source).AvatarURL
		v1FeedItemDigest.Authors = (*source).Authors
		v1FeedItemDigest.PublishedParsedTime = ToPBTime((*source).PublishedParsedTime)
		v1FeedItemDigest.Title = (*source).Title
		v1FeedItemDigest.ShortDescription = (*source).ShortDescription
		if (*source).ImageUrls != nil {
			v1FeedItemDigest.ImageUrls = make([]string, len((*source).ImageUrls))
			for i := 0; i < len((*source).ImageUrls); i++ {
				v1FeedItemDigest.ImageUrls[i] = (*source).ImageUrls[i]
			}
		}
		v1FeedItemDigest.PublishPlatform = (*source).PublishPlatform
		v1FeedItemDigest.FeedConfigName = (*source).FeedConfigName
		v1FeedItemDigest.FeedAvatarUrl = (*source).FeedAvatarURL
		v1FeedItemDigest.ReadCount = (*source).ReadCount
		pV1FeedItemDigest = &v1FeedItemDigest
	}
	return pV1FeedItemDigest
}
func ToPBFeedItemDigestList(source []*modelyesod.FeedItemDigest) []*v11.FeedItemDigest {
	var pV1FeedItemDigestList []*v11.FeedItemDigest
	if source != nil {
		pV1FeedItemDigestList = make([]*v11.FeedItemDigest, len(source))
		for i := 0; i < len(source); i++ {
			pV1FeedItemDigestList[i] = ToPBFeedItemDigest(source[i])
		}
	}
	return pV1FeedItemDigestList
}
func ToPBFeedItemList(source []*modelfeed.Item) []*v1.FeedItem {
	var pV1FeedItemList []*v1.FeedItem
	if source != nil {
		pV1FeedItemList = make([]*v1.FeedItem, len(source))
		for i := 0; i < len(source); i++ {
			pV1FeedItemList[i] = ToPBFeedItem(source[i])
		}
	}
	return pV1FeedItemList
}
func ToPBFeedWithConfig(source *modelyesod.FeedWithConfig) *v11.ListFeedConfigsResponse_FeedWithConfig {
	var pV1ListFeedConfigsResponse_FeedWithConfig *v11.ListFeedConfigsResponse_FeedWithConfig
	if source != nil {
		var v1ListFeedConfigsResponse_FeedWithConfig v11.ListFeedConfigsResponse_FeedWithConfig
		v1ListFeedConfigsResponse_FeedWithConfig.Feed = ToPBFeed((*source).Feed)
		v1ListFeedConfigsResponse_FeedWithConfig.Config = ToPBFeedConfig((*source).FeedConfig)
		pV1ListFeedConfigsResponse_FeedWithConfig = &v1ListFeedConfigsResponse_FeedWithConfig
	}
	return pV1ListFeedConfigsResponse_FeedWithConfig
}
func ToPBFeedWithConfigList(source []*modelyesod.FeedWithConfig) []*v11.ListFeedConfigsResponse_FeedWithConfig {
	var pV1ListFeedConfigsResponse_FeedWithConfigList []*v11.ListFeedConfigsResponse_FeedWithConfig
	if source != nil {
		pV1ListFeedConfigsResponse_FeedWithConfigList = make([]*v11.ListFeedConfigsResponse_FeedWithConfig, len(source))
		for i := 0; i < len(source); i++ {
			pV1ListFeedConfigsResponse_FeedWithConfigList[i] = ToPBFeedWithConfig(source[i])
		}
	}
	return pV1ListFeedConfigsResponse_FeedWithConfigList
}
func ToPBInternalIDList(source []model.InternalID) []*v1.InternalID {
	var pV1InternalIDList []*v1.InternalID
	if source != nil {
		pV1InternalIDList = make([]*v1.InternalID, len(source))
		for i := 0; i < len(source); i++ {
			pV1InternalIDList[i] = ToPBInternalID(source[i])
		}
	}
	return pV1InternalIDList
}
func ToPBNotifyFlow(source *modelnetzach.NotifyFlow) *v11.NotifyFlow {
	var pV1NotifyFlow *v11.NotifyFlow
	if source != nil {
		var v1NotifyFlow v11.NotifyFlow
		v1NotifyFlow.Id = ToPBInternalID((*source).ID)
		v1NotifyFlow.Name = (*source).Name
		v1NotifyFlow.Description = (*source).Description
		if (*source).Sources != nil {
			v1NotifyFlow.Sources = make([]*v11.NotifyFlowSource, len((*source).Sources))
			for i := 0; i < len((*source).Sources); i++ {
				v1NotifyFlow.Sources[i] = ToPBNotifyFlowSource((*source).Sources[i])
			}
		}
		if (*source).Targets != nil {
			v1NotifyFlow.Targets = make([]*v11.NotifyFlowTarget, len((*source).Targets))
			for j := 0; j < len((*source).Targets); j++ {
				v1NotifyFlow.Targets[j] = ToPBNotifyFlowTarget((*source).Targets[j])
			}
		}
		v1NotifyFlow.Status = ToPBNotifyFlowStatus((*source).Status)
		pV1NotifyFlow = &v1NotifyFlow
	}
	return pV1NotifyFlow
}
func ToPBNotifyFlowList(source []*modelnetzach.NotifyFlow) []*v11.NotifyFlow {
	var pV1NotifyFlowList []*v11.NotifyFlow
	if source != nil {
		pV1NotifyFlowList = make([]*v11.NotifyFlow, len(source))
		for i := 0; i < len(source); i++ {
			pV1NotifyFlowList[i] = ToPBNotifyFlow(source[i])
		}
	}
	return pV1NotifyFlowList
}
func ToPBNotifyFlowSource(source *modelnetzach.NotifyFlowSource) *v11.NotifyFlowSource {
	var pV1NotifyFlowSource *v11.NotifyFlowSource
	if source != nil {
		var v1NotifyFlowSource v11.NotifyFlowSource
		v1NotifyFlowSource.Filter = pModelnetzachNotifyFilterToPV1NotifyFilter((*source).Filter)
		v1NotifyFlowSource.SourceId = ToPBInternalID((*source).SourceID)
		pV1NotifyFlowSource = &v1NotifyFlowSource
	}
	return pV1NotifyFlowSource
}
func ToPBNotifyFlowStatus(source modelnetzach.NotifyFlowStatus) v11.NotifyFlowStatus {
	var v1NotifyFlowStatus v11.NotifyFlowStatus
	switch source {
	case modelnetzach.NotifyFlowStatusActive:
		v1NotifyFlowStatus = v11.NotifyFlowStatus_NOTIFY_FLOW_STATUS_ACTIVE
	case modelnetzach.NotifyFlowStatusSuspend:
		v1NotifyFlowStatus = v11.NotifyFlowStatus_NOTIFY_FLOW_STATUS_SUSPEND
	case modelnetzach.NotifyFlowStatusUnspecified:
		v1NotifyFlowStatus = v11.NotifyFlowStatus_NOTIFY_FLOW_STATUS_UNSPECIFIED
	default:
		v1NotifyFlowStatus = v11.NotifyFlowStatus_NOTIFY_FLOW_STATUS_UNSPECIFIED
	}
	return v1NotifyFlowStatus
}
func ToPBNotifyFlowTarget(source *modelnetzach.NotifyFlowTarget) *v11.NotifyFlowTarget {
	var pV1NotifyFlowTarget *v11.NotifyFlowTarget
	if source != nil {
		var v1NotifyFlowTarget v11.NotifyFlowTarget
		v1NotifyFlowTarget.Filter = pModelnetzachNotifyFilterToPV1NotifyFilter((*source).Filter)
		v1NotifyFlowTarget.TargetId = ToPBInternalID((*source).TargetID)
		pV1NotifyFlowTarget = &v1NotifyFlowTarget
	}
	return pV1NotifyFlowTarget
}
func ToPBNotifyTarget(source *modelnetzach.NotifyTarget) *v11.NotifyTarget {
	var pV1NotifyTarget *v11.NotifyTarget
	if source != nil {
		var v1NotifyTarget v11.NotifyTarget
		v1NotifyTarget.Id = ToPBInternalID((*source).ID)
		v1NotifyTarget.Name = (*source).Name
		v1NotifyTarget.Description = (*source).Description
		v1NotifyTarget.Destination = ToPBFeatureRequest((*source).Destination)
		v1NotifyTarget.Status = ToPBNotifyTargetStatus((*source).Status)
		pV1NotifyTarget = &v1NotifyTarget
	}
	return pV1NotifyTarget
}
func ToPBNotifyTargetList(source []*modelnetzach.NotifyTarget) []*v11.NotifyTarget {
	var pV1NotifyTargetList []*v11.NotifyTarget
	if source != nil {
		pV1NotifyTargetList = make([]*v11.NotifyTarget, len(source))
		for i := 0; i < len(source); i++ {
			pV1NotifyTargetList[i] = ToPBNotifyTarget(source[i])
		}
	}
	return pV1NotifyTargetList
}
func ToPBNotifyTargetStatus(source modelnetzach.NotifyTargetStatus) v11.NotifyTargetStatus {
	var v1NotifyTargetStatus v11.NotifyTargetStatus
	switch source {
	case modelnetzach.NotifyTargetStatusActive:
		v1NotifyTargetStatus = v11.NotifyTargetStatus_NOTIFY_TARGET_STATUS_ACTIVE
	case modelnetzach.NotifyTargetStatusSuspend:
		v1NotifyTargetStatus = v11.NotifyTargetStatus_NOTIFY_TARGET_STATUS_SUSPEND
	case modelnetzach.NotifyTargetStatusUnspecified:
		v1NotifyTargetStatus = v11.NotifyTargetStatus_NOTIFY_TARGET_STATUS_UNSPECIFIED
	default:
		v1NotifyTargetStatus = v11.NotifyTargetStatus_NOTIFY_TARGET_STATUS_UNSPECIFIED
	}
	return v1NotifyTargetStatus
}
func ToPBPorter(source *modelsupervisor.PorterInstanceController) *v11.Porter {
	var pV1Porter *v11.Porter
	if source != nil {
		var v1Porter v11.Porter
		v1Porter.Id = ToPBInternalID((*source).PorterInstance.ID)
		v1Porter.BinarySummary = pModelsupervisorPorterBinarySummaryToPV1PorterBinarySummary((*source).PorterInstance.BinarySummary)
		v1Porter.GlobalName = (*source).PorterInstance.GlobalName
		v1Porter.Region = (*source).PorterInstance.Region
		v1Porter.FeatureSummary = pModelsupervisorPorterFeatureSummaryToPV1FeatureSummary((*source).PorterInstance.FeatureSummary)
		v1Porter.Status = ToPBUserStatus((*source).PorterInstance.Status)
		v1Porter.ConnectionStatus = ToPBPorterConnectionStatus((*source).ConnectionStatus)
		pString := (*source).PorterInstance.ContextJSONSchema
		v1Porter.ContextJsonSchema = &pString
		v1Porter.ConnectionStatusMessage = (*source).ConnectionStatusMessage
		pV1Porter = &v1Porter
	}
	return pV1Porter
}
func ToPBPorterConnectionStatus(source modelsupervisor.PorterConnectionStatus) v11.PorterConnectionStatus {
	var v1PorterConnectionStatus v11.PorterConnectionStatus
	switch source {
	case modelsupervisor.PorterConnectionStatusActivationFailed:
		v1PorterConnectionStatus = v11.PorterConnectionStatus_PORTER_CONNECTION_STATUS_ACTIVATION_FAILED
	case modelsupervisor.PorterConnectionStatusActive:
		v1PorterConnectionStatus = v11.PorterConnectionStatus_PORTER_CONNECTION_STATUS_ACTIVE
	case modelsupervisor.PorterConnectionStatusConnected:
		v1PorterConnectionStatus = v11.PorterConnectionStatus_PORTER_CONNECTION_STATUS_CONNECTED
	case modelsupervisor.PorterConnectionStatusDisconnected:
		v1PorterConnectionStatus = v11.PorterConnectionStatus_PORTER_CONNECTION_STATUS_DISCONNECTED
	case modelsupervisor.PorterConnectionStatusDowngraded:
		v1PorterConnectionStatus = v11.PorterConnectionStatus_PORTER_CONNECTION_STATUS_DOWNGRADED
	case modelsupervisor.PorterConnectionStatusUnspecified:
		v1PorterConnectionStatus = v11.PorterConnectionStatus_PORTER_CONNECTION_STATUS_UNSPECIFIED
	default:
		v1PorterConnectionStatus = v11.PorterConnectionStatus_PORTER_CONNECTION_STATUS_UNSPECIFIED
	}
	return v1PorterConnectionStatus
}
func ToPBPorterContext(source *modelsupervisor.PorterContextController) *v11.PorterContext {
	var pV1PorterContext *v11.PorterContext
	if source != nil {
		var v1PorterContext v11.PorterContext
		v1PorterContext.Id = ToPBInternalID((*source).PorterContext.ID)
		v1PorterContext.GlobalName = (*source).PorterContext.GlobalName
		v1PorterContext.Region = (*source).PorterContext.Region
		v1PorterContext.ContextJson = (*source).PorterContext.ContextJSON
		v1PorterContext.Name = (*source).PorterContext.Name
		v1PorterContext.Description = (*source).PorterContext.Description
		v1PorterContext.Status = ToPBPorterContextStatus((*source).PorterContext.Status)
		v1PorterContext.HandleStatus = ToPBPorterContextHandleStatus((*source).HandleStatus)
		v1PorterContext.HandleStatusMessage = (*source).HandleStatusMessage
		pV1PorterContext = &v1PorterContext
	}
	return pV1PorterContext
}
func ToPBPorterContextHandleStatus(source modelsupervisor.PorterContextHandleStatus) v11.PorterContextHandleStatus {
	var v1PorterContextHandleStatus v11.PorterContextHandleStatus
	switch source {
	case modelsupervisor.PorterContextHandleStatusActive:
		v1PorterContextHandleStatus = v11.PorterContextHandleStatus_PORTER_CONTEXT_HANDLE_STATUS_ACTIVE
	case modelsupervisor.PorterContextHandleStatusBlocked:
		v1PorterContextHandleStatus = v11.PorterContextHandleStatus_PORTER_CONTEXT_HANDLE_STATUS_BLOCKED
	case modelsupervisor.PorterContextHandleStatusDowngraded:
		v1PorterContextHandleStatus = v11.PorterContextHandleStatus_PORTER_CONTEXT_HANDLE_STATUS_DOWNGRADED
	case modelsupervisor.PorterContextHandleStatusQueueing:
		v1PorterContextHandleStatus = v11.PorterContextHandleStatus_PORTER_CONTEXT_HANDLE_STATUS_QUEUEING
	case modelsupervisor.PorterContextHandleStatusUnspecified:
		v1PorterContextHandleStatus = v11.PorterContextHandleStatus_PORTER_CONTEXT_HANDLE_STATUS_UNSPECIFIED
	default:
		v1PorterContextHandleStatus = v11.PorterContextHandleStatus_PORTER_CONTEXT_HANDLE_STATUS_UNSPECIFIED
	}
	return v1PorterContextHandleStatus
}
func ToPBPorterContextList(source []*modelsupervisor.PorterContextController) []*v11.PorterContext {
	var pV1PorterContextList []*v11.PorterContext
	if source != nil {
		pV1PorterContextList = make([]*v11.PorterContext, len(source))
		for i := 0; i < len(source); i++ {
			pV1PorterContextList[i] = ToPBPorterContext(source[i])
		}
	}
	return pV1PorterContextList
}
func ToPBPorterContextStatus(source modelsupervisor.PorterContextStatus) v11.PorterContextStatus {
	var v1PorterContextStatus v11.PorterContextStatus
	switch source {
	case modelsupervisor.PorterContextStatusActive:
		v1PorterContextStatus = v11.PorterContextStatus_PORTER_CONTEXT_STATUS_ACTIVE
	case modelsupervisor.PorterContextStatusDisabled:
		v1PorterContextStatus = v11.PorterContextStatus_PORTER_CONTEXT_STATUS_DISABLED
	case modelsupervisor.PorterContextStatusUnspecified:
		v1PorterContextStatus = v11.PorterContextStatus_PORTER_CONTEXT_STATUS_UNSPECIFIED
	default:
		v1PorterContextStatus = v11.PorterContextStatus_PORTER_CONTEXT_STATUS_UNSPECIFIED
	}
	return v1PorterContextStatus
}
func ToPBPorterGroup(source *modelsupervisor.PorterGroup) *v11.PorterGroup {
	var pV1PorterGroup *v11.PorterGroup
	if source != nil {
		var v1PorterGroup v11.PorterGroup
		v1PorterGroup.BinarySummary = pModelsupervisorPorterBinarySummaryToPV1PorterBinarySummary((*source).BinarySummary)
		v1PorterGroup.GlobalName = (*source).GlobalName
		if (*source).Regions != nil {
			v1PorterGroup.Regions = make([]string, len((*source).Regions))
			for i := 0; i < len((*source).Regions); i++ {
				v1PorterGroup.Regions[i] = (*source).Regions[i]
			}
		}
		pString := (*source).ContextJSONSchema
		v1PorterGroup.ContextJsonSchema = &pString
		v1PorterGroup.FeatureSummary = pModelsupervisorPorterFeatureSummaryToPV1FeatureSummary((*source).FeatureSummary)
		pV1PorterGroup = &v1PorterGroup
	}
	return pV1PorterGroup
}
func ToPBPorterGroupList(source []*modelsupervisor.PorterGroup) []*v11.PorterGroup {
	var pV1PorterGroupList []*v11.PorterGroup
	if source != nil {
		pV1PorterGroupList = make([]*v11.PorterGroup, len(source))
		for i := 0; i < len(source); i++ {
			pV1PorterGroupList[i] = ToPBPorterGroup(source[i])
		}
	}
	return pV1PorterGroupList
}
func ToPBPorterList(source []*modelsupervisor.PorterInstanceController) []*v11.Porter {
	var pV1PorterList []*v11.Porter
	if source != nil {
		pV1PorterList = make([]*v11.Porter, len(source))
		for i := 0; i < len(source); i++ {
			pV1PorterList[i] = ToPBPorter(source[i])
		}
	}
	return pV1PorterList
}
func ToPBServerFeatureSummary(source *modelsupervisor.ServerFeatureSummary) *v1.FeatureSummary {
	var pV1FeatureSummary *v1.FeatureSummary
	if source != nil {
		var v1FeatureSummary v1.FeatureSummary
		v1FeatureSummary.AccountPlatforms = ToPBFeatureFlagList((*source).AccountPlatforms)
		v1FeatureSummary.AppInfoSources = ToPBFeatureFlagList((*source).AppInfoSources)
		v1FeatureSummary.FeedSources = ToPBFeatureFlagList((*source).FeedSources)
		v1FeatureSummary.NotifyDestinations = ToPBFeatureFlagList((*source).NotifyDestinations)
		v1FeatureSummary.FeedItemActions = ToPBFeatureFlagList((*source).FeedItemActions)
		v1FeatureSummary.FeedSetters = ToPBFeatureFlagList((*source).FeedSetters)
		v1FeatureSummary.FeedGetters = ToPBFeatureFlagList((*source).FeedGetters)
		pV1FeatureSummary = &v1FeatureSummary
	}
	return pV1FeatureSummary
}
func ToPBSystemNotification(source *modelnetzach.SystemNotification) *v11.SystemNotification {
	var pV1SystemNotification *v11.SystemNotification
	if source != nil {
		var v1SystemNotification v11.SystemNotification
		v1SystemNotification.Id = ToPBInternalID((*source).ID)
		v1SystemNotification.Type = ToPBSystemNotificationType((*source).Type)
		v1SystemNotification.Level = ToPBSystemNotificationLevel((*source).Level)
		v1SystemNotification.Status = ToPBSystemNotificationStatus((*source).Status)
		v1SystemNotification.Title = (*source).Title
		v1SystemNotification.Content = (*source).Content
		v1SystemNotification.CreateTime = ToPBTime((*source).CreateTime)
		v1SystemNotification.UpdateTime = ToPBTime((*source).UpdateTime)
		pV1SystemNotification = &v1SystemNotification
	}
	return pV1SystemNotification
}
func ToPBSystemNotificationLevel(source modelnetzach.SystemNotificationLevel) v11.SystemNotificationLevel {
	var v1SystemNotificationLevel v11.SystemNotificationLevel
	switch source {
	case modelnetzach.SystemNotificationLevelError:
		v1SystemNotificationLevel = v11.SystemNotificationLevel_SYSTEM_NOTIFICATION_LEVEL_ERROR
	case modelnetzach.SystemNotificationLevelInfo:
		v1SystemNotificationLevel = v11.SystemNotificationLevel_SYSTEM_NOTIFICATION_LEVEL_INFO
	case modelnetzach.SystemNotificationLevelOngoing:
		v1SystemNotificationLevel = v11.SystemNotificationLevel_SYSTEM_NOTIFICATION_LEVEL_ONGOING
	case modelnetzach.SystemNotificationLevelUnspecified:
		v1SystemNotificationLevel = v11.SystemNotificationLevel_SYSTEM_NOTIFICATION_LEVEL_UNSPECIFIED
	case modelnetzach.SystemNotificationLevelWarning:
		v1SystemNotificationLevel = v11.SystemNotificationLevel_SYSTEM_NOTIFICATION_LEVEL_WARNING
	default:
		v1SystemNotificationLevel = v11.SystemNotificationLevel_SYSTEM_NOTIFICATION_LEVEL_UNSPECIFIED
	}
	return v1SystemNotificationLevel
}
func ToPBSystemNotificationList(source []*modelnetzach.SystemNotification) []*v11.SystemNotification {
	var pV1SystemNotificationList []*v11.SystemNotification
	if source != nil {
		pV1SystemNotificationList = make([]*v11.SystemNotification, len(source))
		for i := 0; i < len(source); i++ {
			pV1SystemNotificationList[i] = ToPBSystemNotification(source[i])
		}
	}
	return pV1SystemNotificationList
}
func ToPBSystemNotificationStatus(source modelnetzach.SystemNotificationStatus) v11.SystemNotificationStatus {
	var v1SystemNotificationStatus v11.SystemNotificationStatus
	switch source {
	case modelnetzach.SystemNotificationStatusDismissed:
		v1SystemNotificationStatus = v11.SystemNotificationStatus_SYSTEM_NOTIFICATION_STATUS_DISMISSED
	case modelnetzach.SystemNotificationStatusRead:
		v1SystemNotificationStatus = v11.SystemNotificationStatus_SYSTEM_NOTIFICATION_STATUS_READ
	case modelnetzach.SystemNotificationStatusUnread:
		v1SystemNotificationStatus = v11.SystemNotificationStatus_SYSTEM_NOTIFICATION_STATUS_UNREAD
	case modelnetzach.SystemNotificationStatusUnspecified:
		v1SystemNotificationStatus = v11.SystemNotificationStatus_SYSTEM_NOTIFICATION_STATUS_UNSPECIFIED
	default:
		v1SystemNotificationStatus = v11.SystemNotificationStatus_SYSTEM_NOTIFICATION_STATUS_UNSPECIFIED
	}
	return v1SystemNotificationStatus
}
func ToPBSystemNotificationType(source modelnetzach.SystemNotificationType) v11.SystemNotificationType {
	var v1SystemNotificationType v11.SystemNotificationType
	switch source {
	case modelnetzach.SystemNotificationTypeSystem:
		v1SystemNotificationType = v11.SystemNotificationType_SYSTEM_NOTIFICATION_TYPE_SYSTEM
	case modelnetzach.SystemNotificationTypeUnspecified:
		v1SystemNotificationType = v11.SystemNotificationType_SYSTEM_NOTIFICATION_TYPE_UNSPECIFIED
	case modelnetzach.SystemNotificationTypeUser:
		v1SystemNotificationType = v11.SystemNotificationType_SYSTEM_NOTIFICATION_TYPE_USER
	default:
		v1SystemNotificationType = v11.SystemNotificationType_SYSTEM_NOTIFICATION_TYPE_UNSPECIFIED
	}
	return v1SystemNotificationType
}
func ToPBSystemType(source modeltiphereth.SystemType) v11.SystemType {
	var v1SystemType v11.SystemType
	switch source {
	case modeltiphereth.SystemTypeAndroid:
		v1SystemType = v11.SystemType_SYSTEM_TYPE_ANDROID
	case modeltiphereth.SystemTypeIOS:
		v1SystemType = v11.SystemType_SYSTEM_TYPE_IOS
	case modeltiphereth.SystemTypeLinux:
		v1SystemType = v11.SystemType_SYSTEM_TYPE_LINUX
	case modeltiphereth.SystemTypeMacOS:
		v1SystemType = v11.SystemType_SYSTEM_TYPE_MACOS
	case modeltiphereth.SystemTypeUnspecified:
		v1SystemType = v11.SystemType_SYSTEM_TYPE_UNSPECIFIED
	case modeltiphereth.SystemTypeWeb:
		v1SystemType = v11.SystemType_SYSTEM_TYPE_WEB
	case modeltiphereth.SystemTypeWindows:
		v1SystemType = v11.SystemType_SYSTEM_TYPE_WINDOWS
	default:
		v1SystemType = v11.SystemType_SYSTEM_TYPE_UNSPECIFIED
	}
	return v1SystemType
}
func ToPBTimeRange(source *model.TimeRange) *v1.TimeRange {
	var pV1TimeRange *v1.TimeRange
	if source != nil {
		var v1TimeRange v1.TimeRange
		v1TimeRange.StartTime = ToPBTime((*source).StartTime)
		v1TimeRange.Duration = ToPBDuration((*source).Duration)
		pV1TimeRange = &v1TimeRange
	}
	return pV1TimeRange
}
func ToPBUser(source *modeltiphereth.User) *v11.User {
	var pV1User *v11.User
	if source != nil {
		var v1User v11.User
		v1User.Id = ToPBInternalID((*source).ID)
		v1User.Username = (*source).UserName
		v1User.Type = ToPBUserType((*source).Type)
		v1User.Status = ToPBUserStatus((*source).Status)
		pV1User = &v1User
	}
	return pV1User
}
func ToPBUserList(source []*modeltiphereth.User) []*v11.User {
	var pV1UserList []*v11.User
	if source != nil {
		pV1UserList = make([]*v11.User, len(source))
		for i := 0; i < len(source); i++ {
			pV1UserList[i] = ToPBUser(source[i])
		}
	}
	return pV1UserList
}
func ToPBUserSession(source *modeltiphereth.UserSession) *v11.UserSession {
	var pV1UserSession *v11.UserSession
	if source != nil {
		var v1UserSession v11.UserSession
		v1UserSession.Id = ToPBInternalID((*source).ID)
		v1UserSession.UserId = ToPBInternalID((*source).UserID)
		v1UserSession.DeviceInfo = ToPBDeviceInfo((*source).DeviceInfo)
		v1UserSession.CreateTime = ToPBTime((*source).CreateAt)
		v1UserSession.ExpireTime = ToPBTime((*source).ExpireAt)
		pV1UserSession = &v1UserSession
	}
	return pV1UserSession
}
func ToPBUserSessionList(source []*modeltiphereth.UserSession) []*v11.UserSession {
	var pV1UserSessionList []*v11.UserSession
	if source != nil {
		pV1UserSessionList = make([]*v11.UserSession, len(source))
		for i := 0; i < len(source); i++ {
			pV1UserSessionList[i] = ToPBUserSession(source[i])
		}
	}
	return pV1UserSessionList
}
func ToPBUserStatus(source modeltiphereth.UserStatus) v11.UserStatus {
	var v1UserStatus v11.UserStatus
	switch source {
	case modeltiphereth.UserStatusActive:
		v1UserStatus = v11.UserStatus_USER_STATUS_ACTIVE
	case modeltiphereth.UserStatusBlocked:
		v1UserStatus = v11.UserStatus_USER_STATUS_BLOCKED
	case modeltiphereth.UserStatusUnspecified:
		v1UserStatus = v11.UserStatus_USER_STATUS_UNSPECIFIED
	default:
		v1UserStatus = v11.UserStatus_USER_STATUS_UNSPECIFIED
	}
	return v1UserStatus
}
func ToPBUserType(source libauth.UserType) v11.UserType {
	var v1UserType v11.UserType
	switch source {
	case libauth.UserTypeAdmin:
		v1UserType = v11.UserType_USER_TYPE_ADMIN
	case libauth.UserTypeNormal:
		v1UserType = v11.UserType_USER_TYPE_NORMAL
	case libauth.UserTypePorter:
		v1UserType = v11.UserType_USER_TYPE_PORTER
	case libauth.UserTypeSentinel:
		v1UserType = v11.UserType_USER_TYPE_SENTINEL
	case libauth.UserTypeUnspecified:
		v1UserType = v11.UserType_USER_TYPE_UNSPECIFIED
	default:
		v1UserType = v11.UserType_USER_TYPE_UNSPECIFIED
	}
	return v1UserType
}
func pModelfeedPersonToPV1FeedPerson(source *modelfeed.Person) *v1.FeedPerson {
	var pV1FeedPerson *v1.FeedPerson
	if source != nil {
		var v1FeedPerson v1.FeedPerson
		v1FeedPerson.Name = (*source).Name
		v1FeedPerson.Email = (*source).Email
		pV1FeedPerson = &v1FeedPerson
	}
	return pV1FeedPerson
}
func pModelnetzachNotifyFilterToPV1NotifyFilter(source *modelnetzach.NotifyFilter) *v11.NotifyFilter {
	var pV1NotifyFilter *v11.NotifyFilter
	if source != nil {
		var v1NotifyFilter v11.NotifyFilter
		if (*source).ExcludeKeywords != nil {
			v1NotifyFilter.ExcludeKeywords = make([]string, len((*source).ExcludeKeywords))
			for i := 0; i < len((*source).ExcludeKeywords); i++ {
				v1NotifyFilter.ExcludeKeywords[i] = (*source).ExcludeKeywords[i]
			}
		}
		if (*source).IncludeKeywords != nil {
			v1NotifyFilter.IncludeKeywords = make([]string, len((*source).IncludeKeywords))
			for j := 0; j < len((*source).IncludeKeywords); j++ {
				v1NotifyFilter.IncludeKeywords[j] = (*source).IncludeKeywords[j]
			}
		}
		pV1NotifyFilter = &v1NotifyFilter
	}
	return pV1NotifyFilter
}
func pModelsupervisorPorterBinarySummaryToPV1PorterBinarySummary(source *modelsupervisor.PorterBinarySummary) *v1.PorterBinarySummary {
	var pV1PorterBinarySummary *v1.PorterBinarySummary
	if source != nil {
		var v1PorterBinarySummary v1.PorterBinarySummary
		v1PorterBinarySummary.SourceCodeAddress = (*source).SourceCodeAddress
		v1PorterBinarySummary.BuildVersion = (*source).BuildVersion
		v1PorterBinarySummary.BuildDate = (*source).BuildDate
		v1PorterBinarySummary.Name = (*source).Name
		v1PorterBinarySummary.Version = (*source).Version
		v1PorterBinarySummary.Description = (*source).Description
		pV1PorterBinarySummary = &v1PorterBinarySummary
	}
	return pV1PorterBinarySummary
}
func pModelsupervisorPorterFeatureSummaryToPV1FeatureSummary(source *modelsupervisor.PorterFeatureSummary) *v1.FeatureSummary {
	var pV1FeatureSummary *v1.FeatureSummary
	if source != nil {
		var v1FeatureSummary v1.FeatureSummary
		v1FeatureSummary.AccountPlatforms = ToPBFeatureFlagList((*source).AccountPlatforms)
		v1FeatureSummary.AppInfoSources = ToPBFeatureFlagList((*source).AppInfoSources)
		v1FeatureSummary.FeedSources = ToPBFeatureFlagList((*source).FeedSources)
		v1FeatureSummary.NotifyDestinations = ToPBFeatureFlagList((*source).NotifyDestinations)
		v1FeatureSummary.FeedItemActions = ToPBFeatureFlagList((*source).FeedItemActions)
		v1FeatureSummary.FeedSetters = ToPBFeatureFlagList((*source).FeedSetters)
		v1FeatureSummary.FeedGetters = ToPBFeatureFlagList((*source).FeedGetters)
		pV1FeatureSummary = &v1FeatureSummary
	}
	return pV1FeatureSummary
}
