// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/tuihub/librarian/internal/model/modelsupervisor"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/feed"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/feedactionset"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/feedconfigaction"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/notifysource"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// FeedConfigUpdate is the builder for updating FeedConfig entities.
type FeedConfigUpdate struct {
	config
	hooks    []Hook
	mutation *FeedConfigMutation
}

// Where appends a list predicates to the FeedConfigUpdate builder.
func (fcu *FeedConfigUpdate) Where(ps ...predicate.FeedConfig) *FeedConfigUpdate {
	fcu.mutation.Where(ps...)
	return fcu
}

// SetUserFeedConfig sets the "user_feed_config" field.
func (fcu *FeedConfigUpdate) SetUserFeedConfig(mi model.InternalID) *FeedConfigUpdate {
	fcu.mutation.SetUserFeedConfig(mi)
	return fcu
}

// SetNillableUserFeedConfig sets the "user_feed_config" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableUserFeedConfig(mi *model.InternalID) *FeedConfigUpdate {
	if mi != nil {
		fcu.SetUserFeedConfig(*mi)
	}
	return fcu
}

// SetName sets the "name" field.
func (fcu *FeedConfigUpdate) SetName(s string) *FeedConfigUpdate {
	fcu.mutation.SetName(s)
	return fcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableName(s *string) *FeedConfigUpdate {
	if s != nil {
		fcu.SetName(*s)
	}
	return fcu
}

// SetDescription sets the "description" field.
func (fcu *FeedConfigUpdate) SetDescription(s string) *FeedConfigUpdate {
	fcu.mutation.SetDescription(s)
	return fcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableDescription(s *string) *FeedConfigUpdate {
	if s != nil {
		fcu.SetDescription(*s)
	}
	return fcu
}

// SetSource sets the "source" field.
func (fcu *FeedConfigUpdate) SetSource(mr *modelsupervisor.FeatureRequest) *FeedConfigUpdate {
	fcu.mutation.SetSource(mr)
	return fcu
}

// SetStatus sets the "status" field.
func (fcu *FeedConfigUpdate) SetStatus(f feedconfig.Status) *FeedConfigUpdate {
	fcu.mutation.SetStatus(f)
	return fcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableStatus(f *feedconfig.Status) *FeedConfigUpdate {
	if f != nil {
		fcu.SetStatus(*f)
	}
	return fcu
}

// SetCategory sets the "category" field.
func (fcu *FeedConfigUpdate) SetCategory(s string) *FeedConfigUpdate {
	fcu.mutation.SetCategory(s)
	return fcu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableCategory(s *string) *FeedConfigUpdate {
	if s != nil {
		fcu.SetCategory(*s)
	}
	return fcu
}

// SetPullInterval sets the "pull_interval" field.
func (fcu *FeedConfigUpdate) SetPullInterval(t time.Duration) *FeedConfigUpdate {
	fcu.mutation.ResetPullInterval()
	fcu.mutation.SetPullInterval(t)
	return fcu
}

// SetNillablePullInterval sets the "pull_interval" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillablePullInterval(t *time.Duration) *FeedConfigUpdate {
	if t != nil {
		fcu.SetPullInterval(*t)
	}
	return fcu
}

// AddPullInterval adds t to the "pull_interval" field.
func (fcu *FeedConfigUpdate) AddPullInterval(t time.Duration) *FeedConfigUpdate {
	fcu.mutation.AddPullInterval(t)
	return fcu
}

// SetHideItems sets the "hide_items" field.
func (fcu *FeedConfigUpdate) SetHideItems(b bool) *FeedConfigUpdate {
	fcu.mutation.SetHideItems(b)
	return fcu
}

// SetNillableHideItems sets the "hide_items" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableHideItems(b *bool) *FeedConfigUpdate {
	if b != nil {
		fcu.SetHideItems(*b)
	}
	return fcu
}

// SetLatestPullAt sets the "latest_pull_at" field.
func (fcu *FeedConfigUpdate) SetLatestPullAt(t time.Time) *FeedConfigUpdate {
	fcu.mutation.SetLatestPullAt(t)
	return fcu
}

// SetNillableLatestPullAt sets the "latest_pull_at" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableLatestPullAt(t *time.Time) *FeedConfigUpdate {
	if t != nil {
		fcu.SetLatestPullAt(*t)
	}
	return fcu
}

// SetLatestPullStatus sets the "latest_pull_status" field.
func (fcu *FeedConfigUpdate) SetLatestPullStatus(fps feedconfig.LatestPullStatus) *FeedConfigUpdate {
	fcu.mutation.SetLatestPullStatus(fps)
	return fcu
}

// SetNillableLatestPullStatus sets the "latest_pull_status" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableLatestPullStatus(fps *feedconfig.LatestPullStatus) *FeedConfigUpdate {
	if fps != nil {
		fcu.SetLatestPullStatus(*fps)
	}
	return fcu
}

// SetLatestPullMessage sets the "latest_pull_message" field.
func (fcu *FeedConfigUpdate) SetLatestPullMessage(s string) *FeedConfigUpdate {
	fcu.mutation.SetLatestPullMessage(s)
	return fcu
}

// SetNillableLatestPullMessage sets the "latest_pull_message" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableLatestPullMessage(s *string) *FeedConfigUpdate {
	if s != nil {
		fcu.SetLatestPullMessage(*s)
	}
	return fcu
}

// SetNextPullBeginAt sets the "next_pull_begin_at" field.
func (fcu *FeedConfigUpdate) SetNextPullBeginAt(t time.Time) *FeedConfigUpdate {
	fcu.mutation.SetNextPullBeginAt(t)
	return fcu
}

// SetNillableNextPullBeginAt sets the "next_pull_begin_at" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableNextPullBeginAt(t *time.Time) *FeedConfigUpdate {
	if t != nil {
		fcu.SetNextPullBeginAt(*t)
	}
	return fcu
}

// SetUpdatedAt sets the "updated_at" field.
func (fcu *FeedConfigUpdate) SetUpdatedAt(t time.Time) *FeedConfigUpdate {
	fcu.mutation.SetUpdatedAt(t)
	return fcu
}

// SetCreatedAt sets the "created_at" field.
func (fcu *FeedConfigUpdate) SetCreatedAt(t time.Time) *FeedConfigUpdate {
	fcu.mutation.SetCreatedAt(t)
	return fcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableCreatedAt(t *time.Time) *FeedConfigUpdate {
	if t != nil {
		fcu.SetCreatedAt(*t)
	}
	return fcu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (fcu *FeedConfigUpdate) SetOwnerID(id model.InternalID) *FeedConfigUpdate {
	fcu.mutation.SetOwnerID(id)
	return fcu
}

// SetOwner sets the "owner" edge to the User entity.
func (fcu *FeedConfigUpdate) SetOwner(u *User) *FeedConfigUpdate {
	return fcu.SetOwnerID(u.ID)
}

// SetFeedID sets the "feed" edge to the Feed entity by ID.
func (fcu *FeedConfigUpdate) SetFeedID(id model.InternalID) *FeedConfigUpdate {
	fcu.mutation.SetFeedID(id)
	return fcu
}

// SetNillableFeedID sets the "feed" edge to the Feed entity by ID if the given value is not nil.
func (fcu *FeedConfigUpdate) SetNillableFeedID(id *model.InternalID) *FeedConfigUpdate {
	if id != nil {
		fcu = fcu.SetFeedID(*id)
	}
	return fcu
}

// SetFeed sets the "feed" edge to the Feed entity.
func (fcu *FeedConfigUpdate) SetFeed(f *Feed) *FeedConfigUpdate {
	return fcu.SetFeedID(f.ID)
}

// AddNotifySourceIDs adds the "notify_source" edge to the NotifySource entity by IDs.
func (fcu *FeedConfigUpdate) AddNotifySourceIDs(ids ...model.InternalID) *FeedConfigUpdate {
	fcu.mutation.AddNotifySourceIDs(ids...)
	return fcu
}

// AddNotifySource adds the "notify_source" edges to the NotifySource entity.
func (fcu *FeedConfigUpdate) AddNotifySource(n ...*NotifySource) *FeedConfigUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return fcu.AddNotifySourceIDs(ids...)
}

// AddFeedActionSetIDs adds the "feed_action_set" edge to the FeedActionSet entity by IDs.
func (fcu *FeedConfigUpdate) AddFeedActionSetIDs(ids ...model.InternalID) *FeedConfigUpdate {
	fcu.mutation.AddFeedActionSetIDs(ids...)
	return fcu
}

// AddFeedActionSet adds the "feed_action_set" edges to the FeedActionSet entity.
func (fcu *FeedConfigUpdate) AddFeedActionSet(f ...*FeedActionSet) *FeedConfigUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fcu.AddFeedActionSetIDs(ids...)
}

// AddFeedConfigActionIDs adds the "feed_config_action" edge to the FeedConfigAction entity by IDs.
func (fcu *FeedConfigUpdate) AddFeedConfigActionIDs(ids ...int) *FeedConfigUpdate {
	fcu.mutation.AddFeedConfigActionIDs(ids...)
	return fcu
}

// AddFeedConfigAction adds the "feed_config_action" edges to the FeedConfigAction entity.
func (fcu *FeedConfigUpdate) AddFeedConfigAction(f ...*FeedConfigAction) *FeedConfigUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fcu.AddFeedConfigActionIDs(ids...)
}

// Mutation returns the FeedConfigMutation object of the builder.
func (fcu *FeedConfigUpdate) Mutation() *FeedConfigMutation {
	return fcu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (fcu *FeedConfigUpdate) ClearOwner() *FeedConfigUpdate {
	fcu.mutation.ClearOwner()
	return fcu
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (fcu *FeedConfigUpdate) ClearFeed() *FeedConfigUpdate {
	fcu.mutation.ClearFeed()
	return fcu
}

// ClearNotifySource clears all "notify_source" edges to the NotifySource entity.
func (fcu *FeedConfigUpdate) ClearNotifySource() *FeedConfigUpdate {
	fcu.mutation.ClearNotifySource()
	return fcu
}

// RemoveNotifySourceIDs removes the "notify_source" edge to NotifySource entities by IDs.
func (fcu *FeedConfigUpdate) RemoveNotifySourceIDs(ids ...model.InternalID) *FeedConfigUpdate {
	fcu.mutation.RemoveNotifySourceIDs(ids...)
	return fcu
}

// RemoveNotifySource removes "notify_source" edges to NotifySource entities.
func (fcu *FeedConfigUpdate) RemoveNotifySource(n ...*NotifySource) *FeedConfigUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return fcu.RemoveNotifySourceIDs(ids...)
}

// ClearFeedActionSet clears all "feed_action_set" edges to the FeedActionSet entity.
func (fcu *FeedConfigUpdate) ClearFeedActionSet() *FeedConfigUpdate {
	fcu.mutation.ClearFeedActionSet()
	return fcu
}

// RemoveFeedActionSetIDs removes the "feed_action_set" edge to FeedActionSet entities by IDs.
func (fcu *FeedConfigUpdate) RemoveFeedActionSetIDs(ids ...model.InternalID) *FeedConfigUpdate {
	fcu.mutation.RemoveFeedActionSetIDs(ids...)
	return fcu
}

// RemoveFeedActionSet removes "feed_action_set" edges to FeedActionSet entities.
func (fcu *FeedConfigUpdate) RemoveFeedActionSet(f ...*FeedActionSet) *FeedConfigUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fcu.RemoveFeedActionSetIDs(ids...)
}

// ClearFeedConfigAction clears all "feed_config_action" edges to the FeedConfigAction entity.
func (fcu *FeedConfigUpdate) ClearFeedConfigAction() *FeedConfigUpdate {
	fcu.mutation.ClearFeedConfigAction()
	return fcu
}

// RemoveFeedConfigActionIDs removes the "feed_config_action" edge to FeedConfigAction entities by IDs.
func (fcu *FeedConfigUpdate) RemoveFeedConfigActionIDs(ids ...int) *FeedConfigUpdate {
	fcu.mutation.RemoveFeedConfigActionIDs(ids...)
	return fcu
}

// RemoveFeedConfigAction removes "feed_config_action" edges to FeedConfigAction entities.
func (fcu *FeedConfigUpdate) RemoveFeedConfigAction(f ...*FeedConfigAction) *FeedConfigUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fcu.RemoveFeedConfigActionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fcu *FeedConfigUpdate) Save(ctx context.Context) (int, error) {
	fcu.defaults()
	return withHooks(ctx, fcu.sqlSave, fcu.mutation, fcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fcu *FeedConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := fcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fcu *FeedConfigUpdate) Exec(ctx context.Context) error {
	_, err := fcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcu *FeedConfigUpdate) ExecX(ctx context.Context) {
	if err := fcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcu *FeedConfigUpdate) defaults() {
	if _, ok := fcu.mutation.UpdatedAt(); !ok {
		v := feedconfig.UpdateDefaultUpdatedAt()
		fcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcu *FeedConfigUpdate) check() error {
	if v, ok := fcu.mutation.Status(); ok {
		if err := feedconfig.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FeedConfig.status": %w`, err)}
		}
	}
	if v, ok := fcu.mutation.LatestPullStatus(); ok {
		if err := feedconfig.LatestPullStatusValidator(v); err != nil {
			return &ValidationError{Name: "latest_pull_status", err: fmt.Errorf(`ent: validator failed for field "FeedConfig.latest_pull_status": %w`, err)}
		}
	}
	if fcu.mutation.OwnerCleared() && len(fcu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeedConfig.owner"`)
	}
	return nil
}

func (fcu *FeedConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedconfig.Table, feedconfig.Columns, sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64))
	if ps := fcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcu.mutation.Name(); ok {
		_spec.SetField(feedconfig.FieldName, field.TypeString, value)
	}
	if value, ok := fcu.mutation.Description(); ok {
		_spec.SetField(feedconfig.FieldDescription, field.TypeString, value)
	}
	if value, ok := fcu.mutation.Source(); ok {
		_spec.SetField(feedconfig.FieldSource, field.TypeJSON, value)
	}
	if value, ok := fcu.mutation.Status(); ok {
		_spec.SetField(feedconfig.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := fcu.mutation.Category(); ok {
		_spec.SetField(feedconfig.FieldCategory, field.TypeString, value)
	}
	if value, ok := fcu.mutation.PullInterval(); ok {
		_spec.SetField(feedconfig.FieldPullInterval, field.TypeInt64, value)
	}
	if value, ok := fcu.mutation.AddedPullInterval(); ok {
		_spec.AddField(feedconfig.FieldPullInterval, field.TypeInt64, value)
	}
	if value, ok := fcu.mutation.HideItems(); ok {
		_spec.SetField(feedconfig.FieldHideItems, field.TypeBool, value)
	}
	if value, ok := fcu.mutation.LatestPullAt(); ok {
		_spec.SetField(feedconfig.FieldLatestPullAt, field.TypeTime, value)
	}
	if value, ok := fcu.mutation.LatestPullStatus(); ok {
		_spec.SetField(feedconfig.FieldLatestPullStatus, field.TypeEnum, value)
	}
	if value, ok := fcu.mutation.LatestPullMessage(); ok {
		_spec.SetField(feedconfig.FieldLatestPullMessage, field.TypeString, value)
	}
	if value, ok := fcu.mutation.NextPullBeginAt(); ok {
		_spec.SetField(feedconfig.FieldNextPullBeginAt, field.TypeTime, value)
	}
	if value, ok := fcu.mutation.UpdatedAt(); ok {
		_spec.SetField(feedconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fcu.mutation.CreatedAt(); ok {
		_spec.SetField(feedconfig.FieldCreatedAt, field.TypeTime, value)
	}
	if fcu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feedconfig.OwnerTable,
			Columns: []string{feedconfig.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feedconfig.OwnerTable,
			Columns: []string{feedconfig.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcu.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   feedconfig.FeedTable,
			Columns: []string{feedconfig.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcu.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   feedconfig.FeedTable,
			Columns: []string{feedconfig.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcu.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedconfig.NotifySourceTable,
			Columns: []string{feedconfig.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcu.mutation.RemovedNotifySourceIDs(); len(nodes) > 0 && !fcu.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedconfig.NotifySourceTable,
			Columns: []string{feedconfig.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcu.mutation.NotifySourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedconfig.NotifySourceTable,
			Columns: []string{feedconfig.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcu.mutation.FeedActionSetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feedconfig.FeedActionSetTable,
			Columns: feedconfig.FeedActionSetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		createE := &FeedConfigActionCreate{config: fcu.config, mutation: newFeedConfigActionMutation(fcu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcu.mutation.RemovedFeedActionSetIDs(); len(nodes) > 0 && !fcu.mutation.FeedActionSetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feedconfig.FeedActionSetTable,
			Columns: feedconfig.FeedActionSetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FeedConfigActionCreate{config: fcu.config, mutation: newFeedConfigActionMutation(fcu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcu.mutation.FeedActionSetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feedconfig.FeedActionSetTable,
			Columns: feedconfig.FeedActionSetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FeedConfigActionCreate{config: fcu.config, mutation: newFeedConfigActionMutation(fcu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcu.mutation.FeedConfigActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feedconfig.FeedConfigActionTable,
			Columns: []string{feedconfig.FeedConfigActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfigaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcu.mutation.RemovedFeedConfigActionIDs(); len(nodes) > 0 && !fcu.mutation.FeedConfigActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feedconfig.FeedConfigActionTable,
			Columns: []string{feedconfig.FeedConfigActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfigaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcu.mutation.FeedConfigActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feedconfig.FeedConfigActionTable,
			Columns: []string{feedconfig.FeedConfigActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfigaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fcu.mutation.done = true
	return n, nil
}

// FeedConfigUpdateOne is the builder for updating a single FeedConfig entity.
type FeedConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedConfigMutation
}

// SetUserFeedConfig sets the "user_feed_config" field.
func (fcuo *FeedConfigUpdateOne) SetUserFeedConfig(mi model.InternalID) *FeedConfigUpdateOne {
	fcuo.mutation.SetUserFeedConfig(mi)
	return fcuo
}

// SetNillableUserFeedConfig sets the "user_feed_config" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableUserFeedConfig(mi *model.InternalID) *FeedConfigUpdateOne {
	if mi != nil {
		fcuo.SetUserFeedConfig(*mi)
	}
	return fcuo
}

// SetName sets the "name" field.
func (fcuo *FeedConfigUpdateOne) SetName(s string) *FeedConfigUpdateOne {
	fcuo.mutation.SetName(s)
	return fcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableName(s *string) *FeedConfigUpdateOne {
	if s != nil {
		fcuo.SetName(*s)
	}
	return fcuo
}

// SetDescription sets the "description" field.
func (fcuo *FeedConfigUpdateOne) SetDescription(s string) *FeedConfigUpdateOne {
	fcuo.mutation.SetDescription(s)
	return fcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableDescription(s *string) *FeedConfigUpdateOne {
	if s != nil {
		fcuo.SetDescription(*s)
	}
	return fcuo
}

// SetSource sets the "source" field.
func (fcuo *FeedConfigUpdateOne) SetSource(mr *modelsupervisor.FeatureRequest) *FeedConfigUpdateOne {
	fcuo.mutation.SetSource(mr)
	return fcuo
}

// SetStatus sets the "status" field.
func (fcuo *FeedConfigUpdateOne) SetStatus(f feedconfig.Status) *FeedConfigUpdateOne {
	fcuo.mutation.SetStatus(f)
	return fcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableStatus(f *feedconfig.Status) *FeedConfigUpdateOne {
	if f != nil {
		fcuo.SetStatus(*f)
	}
	return fcuo
}

// SetCategory sets the "category" field.
func (fcuo *FeedConfigUpdateOne) SetCategory(s string) *FeedConfigUpdateOne {
	fcuo.mutation.SetCategory(s)
	return fcuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableCategory(s *string) *FeedConfigUpdateOne {
	if s != nil {
		fcuo.SetCategory(*s)
	}
	return fcuo
}

// SetPullInterval sets the "pull_interval" field.
func (fcuo *FeedConfigUpdateOne) SetPullInterval(t time.Duration) *FeedConfigUpdateOne {
	fcuo.mutation.ResetPullInterval()
	fcuo.mutation.SetPullInterval(t)
	return fcuo
}

// SetNillablePullInterval sets the "pull_interval" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillablePullInterval(t *time.Duration) *FeedConfigUpdateOne {
	if t != nil {
		fcuo.SetPullInterval(*t)
	}
	return fcuo
}

// AddPullInterval adds t to the "pull_interval" field.
func (fcuo *FeedConfigUpdateOne) AddPullInterval(t time.Duration) *FeedConfigUpdateOne {
	fcuo.mutation.AddPullInterval(t)
	return fcuo
}

// SetHideItems sets the "hide_items" field.
func (fcuo *FeedConfigUpdateOne) SetHideItems(b bool) *FeedConfigUpdateOne {
	fcuo.mutation.SetHideItems(b)
	return fcuo
}

// SetNillableHideItems sets the "hide_items" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableHideItems(b *bool) *FeedConfigUpdateOne {
	if b != nil {
		fcuo.SetHideItems(*b)
	}
	return fcuo
}

// SetLatestPullAt sets the "latest_pull_at" field.
func (fcuo *FeedConfigUpdateOne) SetLatestPullAt(t time.Time) *FeedConfigUpdateOne {
	fcuo.mutation.SetLatestPullAt(t)
	return fcuo
}

// SetNillableLatestPullAt sets the "latest_pull_at" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableLatestPullAt(t *time.Time) *FeedConfigUpdateOne {
	if t != nil {
		fcuo.SetLatestPullAt(*t)
	}
	return fcuo
}

// SetLatestPullStatus sets the "latest_pull_status" field.
func (fcuo *FeedConfigUpdateOne) SetLatestPullStatus(fps feedconfig.LatestPullStatus) *FeedConfigUpdateOne {
	fcuo.mutation.SetLatestPullStatus(fps)
	return fcuo
}

// SetNillableLatestPullStatus sets the "latest_pull_status" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableLatestPullStatus(fps *feedconfig.LatestPullStatus) *FeedConfigUpdateOne {
	if fps != nil {
		fcuo.SetLatestPullStatus(*fps)
	}
	return fcuo
}

// SetLatestPullMessage sets the "latest_pull_message" field.
func (fcuo *FeedConfigUpdateOne) SetLatestPullMessage(s string) *FeedConfigUpdateOne {
	fcuo.mutation.SetLatestPullMessage(s)
	return fcuo
}

// SetNillableLatestPullMessage sets the "latest_pull_message" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableLatestPullMessage(s *string) *FeedConfigUpdateOne {
	if s != nil {
		fcuo.SetLatestPullMessage(*s)
	}
	return fcuo
}

// SetNextPullBeginAt sets the "next_pull_begin_at" field.
func (fcuo *FeedConfigUpdateOne) SetNextPullBeginAt(t time.Time) *FeedConfigUpdateOne {
	fcuo.mutation.SetNextPullBeginAt(t)
	return fcuo
}

// SetNillableNextPullBeginAt sets the "next_pull_begin_at" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableNextPullBeginAt(t *time.Time) *FeedConfigUpdateOne {
	if t != nil {
		fcuo.SetNextPullBeginAt(*t)
	}
	return fcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fcuo *FeedConfigUpdateOne) SetUpdatedAt(t time.Time) *FeedConfigUpdateOne {
	fcuo.mutation.SetUpdatedAt(t)
	return fcuo
}

// SetCreatedAt sets the "created_at" field.
func (fcuo *FeedConfigUpdateOne) SetCreatedAt(t time.Time) *FeedConfigUpdateOne {
	fcuo.mutation.SetCreatedAt(t)
	return fcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableCreatedAt(t *time.Time) *FeedConfigUpdateOne {
	if t != nil {
		fcuo.SetCreatedAt(*t)
	}
	return fcuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (fcuo *FeedConfigUpdateOne) SetOwnerID(id model.InternalID) *FeedConfigUpdateOne {
	fcuo.mutation.SetOwnerID(id)
	return fcuo
}

// SetOwner sets the "owner" edge to the User entity.
func (fcuo *FeedConfigUpdateOne) SetOwner(u *User) *FeedConfigUpdateOne {
	return fcuo.SetOwnerID(u.ID)
}

// SetFeedID sets the "feed" edge to the Feed entity by ID.
func (fcuo *FeedConfigUpdateOne) SetFeedID(id model.InternalID) *FeedConfigUpdateOne {
	fcuo.mutation.SetFeedID(id)
	return fcuo
}

// SetNillableFeedID sets the "feed" edge to the Feed entity by ID if the given value is not nil.
func (fcuo *FeedConfigUpdateOne) SetNillableFeedID(id *model.InternalID) *FeedConfigUpdateOne {
	if id != nil {
		fcuo = fcuo.SetFeedID(*id)
	}
	return fcuo
}

// SetFeed sets the "feed" edge to the Feed entity.
func (fcuo *FeedConfigUpdateOne) SetFeed(f *Feed) *FeedConfigUpdateOne {
	return fcuo.SetFeedID(f.ID)
}

// AddNotifySourceIDs adds the "notify_source" edge to the NotifySource entity by IDs.
func (fcuo *FeedConfigUpdateOne) AddNotifySourceIDs(ids ...model.InternalID) *FeedConfigUpdateOne {
	fcuo.mutation.AddNotifySourceIDs(ids...)
	return fcuo
}

// AddNotifySource adds the "notify_source" edges to the NotifySource entity.
func (fcuo *FeedConfigUpdateOne) AddNotifySource(n ...*NotifySource) *FeedConfigUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return fcuo.AddNotifySourceIDs(ids...)
}

// AddFeedActionSetIDs adds the "feed_action_set" edge to the FeedActionSet entity by IDs.
func (fcuo *FeedConfigUpdateOne) AddFeedActionSetIDs(ids ...model.InternalID) *FeedConfigUpdateOne {
	fcuo.mutation.AddFeedActionSetIDs(ids...)
	return fcuo
}

// AddFeedActionSet adds the "feed_action_set" edges to the FeedActionSet entity.
func (fcuo *FeedConfigUpdateOne) AddFeedActionSet(f ...*FeedActionSet) *FeedConfigUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fcuo.AddFeedActionSetIDs(ids...)
}

// AddFeedConfigActionIDs adds the "feed_config_action" edge to the FeedConfigAction entity by IDs.
func (fcuo *FeedConfigUpdateOne) AddFeedConfigActionIDs(ids ...int) *FeedConfigUpdateOne {
	fcuo.mutation.AddFeedConfigActionIDs(ids...)
	return fcuo
}

// AddFeedConfigAction adds the "feed_config_action" edges to the FeedConfigAction entity.
func (fcuo *FeedConfigUpdateOne) AddFeedConfigAction(f ...*FeedConfigAction) *FeedConfigUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fcuo.AddFeedConfigActionIDs(ids...)
}

// Mutation returns the FeedConfigMutation object of the builder.
func (fcuo *FeedConfigUpdateOne) Mutation() *FeedConfigMutation {
	return fcuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (fcuo *FeedConfigUpdateOne) ClearOwner() *FeedConfigUpdateOne {
	fcuo.mutation.ClearOwner()
	return fcuo
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (fcuo *FeedConfigUpdateOne) ClearFeed() *FeedConfigUpdateOne {
	fcuo.mutation.ClearFeed()
	return fcuo
}

// ClearNotifySource clears all "notify_source" edges to the NotifySource entity.
func (fcuo *FeedConfigUpdateOne) ClearNotifySource() *FeedConfigUpdateOne {
	fcuo.mutation.ClearNotifySource()
	return fcuo
}

// RemoveNotifySourceIDs removes the "notify_source" edge to NotifySource entities by IDs.
func (fcuo *FeedConfigUpdateOne) RemoveNotifySourceIDs(ids ...model.InternalID) *FeedConfigUpdateOne {
	fcuo.mutation.RemoveNotifySourceIDs(ids...)
	return fcuo
}

// RemoveNotifySource removes "notify_source" edges to NotifySource entities.
func (fcuo *FeedConfigUpdateOne) RemoveNotifySource(n ...*NotifySource) *FeedConfigUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return fcuo.RemoveNotifySourceIDs(ids...)
}

// ClearFeedActionSet clears all "feed_action_set" edges to the FeedActionSet entity.
func (fcuo *FeedConfigUpdateOne) ClearFeedActionSet() *FeedConfigUpdateOne {
	fcuo.mutation.ClearFeedActionSet()
	return fcuo
}

// RemoveFeedActionSetIDs removes the "feed_action_set" edge to FeedActionSet entities by IDs.
func (fcuo *FeedConfigUpdateOne) RemoveFeedActionSetIDs(ids ...model.InternalID) *FeedConfigUpdateOne {
	fcuo.mutation.RemoveFeedActionSetIDs(ids...)
	return fcuo
}

// RemoveFeedActionSet removes "feed_action_set" edges to FeedActionSet entities.
func (fcuo *FeedConfigUpdateOne) RemoveFeedActionSet(f ...*FeedActionSet) *FeedConfigUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fcuo.RemoveFeedActionSetIDs(ids...)
}

// ClearFeedConfigAction clears all "feed_config_action" edges to the FeedConfigAction entity.
func (fcuo *FeedConfigUpdateOne) ClearFeedConfigAction() *FeedConfigUpdateOne {
	fcuo.mutation.ClearFeedConfigAction()
	return fcuo
}

// RemoveFeedConfigActionIDs removes the "feed_config_action" edge to FeedConfigAction entities by IDs.
func (fcuo *FeedConfigUpdateOne) RemoveFeedConfigActionIDs(ids ...int) *FeedConfigUpdateOne {
	fcuo.mutation.RemoveFeedConfigActionIDs(ids...)
	return fcuo
}

// RemoveFeedConfigAction removes "feed_config_action" edges to FeedConfigAction entities.
func (fcuo *FeedConfigUpdateOne) RemoveFeedConfigAction(f ...*FeedConfigAction) *FeedConfigUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fcuo.RemoveFeedConfigActionIDs(ids...)
}

// Where appends a list predicates to the FeedConfigUpdate builder.
func (fcuo *FeedConfigUpdateOne) Where(ps ...predicate.FeedConfig) *FeedConfigUpdateOne {
	fcuo.mutation.Where(ps...)
	return fcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fcuo *FeedConfigUpdateOne) Select(field string, fields ...string) *FeedConfigUpdateOne {
	fcuo.fields = append([]string{field}, fields...)
	return fcuo
}

// Save executes the query and returns the updated FeedConfig entity.
func (fcuo *FeedConfigUpdateOne) Save(ctx context.Context) (*FeedConfig, error) {
	fcuo.defaults()
	return withHooks(ctx, fcuo.sqlSave, fcuo.mutation, fcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fcuo *FeedConfigUpdateOne) SaveX(ctx context.Context) *FeedConfig {
	node, err := fcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fcuo *FeedConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := fcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcuo *FeedConfigUpdateOne) ExecX(ctx context.Context) {
	if err := fcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcuo *FeedConfigUpdateOne) defaults() {
	if _, ok := fcuo.mutation.UpdatedAt(); !ok {
		v := feedconfig.UpdateDefaultUpdatedAt()
		fcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcuo *FeedConfigUpdateOne) check() error {
	if v, ok := fcuo.mutation.Status(); ok {
		if err := feedconfig.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FeedConfig.status": %w`, err)}
		}
	}
	if v, ok := fcuo.mutation.LatestPullStatus(); ok {
		if err := feedconfig.LatestPullStatusValidator(v); err != nil {
			return &ValidationError{Name: "latest_pull_status", err: fmt.Errorf(`ent: validator failed for field "FeedConfig.latest_pull_status": %w`, err)}
		}
	}
	if fcuo.mutation.OwnerCleared() && len(fcuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeedConfig.owner"`)
	}
	return nil
}

func (fcuo *FeedConfigUpdateOne) sqlSave(ctx context.Context) (_node *FeedConfig, err error) {
	if err := fcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedconfig.Table, feedconfig.Columns, sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64))
	id, ok := fcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeedConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedconfig.FieldID)
		for _, f := range fields {
			if !feedconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feedconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcuo.mutation.Name(); ok {
		_spec.SetField(feedconfig.FieldName, field.TypeString, value)
	}
	if value, ok := fcuo.mutation.Description(); ok {
		_spec.SetField(feedconfig.FieldDescription, field.TypeString, value)
	}
	if value, ok := fcuo.mutation.Source(); ok {
		_spec.SetField(feedconfig.FieldSource, field.TypeJSON, value)
	}
	if value, ok := fcuo.mutation.Status(); ok {
		_spec.SetField(feedconfig.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := fcuo.mutation.Category(); ok {
		_spec.SetField(feedconfig.FieldCategory, field.TypeString, value)
	}
	if value, ok := fcuo.mutation.PullInterval(); ok {
		_spec.SetField(feedconfig.FieldPullInterval, field.TypeInt64, value)
	}
	if value, ok := fcuo.mutation.AddedPullInterval(); ok {
		_spec.AddField(feedconfig.FieldPullInterval, field.TypeInt64, value)
	}
	if value, ok := fcuo.mutation.HideItems(); ok {
		_spec.SetField(feedconfig.FieldHideItems, field.TypeBool, value)
	}
	if value, ok := fcuo.mutation.LatestPullAt(); ok {
		_spec.SetField(feedconfig.FieldLatestPullAt, field.TypeTime, value)
	}
	if value, ok := fcuo.mutation.LatestPullStatus(); ok {
		_spec.SetField(feedconfig.FieldLatestPullStatus, field.TypeEnum, value)
	}
	if value, ok := fcuo.mutation.LatestPullMessage(); ok {
		_spec.SetField(feedconfig.FieldLatestPullMessage, field.TypeString, value)
	}
	if value, ok := fcuo.mutation.NextPullBeginAt(); ok {
		_spec.SetField(feedconfig.FieldNextPullBeginAt, field.TypeTime, value)
	}
	if value, ok := fcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(feedconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fcuo.mutation.CreatedAt(); ok {
		_spec.SetField(feedconfig.FieldCreatedAt, field.TypeTime, value)
	}
	if fcuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feedconfig.OwnerTable,
			Columns: []string{feedconfig.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feedconfig.OwnerTable,
			Columns: []string{feedconfig.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcuo.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   feedconfig.FeedTable,
			Columns: []string{feedconfig.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcuo.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   feedconfig.FeedTable,
			Columns: []string{feedconfig.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcuo.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedconfig.NotifySourceTable,
			Columns: []string{feedconfig.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcuo.mutation.RemovedNotifySourceIDs(); len(nodes) > 0 && !fcuo.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedconfig.NotifySourceTable,
			Columns: []string{feedconfig.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcuo.mutation.NotifySourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feedconfig.NotifySourceTable,
			Columns: []string{feedconfig.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcuo.mutation.FeedActionSetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feedconfig.FeedActionSetTable,
			Columns: feedconfig.FeedActionSetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		createE := &FeedConfigActionCreate{config: fcuo.config, mutation: newFeedConfigActionMutation(fcuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcuo.mutation.RemovedFeedActionSetIDs(); len(nodes) > 0 && !fcuo.mutation.FeedActionSetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feedconfig.FeedActionSetTable,
			Columns: feedconfig.FeedActionSetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FeedConfigActionCreate{config: fcuo.config, mutation: newFeedConfigActionMutation(fcuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcuo.mutation.FeedActionSetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   feedconfig.FeedActionSetTable,
			Columns: feedconfig.FeedActionSetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FeedConfigActionCreate{config: fcuo.config, mutation: newFeedConfigActionMutation(fcuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcuo.mutation.FeedConfigActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feedconfig.FeedConfigActionTable,
			Columns: []string{feedconfig.FeedConfigActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfigaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcuo.mutation.RemovedFeedConfigActionIDs(); len(nodes) > 0 && !fcuo.mutation.FeedConfigActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feedconfig.FeedConfigActionTable,
			Columns: []string{feedconfig.FeedConfigActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfigaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcuo.mutation.FeedConfigActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feedconfig.FeedConfigActionTable,
			Columns: []string{feedconfig.FeedConfigActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfigaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FeedConfig{config: fcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fcuo.mutation.done = true
	return _node, nil
}
