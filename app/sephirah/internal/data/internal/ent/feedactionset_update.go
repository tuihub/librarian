// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/tuihub/librarian/internal/model/modelsupervisor"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/feedactionset"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// FeedActionSetUpdate is the builder for updating FeedActionSet entities.
type FeedActionSetUpdate struct {
	config
	hooks    []Hook
	mutation *FeedActionSetMutation
}

// Where appends a list predicates to the FeedActionSetUpdate builder.
func (fasu *FeedActionSetUpdate) Where(ps ...predicate.FeedActionSet) *FeedActionSetUpdate {
	fasu.mutation.Where(ps...)
	return fasu
}

// SetName sets the "name" field.
func (fasu *FeedActionSetUpdate) SetName(s string) *FeedActionSetUpdate {
	fasu.mutation.SetName(s)
	return fasu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fasu *FeedActionSetUpdate) SetNillableName(s *string) *FeedActionSetUpdate {
	if s != nil {
		fasu.SetName(*s)
	}
	return fasu
}

// SetDescription sets the "description" field.
func (fasu *FeedActionSetUpdate) SetDescription(s string) *FeedActionSetUpdate {
	fasu.mutation.SetDescription(s)
	return fasu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fasu *FeedActionSetUpdate) SetNillableDescription(s *string) *FeedActionSetUpdate {
	if s != nil {
		fasu.SetDescription(*s)
	}
	return fasu
}

// SetActions sets the "actions" field.
func (fasu *FeedActionSetUpdate) SetActions(mr []*modelsupervisor.FeatureRequest) *FeedActionSetUpdate {
	fasu.mutation.SetActions(mr)
	return fasu
}

// AppendActions appends mr to the "actions" field.
func (fasu *FeedActionSetUpdate) AppendActions(mr []*modelsupervisor.FeatureRequest) *FeedActionSetUpdate {
	fasu.mutation.AppendActions(mr)
	return fasu
}

// SetUpdatedAt sets the "updated_at" field.
func (fasu *FeedActionSetUpdate) SetUpdatedAt(t time.Time) *FeedActionSetUpdate {
	fasu.mutation.SetUpdatedAt(t)
	return fasu
}

// SetCreatedAt sets the "created_at" field.
func (fasu *FeedActionSetUpdate) SetCreatedAt(t time.Time) *FeedActionSetUpdate {
	fasu.mutation.SetCreatedAt(t)
	return fasu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fasu *FeedActionSetUpdate) SetNillableCreatedAt(t *time.Time) *FeedActionSetUpdate {
	if t != nil {
		fasu.SetCreatedAt(*t)
	}
	return fasu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (fasu *FeedActionSetUpdate) SetOwnerID(id model.InternalID) *FeedActionSetUpdate {
	fasu.mutation.SetOwnerID(id)
	return fasu
}

// SetOwner sets the "owner" edge to the User entity.
func (fasu *FeedActionSetUpdate) SetOwner(u *User) *FeedActionSetUpdate {
	return fasu.SetOwnerID(u.ID)
}

// AddFeedConfigIDs adds the "feed_config" edge to the FeedConfig entity by IDs.
func (fasu *FeedActionSetUpdate) AddFeedConfigIDs(ids ...model.InternalID) *FeedActionSetUpdate {
	fasu.mutation.AddFeedConfigIDs(ids...)
	return fasu
}

// AddFeedConfig adds the "feed_config" edges to the FeedConfig entity.
func (fasu *FeedActionSetUpdate) AddFeedConfig(f ...*FeedConfig) *FeedActionSetUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fasu.AddFeedConfigIDs(ids...)
}

// Mutation returns the FeedActionSetMutation object of the builder.
func (fasu *FeedActionSetUpdate) Mutation() *FeedActionSetMutation {
	return fasu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (fasu *FeedActionSetUpdate) ClearOwner() *FeedActionSetUpdate {
	fasu.mutation.ClearOwner()
	return fasu
}

// ClearFeedConfig clears all "feed_config" edges to the FeedConfig entity.
func (fasu *FeedActionSetUpdate) ClearFeedConfig() *FeedActionSetUpdate {
	fasu.mutation.ClearFeedConfig()
	return fasu
}

// RemoveFeedConfigIDs removes the "feed_config" edge to FeedConfig entities by IDs.
func (fasu *FeedActionSetUpdate) RemoveFeedConfigIDs(ids ...model.InternalID) *FeedActionSetUpdate {
	fasu.mutation.RemoveFeedConfigIDs(ids...)
	return fasu
}

// RemoveFeedConfig removes "feed_config" edges to FeedConfig entities.
func (fasu *FeedActionSetUpdate) RemoveFeedConfig(f ...*FeedConfig) *FeedActionSetUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fasu.RemoveFeedConfigIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fasu *FeedActionSetUpdate) Save(ctx context.Context) (int, error) {
	fasu.defaults()
	return withHooks(ctx, fasu.sqlSave, fasu.mutation, fasu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fasu *FeedActionSetUpdate) SaveX(ctx context.Context) int {
	affected, err := fasu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fasu *FeedActionSetUpdate) Exec(ctx context.Context) error {
	_, err := fasu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fasu *FeedActionSetUpdate) ExecX(ctx context.Context) {
	if err := fasu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fasu *FeedActionSetUpdate) defaults() {
	if _, ok := fasu.mutation.UpdatedAt(); !ok {
		v := feedactionset.UpdateDefaultUpdatedAt()
		fasu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fasu *FeedActionSetUpdate) check() error {
	if fasu.mutation.OwnerCleared() && len(fasu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeedActionSet.owner"`)
	}
	return nil
}

func (fasu *FeedActionSetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fasu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedactionset.Table, feedactionset.Columns, sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64))
	if ps := fasu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fasu.mutation.Name(); ok {
		_spec.SetField(feedactionset.FieldName, field.TypeString, value)
	}
	if value, ok := fasu.mutation.Description(); ok {
		_spec.SetField(feedactionset.FieldDescription, field.TypeString, value)
	}
	if value, ok := fasu.mutation.Actions(); ok {
		_spec.SetField(feedactionset.FieldActions, field.TypeJSON, value)
	}
	if value, ok := fasu.mutation.AppendedActions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feedactionset.FieldActions, value)
		})
	}
	if value, ok := fasu.mutation.UpdatedAt(); ok {
		_spec.SetField(feedactionset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fasu.mutation.CreatedAt(); ok {
		_spec.SetField(feedactionset.FieldCreatedAt, field.TypeTime, value)
	}
	if fasu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feedactionset.OwnerTable,
			Columns: []string{feedactionset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fasu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feedactionset.OwnerTable,
			Columns: []string{feedactionset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fasu.mutation.FeedConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feedactionset.FeedConfigTable,
			Columns: feedactionset.FeedConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fasu.mutation.RemovedFeedConfigIDs(); len(nodes) > 0 && !fasu.mutation.FeedConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feedactionset.FeedConfigTable,
			Columns: feedactionset.FeedConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fasu.mutation.FeedConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feedactionset.FeedConfigTable,
			Columns: feedactionset.FeedConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fasu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedactionset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fasu.mutation.done = true
	return n, nil
}

// FeedActionSetUpdateOne is the builder for updating a single FeedActionSet entity.
type FeedActionSetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedActionSetMutation
}

// SetName sets the "name" field.
func (fasuo *FeedActionSetUpdateOne) SetName(s string) *FeedActionSetUpdateOne {
	fasuo.mutation.SetName(s)
	return fasuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fasuo *FeedActionSetUpdateOne) SetNillableName(s *string) *FeedActionSetUpdateOne {
	if s != nil {
		fasuo.SetName(*s)
	}
	return fasuo
}

// SetDescription sets the "description" field.
func (fasuo *FeedActionSetUpdateOne) SetDescription(s string) *FeedActionSetUpdateOne {
	fasuo.mutation.SetDescription(s)
	return fasuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fasuo *FeedActionSetUpdateOne) SetNillableDescription(s *string) *FeedActionSetUpdateOne {
	if s != nil {
		fasuo.SetDescription(*s)
	}
	return fasuo
}

// SetActions sets the "actions" field.
func (fasuo *FeedActionSetUpdateOne) SetActions(mr []*modelsupervisor.FeatureRequest) *FeedActionSetUpdateOne {
	fasuo.mutation.SetActions(mr)
	return fasuo
}

// AppendActions appends mr to the "actions" field.
func (fasuo *FeedActionSetUpdateOne) AppendActions(mr []*modelsupervisor.FeatureRequest) *FeedActionSetUpdateOne {
	fasuo.mutation.AppendActions(mr)
	return fasuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fasuo *FeedActionSetUpdateOne) SetUpdatedAt(t time.Time) *FeedActionSetUpdateOne {
	fasuo.mutation.SetUpdatedAt(t)
	return fasuo
}

// SetCreatedAt sets the "created_at" field.
func (fasuo *FeedActionSetUpdateOne) SetCreatedAt(t time.Time) *FeedActionSetUpdateOne {
	fasuo.mutation.SetCreatedAt(t)
	return fasuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fasuo *FeedActionSetUpdateOne) SetNillableCreatedAt(t *time.Time) *FeedActionSetUpdateOne {
	if t != nil {
		fasuo.SetCreatedAt(*t)
	}
	return fasuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (fasuo *FeedActionSetUpdateOne) SetOwnerID(id model.InternalID) *FeedActionSetUpdateOne {
	fasuo.mutation.SetOwnerID(id)
	return fasuo
}

// SetOwner sets the "owner" edge to the User entity.
func (fasuo *FeedActionSetUpdateOne) SetOwner(u *User) *FeedActionSetUpdateOne {
	return fasuo.SetOwnerID(u.ID)
}

// AddFeedConfigIDs adds the "feed_config" edge to the FeedConfig entity by IDs.
func (fasuo *FeedActionSetUpdateOne) AddFeedConfigIDs(ids ...model.InternalID) *FeedActionSetUpdateOne {
	fasuo.mutation.AddFeedConfigIDs(ids...)
	return fasuo
}

// AddFeedConfig adds the "feed_config" edges to the FeedConfig entity.
func (fasuo *FeedActionSetUpdateOne) AddFeedConfig(f ...*FeedConfig) *FeedActionSetUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fasuo.AddFeedConfigIDs(ids...)
}

// Mutation returns the FeedActionSetMutation object of the builder.
func (fasuo *FeedActionSetUpdateOne) Mutation() *FeedActionSetMutation {
	return fasuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (fasuo *FeedActionSetUpdateOne) ClearOwner() *FeedActionSetUpdateOne {
	fasuo.mutation.ClearOwner()
	return fasuo
}

// ClearFeedConfig clears all "feed_config" edges to the FeedConfig entity.
func (fasuo *FeedActionSetUpdateOne) ClearFeedConfig() *FeedActionSetUpdateOne {
	fasuo.mutation.ClearFeedConfig()
	return fasuo
}

// RemoveFeedConfigIDs removes the "feed_config" edge to FeedConfig entities by IDs.
func (fasuo *FeedActionSetUpdateOne) RemoveFeedConfigIDs(ids ...model.InternalID) *FeedActionSetUpdateOne {
	fasuo.mutation.RemoveFeedConfigIDs(ids...)
	return fasuo
}

// RemoveFeedConfig removes "feed_config" edges to FeedConfig entities.
func (fasuo *FeedActionSetUpdateOne) RemoveFeedConfig(f ...*FeedConfig) *FeedActionSetUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fasuo.RemoveFeedConfigIDs(ids...)
}

// Where appends a list predicates to the FeedActionSetUpdate builder.
func (fasuo *FeedActionSetUpdateOne) Where(ps ...predicate.FeedActionSet) *FeedActionSetUpdateOne {
	fasuo.mutation.Where(ps...)
	return fasuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fasuo *FeedActionSetUpdateOne) Select(field string, fields ...string) *FeedActionSetUpdateOne {
	fasuo.fields = append([]string{field}, fields...)
	return fasuo
}

// Save executes the query and returns the updated FeedActionSet entity.
func (fasuo *FeedActionSetUpdateOne) Save(ctx context.Context) (*FeedActionSet, error) {
	fasuo.defaults()
	return withHooks(ctx, fasuo.sqlSave, fasuo.mutation, fasuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fasuo *FeedActionSetUpdateOne) SaveX(ctx context.Context) *FeedActionSet {
	node, err := fasuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fasuo *FeedActionSetUpdateOne) Exec(ctx context.Context) error {
	_, err := fasuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fasuo *FeedActionSetUpdateOne) ExecX(ctx context.Context) {
	if err := fasuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fasuo *FeedActionSetUpdateOne) defaults() {
	if _, ok := fasuo.mutation.UpdatedAt(); !ok {
		v := feedactionset.UpdateDefaultUpdatedAt()
		fasuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fasuo *FeedActionSetUpdateOne) check() error {
	if fasuo.mutation.OwnerCleared() && len(fasuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeedActionSet.owner"`)
	}
	return nil
}

func (fasuo *FeedActionSetUpdateOne) sqlSave(ctx context.Context) (_node *FeedActionSet, err error) {
	if err := fasuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedactionset.Table, feedactionset.Columns, sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64))
	id, ok := fasuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeedActionSet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fasuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedactionset.FieldID)
		for _, f := range fields {
			if !feedactionset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feedactionset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fasuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fasuo.mutation.Name(); ok {
		_spec.SetField(feedactionset.FieldName, field.TypeString, value)
	}
	if value, ok := fasuo.mutation.Description(); ok {
		_spec.SetField(feedactionset.FieldDescription, field.TypeString, value)
	}
	if value, ok := fasuo.mutation.Actions(); ok {
		_spec.SetField(feedactionset.FieldActions, field.TypeJSON, value)
	}
	if value, ok := fasuo.mutation.AppendedActions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feedactionset.FieldActions, value)
		})
	}
	if value, ok := fasuo.mutation.UpdatedAt(); ok {
		_spec.SetField(feedactionset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fasuo.mutation.CreatedAt(); ok {
		_spec.SetField(feedactionset.FieldCreatedAt, field.TypeTime, value)
	}
	if fasuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feedactionset.OwnerTable,
			Columns: []string{feedactionset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fasuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feedactionset.OwnerTable,
			Columns: []string{feedactionset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fasuo.mutation.FeedConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feedactionset.FeedConfigTable,
			Columns: feedactionset.FeedConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fasuo.mutation.RemovedFeedConfigIDs(); len(nodes) > 0 && !fasuo.mutation.FeedConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feedactionset.FeedConfigTable,
			Columns: feedactionset.FeedConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fasuo.mutation.FeedConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feedactionset.FeedConfigTable,
			Columns: feedactionset.FeedConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FeedActionSet{config: fasuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fasuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedactionset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fasuo.mutation.done = true
	return _node, nil
}
