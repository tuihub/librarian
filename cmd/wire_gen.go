// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/tuihub/librarian/internal/biz/bizangela"
	"github.com/tuihub/librarian/internal/biz/bizbinah"
	"github.com/tuihub/librarian/internal/biz/bizchesed"
	"github.com/tuihub/librarian/internal/biz/bizgebura"
	"github.com/tuihub/librarian/internal/biz/bizkether"
	"github.com/tuihub/librarian/internal/biz/biznetzach"
	"github.com/tuihub/librarian/internal/biz/bizsupervisor"
	"github.com/tuihub/librarian/internal/biz/biztiphereth"
	"github.com/tuihub/librarian/internal/biz/bizyesod"
	"github.com/tuihub/librarian/internal/client"
	"github.com/tuihub/librarian/internal/conf"
	"github.com/tuihub/librarian/internal/data"
	"github.com/tuihub/librarian/internal/lib/libapp"
	"github.com/tuihub/librarian/internal/lib/libauth"
	"github.com/tuihub/librarian/internal/lib/libcache"
	"github.com/tuihub/librarian/internal/lib/libcron"
	"github.com/tuihub/librarian/internal/lib/libidgenerator"
	"github.com/tuihub/librarian/internal/lib/libmq"
	"github.com/tuihub/librarian/internal/lib/libobserve"
	"github.com/tuihub/librarian/internal/lib/libs3"
	"github.com/tuihub/librarian/internal/lib/libsearch"
	"github.com/tuihub/librarian/internal/server"
	"github.com/tuihub/librarian/internal/service/angelaweb"
	"github.com/tuihub/librarian/internal/service/porter"
	"github.com/tuihub/librarian/internal/service/sentinel"
	"github.com/tuihub/librarian/internal/service/sephirah"
	"github.com/tuihub/librarian/internal/service/supervisor"
)

// Injectors from admin_wire.go:

func wireAdmin(arg []*conf.ConfigDigest, config *conf.Config, settings *libapp.Settings) (*biztiphereth.Tiphereth, func(), error) {
	database := conf.GetDatabase(config)
	dataData, cleanup, err := data.NewData(database, settings)
	if err != nil {
		return nil, nil, err
	}
	tipherethRepo := data.NewTipherethRepo(dataData)
	auth := conf.GetAuth(config)
	libauthAuth, err := libauth.NewAuth(auth)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	supervisorRepo := data.NewSupervisorRepo(dataData)
	idGenerator, err := libidgenerator.NewIDGenerator()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	search := conf.GetSearch(config)
	libsearchSearch, err := libsearch.NewSearch(search, settings)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	ketherRepo := data.NewKetherRepo(dataData)
	geburaRepo := data.NewGeburaRepo(dataData)
	consul := conf.GetConsul(config)
	porter := conf.GetPorter(config)
	inprocPorter, err := client.NewInprocPorter()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	librarianPorterServiceClient, err := client.NewPorterClient(consul, porter, settings, inprocPorter)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	ketherBase, err := bizkether.NewKetherBase(ketherRepo, supervisorRepo, geburaRepo, librarianPorterServiceClient, libsearchSearch, idGenerator)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	cache := conf.GetCache(config)
	store, err := libcache.NewStore(cache)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	libcacheMap := bizkether.NewAppInfoCache(geburaRepo, store)
	topic := bizkether.NewUpdateAppInfoIndexTopic(ketherBase)
	libmqTopic := bizkether.NewPullAppInfoTopic(ketherBase, libcacheMap, topic)
	topic2 := bizkether.NewPullAccountAppInfoRelationTopic(ketherBase, libmqTopic)
	topic3 := bizkether.NewPullAccountTopic(ketherBase, topic2)
	key := biztiphereth.NewUserCountCache(tipherethRepo, store)
	tiphereth, err := biztiphereth.NewTiphereth(settings, tipherethRepo, libauthAuth, supervisorRepo, idGenerator, libsearchSearch, topic3, key)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return tiphereth, func() {
		cleanup()
	}, nil
}

// Injectors from serve_wire.go:

func wireServe(arg []*conf.ConfigDigest, config *conf.Config, settings *libapp.Settings) (*kratos.App, func(), error) {
	confServer := conf.GetServer(config)
	auth := conf.GetAuth(config)
	libauthAuth, err := libauth.NewAuth(auth)
	if err != nil {
		return nil, nil, err
	}
	database := conf.GetDatabase(config)
	dataData, cleanup, err := data.NewData(database, settings)
	if err != nil {
		return nil, nil, err
	}
	angelaRepo := data.NewAngelaRepo(dataData)
	idGenerator, err := libidgenerator.NewIDGenerator()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	search := conf.GetSearch(config)
	libsearchSearch, err := libsearch.NewSearch(search, settings)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	consul := conf.GetConsul(config)
	confPorter := conf.GetPorter(config)
	inprocPorter, err := client.NewInprocPorter()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	librarianPorterServiceClient, err := client.NewPorterClient(consul, confPorter, settings, inprocPorter)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	supervisorRepo := data.NewSupervisorRepo(dataData)
	angela := bizangela.NewAngela(angelaRepo, libauthAuth, idGenerator, libsearchSearch, librarianPorterServiceClient, supervisorRepo)
	ketherRepo := data.NewKetherRepo(dataData)
	geburaRepo := data.NewGeburaRepo(dataData)
	ketherBase, err := bizkether.NewKetherBase(ketherRepo, supervisorRepo, geburaRepo, librarianPorterServiceClient, libsearchSearch, idGenerator)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	mq := conf.GetMQ(config)
	db := data.GetDB(dataData)
	cache := conf.GetCache(config)
	builtInObserver, err := libobserve.NewBuiltInObserver()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	libmqMQ, cleanup2, err := libmq.NewMQ(mq, db, cache, settings, builtInObserver)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	store, err := libcache.NewStore(cache)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	libcacheMap := bizkether.NewAppInfoCache(geburaRepo, store)
	topic := bizkether.NewUpdateAppInfoIndexTopic(ketherBase)
	libmqTopic := bizkether.NewPullAppInfoTopic(ketherBase, libcacheMap, topic)
	topic2 := bizkether.NewPullAccountAppInfoRelationTopic(ketherBase, libmqTopic)
	topic3 := bizkether.NewPullAccountTopic(ketherBase, topic2)
	netzachRepo := data.NewNetzachRepo(dataData)
	map2 := bizkether.NewNotifyFlowCache(netzachRepo, store)
	map3 := bizkether.NewFeedToNotifyFlowCache(netzachRepo, store)
	map4 := bizkether.NewNotifyTargetCache(netzachRepo, store)
	topic4 := bizkether.NewNotifyPushTopic(ketherBase, map4)
	topic5 := bizkether.NewNotifyRouterTopic(ketherBase, map2, map3, topic4)
	topic6 := biznetzach.NewSystemNotificationTopic(netzachRepo, idGenerator)
	topic7 := bizkether.NewFeedItemPostprocessTopic(ketherBase, topic5, topic6)
	topic8 := bizkether.NewPullFeedTopic(ketherBase, topic7, topic6)
	kether, err := bizkether.NewKether(ketherBase, libmqMQ, topic3, topic2, libmqTopic, topic8, topic5, topic4, topic7, topic)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tipherethRepo := data.NewTipherethRepo(dataData)
	key := biztiphereth.NewUserCountCache(tipherethRepo, store)
	tiphereth, err := biztiphereth.NewTiphereth(settings, tipherethRepo, libauthAuth, supervisorRepo, idGenerator, libsearchSearch, topic3, key)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	gebura := bizgebura.NewGebura(geburaRepo, libauthAuth, idGenerator, libsearchSearch, librarianPorterServiceClient, supervisorRepo, topic, libmqTopic, libcacheMap)
	storage := conf.GetStorage(config)
	s3, err := libs3.NewS3(storage, settings)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	binahRepo, err := data.NewBinahRepo(s3)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	controlBlock := bizbinah.NewControlBlock(libauthAuth)
	binah := bizbinah.NewBinah(binahRepo, controlBlock, libauthAuth)
	yesodRepo := data.NewYesodRepo(dataData)
	cron, err := libcron.NewCron()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	map5 := bizyesod.NewFeedOwnerCache(yesodRepo, store)
	yesod, err := bizyesod.NewYesod(yesodRepo, supervisorRepo, cron, idGenerator, libsearchSearch, topic8, topic6, map5)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	netzach, err := biznetzach.NewNetzach(netzachRepo, supervisorRepo, idGenerator, libsearchSearch, libmqMQ, map3, map2, map4, topic6)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	chesedRepo := data.NewChesedRepo(dataData)
	map6 := bizchesed.NewImageCache(store)
	chesed, err := bizchesed.NewChesed(chesedRepo, binahRepo, idGenerator, libsearchSearch, cron, librarianPorterServiceClient, controlBlock, map6)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	librarianSephirahServiceServer := sephirah.NewLibrarianSephirahService(angela, kether, tiphereth, gebura, binah, yesod, netzach, chesed, supervisorRepo, settings, libauthAuth)
	librarianSentinelServiceServer := sentinel.NewLibrarianSentinelService(tiphereth, gebura)
	librarianSephirahPorterServiceServer := porter.NewLibrarianSephirahPorterService(kether, tiphereth, gebura, binah, yesod, netzach, chesed, settings, libauthAuth)
	grpcServer, err := server.NewGRPCServer(confServer, libauthAuth, librarianSephirahServiceServer, librarianSentinelServiceServer, librarianSephirahPorterServiceServer, settings, builtInObserver, inprocPorter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	httpServer, err := server.NewGrpcWebServer(grpcServer, confServer, libauthAuth, settings, builtInObserver)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	angelaWeb := angelaweb.NewAngelaWeb(confServer, settings, arg, libauthAuth, angela, tiphereth, gebura, key)
	clientPorter, err := client.NewPorter(librarianPorterServiceClient, consul, confPorter, inprocPorter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	bizsupervisorSupervisor := bizsupervisor.NewSupervisor(settings, supervisorRepo, clientPorter, libauthAuth, idGenerator)
	porterFeatureController := bizsupervisor.NewPorterFeatureController(bizsupervisorSupervisor)
	supervisorService, err := supervisor.NewSupervisorService(bizsupervisorSupervisor, confPorter, libauthAuth, clientPorter, topic6, cron, tipherethRepo, porterFeatureController)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app, err := newApp(grpcServer, httpServer, angelaWeb, supervisorService, libmqMQ, cron, builtInObserver, consul, s3, inprocPorter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
